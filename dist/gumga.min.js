
angular.module('gumga.core',
	['gumga.services',
	'gumga.controllers',
	'gumga.directives']);

(function(){
	'use strict';

	angular.module('gumga.controllers',[]);

})();

(function(){
	'use strict';

	angular.module('gumga.directives',
		[
		'gumga.directives.address',
		'gumga.directives.alert',
		'gumga.directives.breadcrumb',
		'gumga.directives.counter',
		'gumga.directives.formbuttons',
		'gumga.directives.manytomany',
		'gumga.directives.manytoone',
		'gumga.directives.menu',
		'gumga.directives.nav',
		'gumga.directives.onetomany',
		'gumga.directives.search',
		'gumga.directives.table',
		'gumga.directives.upload',
		'gumga.directives.form',
		'gumga.directives.translate'
		]);

})();

(function(){
	'use strict';

	angular.module('gumga.services',[
		'gumga.services.address',
		'gumga.services.keyboard',
		'gumga.services.base',
		'gumga.services.utils',
		'gumga.services.alert',
		'gumga.services.translate',
		'gumga.services.webstorage'
		]);
})();

(function(){
	'use strict';
	/**
	 * @ngdoc directive
	 * @name gumga.core:gumgaAddress
	 * @restrict E
	 * @description O componente GumgaAddress recebe um objeto que será preenchido com o endereço, que pode ser pesquisado através do CEP (Utilizando um WebService GUMGA),
	 * ou preenchido manualmente pelo usuário. Este objeto de entrada pode ser vazio ou preferivelmente no formato do objeto GUMGA.
       * ## Exemplo
       * Veja um exemplo em funcionamento [aqui](http://embed.plnkr.co/7t9mZtLl9bPuVhmig0oI/).
	 * @param {Object} value Atributo obrigatório que irá conter o nome do objeto no $scope no qual os valores do Endereço serão colocados.
	 * @param {String} name Atributo obrigatório e único que irá conter um nome de identificador para a directive.
	 * @param {String} title Atributo opcional que irá conter o título para o panel da directive.
	 * @param {Function} onSearchCepStart Atributo opcional que irá conter o nome de uma função que será executada quando a busca pelo CEP começar.
	 * @param {Function} onSearchCepSuccess Atributo opcional que irá conter o nome de uma função que será executada quando a busca pelo CEP retornar sucesso.
       *  Pode ser chamada com um atributo com os valores `on-search-cep-success="doSomething($value)"`
	 * @param {Function} onSearchCepError Atributo opcional que irá conter o nome de uma função que será executada quando a busca pelo CEP retornar erro.
       *  Pode ser chamada com um atributo com os valores `on-search-cep-error="doSomething($value)"`
      */
	AddressDirective.$inject = ["GumgaAddressService", "$http"];
      function AddressDirective(GumgaAddressService,$http){
      	var template = [
      	'<div class="address" style="padding-left: 0">',
      	'    <div class="col-md-8 col-sm-12 col-xs-12" style="padding-left: 0">',
      	'          <accordion>',
      	'                <accordion-group style="margin-top: 1%" is-open="true" heading="{{::title}}">',
      	'                      <div class="col-md-12">',
      	'                            <label for="input{{::id}}">CEP</label>',
      	'                            <div class="input-group">',
      	'                                  <input type="text" class="form-control" ng-model="value.zipCode" id="input{{::id}}" ng-keypress="custom($event,value.zipCode)">',
      	'                                  <span class="input-group-btn">',
      	'                                        <button class="btn btn-primary" type="button" ng-click="searchCep(value.zipCode)" ng-disabled="loader{{::id}}" id="buttonSearch{{::id}}">Search <i class="glyphicon glyphicon-search"></i></button>',
      	'                                  </span>',
      	'                            </div>',
      	'                      </div>',
      	'                      <div class="col-md-4">',
      	'                            <label for="tipoLogradouro"><small>Tipo Logradouro</small></label>',
      	'                            <select type="text" ng-model="value.premisseType" class="form-control" ng-options="log for log in factoryData.logs"></select>',
      	'                      </div>',
      	'                      <div class="col-md-5" style="padding-left: 0; padding-right: 0">',
      	'                            <label for="Logradouro"><small>Logradouro</small></label>',
      	'                            <input type="text" ng-model="value.premisse" class="form-control id="oi"/>',
      	'                      </div>',
      	'                      <div class="col-md-3">',
      	'                            <label for="Número"><small> Número </small></label>',
      	'                            <input type="text" ng-model="value.number" class="form-control" id="numberInput{{::id}}"/>',
      	'                      </div>',
      	'                      <div class="col-md-12">',
      	'                            <label for="Complemento"><small>Complemento</small></label>',
      	'                            <input type="text" ng-model="value.information" class="form-control"/>',
      	'                      </div>',
      	'                      <div class="col-md-7">',
      	'                            <label for="Bairro"><small> Bairro </small></label>',
      	'                            <input type="text" ng-model="value.neighbourhood" class="form-control"/>',
      	'                      </div>',
      	'                      <div class="col-md-5">',
      	'                            <label for="Localidade"><small> Localidade </small></label>',
      	'                            <input type="text" ng-model="value.localization" class="form-control"/>',
      	'                      </div>',
      	'                      <div class="col-md-4">',
      	'                            <label for="UF"><small> UF </small></label>',
      	'                            <select ng-model="value.state" class="form-control" ng-options="uf for uf in factoryData.ufs"></select>',
      	'                      </div>',
      	'                      <div class="col-md-4">',
      	'                            <label for="País"><small> País </small></label>',
      	'                            <select ng-model="value.country" class="form-control" ng-options="pais for pais in factoryData.availableCountries"></select>',
      	'                      </div>',
      	'                      <div class="col-md-4" style="padding-top: 2%">',
      	'                            <a class="btn btn-default pull-right" ng-href="{{returnLink(value)}}" target="_blank">Maps <i class="glyphicon glyphicon-globe"></i></a>',
      	'                      </div>',
      	'                </accordion-group>',
      	'          </accordion>',
      	'    </div>',
      	'</div>'];
      	return {
      		restrict: 'E',
      		scope: {
      			value: '=',
      			onSearchCepStart: '&?',
      			onSearchCepSuccess: '&?',
      			onSearchCepError: '&?'
      		},
      		template: template.join('\n'),
      		link: function (scope, elm, attrs, ctrl) {
						function isEmpty(obj){
    					for(var key in obj) if(obj.hasOwnProperty(key)){
        				return false;
    					}
    					return true;
						}
	          if(isEmpty(scope.value)) scope.value = GumgaAddressService.returnFormattedObject();
	          if(!attrs.name) throw "É necessário passar um parâmetro 'name' como identificador para GumgaAddress";
      			scope.title = attrs.title || 'Endereço';
      			scope.id = attrs.name;
      			scope['loader' + scope.id] = false;
            scope.factoryData = {
                ufs: GumgaAddressService.everyUf,
                logs: GumgaAddressService.everyLogradouro,
                availableCountries: GumgaAddressService.availableCountries
            };
            var eventHandler = {
                  searchCepStart: (attrs.onSearchCepStart ? scope.onSearchCepStart : angular.noop),
                  searchCepSuccess: (attrs.onSearchCepSuccess ? scope.onSearchCepSuccess : angular.noop),
                  searchCepError: (attrs.onSearchCepError ? scope.onSearchCepError: angular.noop)
            };
      			scope.custom = function ($event, cep) {
              $event.charCode == 13? scope.searchCep(cep) : angular.noop;
      			};

      			scope.returnLink = function (value) {
      				if (!value.number) {
      					value.number = '';
      				}
      				return 'https://www.google.com.br/maps/place/' + value.premisseType + ' ' + value.premisse + ',' + value.number+ ',' + value.localization;
      			};
      			scope.searchCep = function (cep) {
      				scope['loader' + scope.id] = true;
      				eventHandler.searchCepStart();
      				$http.get('http://www.gumga.com.br/services-api/public/cep/'+cep)
      				.success(function (values) {
      					eventHandler.searchCepSuccess({$value: values});
      					scope['loader' + scope.id] = false;
      					if (parseInt(values.resultado) == 1) {
      						scope.value.premisseType = values.tipo_logradouro;
      						scope.value.premisse = values.logradouro;
      						scope.value.localization = values.cidade;
      						scope.value.neighbourhood = values.bairro;
      						scope.value.state = values.uf;
      						scope.value.country = 'Brasil';
      					}

      				})
      				.error(function(data){
      					eventHandler.searchCepError({$value: data});
      				})
      			};
      			if (scope.value.zipCode) {
      				scope.searchCep(scope.value.zipCode);
      			}
      		}
      	};
      }
      angular.module('gumga.directives.address',['gumga.services.address'])
      .directive('gumgaAddress',AddressDirective);
    })();

(function(){
	'use strict';
	/**
	 * @ngdoc directive
	 * @name gumga.core:gumgaAlert
	 * @restrict EA
	 * @element ANY
	 * @description O componente gumgaAlert serve para criar notificações growl-like e é baseada em eventos.
	 * Para o funcionamento da directive, é necessário incluí-la apenas uma vez no seu código html (de preferência no index.html),
	 * para que os listeners sejam adicionados(Atualmente, na nova versão isto não é mais necessário, ver {@link gumga.core:GumgaAlert}). 
	 *
	 * @example
	 * ## Para que o alerta seja realizado, utilize um dos eventos:
	 * <pre>
	 * 	$scope.$emit('dangerMessage',{title: 'Error' ,message: 'Error 404'});
	 * 	$scope.$emit('successMessage',{title: 'Parabéns!' ,message: 'Sua solicitação foi aceita com sucesso!'});
	 *  $scope.$emit('warningMessage',{title: 'Cuidado!' ,message: 'A área que você está entrando é restrita.'});
   * 	$scope.$emit('infoMessage',{title: 'Salvar' ,message: 'Para salvar, entre em contato com o administrador.'});
	 * </pre>
	 *  Para ver um exemplo em funcionamento, clique [aqui](http://embed.plnkr.co/wdlI7U4nQf9kNhGlyCfU/)
	 */
	Alert.$inject = ["$rootScope"];
	function Alert($rootScope){
		return {
			restrict: 'EA',
			scope: false,
			compile: function(){
				function notify(icon, title, message, type) {
					$.notify({
						icon: icon,
						title: title,
						message: message
					}, {
						type: type,
						offset: 50,
						timer: 100,
						delay: 3500,
						onShow: $rootScope.$broadcast('onNotificationShow'),
						onClose: $rootScope.$broadcast('onNotificationClose'),
						allow_dismiss: true,
						animate: {
							enter: 'animated bounceInRight',
							exit: 'animated bounceOutRight'
						},
						template: '<div data-notify="container" class="col-xs-9 col-sm-3 alert alert-{0}" role="alert">' +
						'<button type="button" aria-hidden="true" class="close" data-notify="dismiss">×</button>' +
						'<span data-notify="icon"></span> ' +
						'<span data-notify="title"><b>{1}</b></span><br> ' +
						'<span data-notify="message">{2}</span>' +
						'</div>'
					});
				}

				$rootScope.$on('dangerMessage', function (ev, data) {
					notify('glyphicon glyphicon-exclamation-sign', data.title, data.message, 'danger');
				});
				$rootScope.$on('successMessage', function (ev, data) {
					notify('glyphicon glyphicon-ok', data.title, data.message, 'success');
				});
				$rootScope.$on('warningMessage', function (ev, data) {
					notify('glyphicon glyphicon-warning-sign', data.title, data.message, 'warning');
				});
				$rootScope.$on('infoMessage', function (ev, data) {
					notify('glyphicon glyphicon-info-sign', data.title, data.message, 'info');
				});
			}
		}
	}
	angular.module('gumga.directives.alert',[])
	.directive('gumgaAlert',Alert);
})();
(function(){
	'use strict';

	Breadcrumb.$inject = ["$rootScope"];
	/**
	 * @ngdoc directive
	 * @name gumga.core:gumgaBreadcrumb
	 * @restrict E
	 * @description O componente GumgaBreadcrumb serve para mostrar ao usuário a lista das páginas visitadas. Este componente atuamente
	 * funciona caso exista dependência do [ui-router](https://github.com/angular-ui/ui-router).
	 * 
	 * O componente GumgaBreadcrumb ouve ao evento `breadChanged`, que recebe os states que estão sendo visitados. Uma das implementações possíveis para esse
	 * evento breadChanged é a seguinte:
	 * <pre>
	 * $rootScope.breadcrumbs = [];
      $rootScope.$on('$stateChangeSuccess', function (event, toState) {
        updateBreadcrumb(toState.name, toState.data.id);
      });
      function updateBreadcrumb(state, id) {
          function get(id) {
              for (var i = 0, len = $rootScope.breadcrumbs.length; i < len; i++) {
                  if ($rootScope.breadcrumbs[i].id === id) {
                      return i;
                  }
              }
          }
          if (id && get(id) >= 0) {
              $rootScope.breadcrumbs.splice(get(id), $rootScope.breadcrumbs.length - get(id), {state: state, id: id});
          } else {
              $rootScope.breadcrumbs.push({state: state, id: id});
          }
          !id ? $rootScope.breadcrumbs = [] : angular.noop;
          $rootScope.$broadcast('breadChanged');
      }
	 * </pre> 
	 * Este código foi colocado dentro do `run` do módulo principal da aplicação.
	 */

	function Breadcrumb($rootScope){
		var template = [
		'<ol class="breadcrumb">',
		'<li ng-repeat="bread in breadcrumbs" ><a ui-sref="{{::bread.state}}">{{::bread.state}}</a></li>',
		'</ol>'
		];
		return {
			restrict: 'E',
			template: template.join('\n'),
			replace: true,
			link: function($scope, $elm, $attrs){
				$scope.$on('breadChanged',function(){
					$scope.breadcrumbs = $rootScope.breadcrumbs.filter(function(e){
						return e.state.split('.').length >=2 ;
					});
				});
			}
		};
	}
	angular.module('gumga.directives.breadcrumb',[])
	.directive('gumgaBreadcrumb',Breadcrumb);
})();
// define = Require.js
(function(){
  'use strict';

    Counter.$inject = ["$compile"];
      /**
       * @ngdoc directive
       * @name gumga.core:gumgaCounter
       * @element input
       * @description O componente gumgaCounter permite escolher um tamanho máximo permitido no campo, também cria um contador de caracteres indicando se os caracteres
       * passaram do limite ou não. 
       * 
       * Caso um valor seja passado para a directive, ela atualizará o contador baseado nesse número. Caso não, ela pegará o valor
       * passado para a directive {@link gumga.core:gumgaMaxLength}
       * 
       * @example
       *  Um exemplo da directive gumgaCounter funcionando pode ser encontrado [aqui](http://embed.plnkr.co/6xJuUuiI456kqbXN3Q6f/).
       * <pre>
       * <input name="example" ng-model="example" gumga-counter="15" />
       * </pre>
      */

      function Counter($compile){
            return{
                restrict: 'A',
                link: function (scope, elem, attrs) {
                    scope._max = parseInt(attrs.gumgaMaxLengthText);
                    if (!isNaN(parseInt(attrs.gumgaCounter))) {
                        scope._max = parseInt(attrs.gumgaCounter);
                    }
                    var template = '<p class="{{_max <= teste.length ? \'text-danger\' : \'text-muted\'}}">{{_max <= '+ attrs.ngModel +'.length ? "Você passou o limite de '+scope._max+' caracteres" : _max - '+ attrs.ngModel +'.length + " caracteres restantes" }}</p>';
                    elem.after($compile(template)(scope));
                }
            };
      }

      angular.module('gumga.directives.counter', [])
        .directive('gumgaCounter', Counter);


})();

(function () {


  angular.module('gumga.directives.form',[
    'gumga.directives.form.form',
    'gumga.directives.form.max.date',
    'gumga.directives.form.max.length',
    'gumga.directives.form.max.number',
    'gumga.directives.form.min.date',
    'gumga.directives.form.min.length',
    'gumga.directives.form.min.number',
    'gumga.directives.form.pattern',
    'gumga.directives.form.range.date',
    'gumga.directives.form.range.number',
    'gumga.directives.form.required',
  ])


})();

(function(){
	'use strict';
    /**
     * @ngdoc directive
     * @name gumga.core:gumgaFormButtons
     * @restrict E
     * @description O componente gumgaFormButtons pode ser utilizado para quando necessite de botões para o formulário,
     * tanto de continuar inserindo, de salvar e retroceder.
     *
     *  @param {Function} submit Parâmetro obrigatório que contém uma função que será executada quando o botão de continuar for clicado.
     *  @param {boolean} valid Parâmetro obrigatório que irá conter um valor booleano para validar caso o formulário é válido para liberar o botão de salvar.
     *  @param {Object} continue Object que deverá conter um atributo booleano chamado `value`, para controlar caso continuará inserindo ou não. Essa 
     *  opção aparecerá apenas quando o objeto $stateParams(pertencente ao ui-router) não possuir um id, ou seja, caso esteja numa tela de inserção.
     *  @param {boolean} confirm-dirty Parâmetro não obrigatório que irá conter um booleano para indicar caso deseje ter uma confirmação de saída do formulário
     *  quando este foi alterado alguma vez.
     */
	FormButtons.$inject = ["$state", "$stateParams", "$modal", "$rootScope"];
    function FormButtons($state, $stateParams,$modal,$rootScope) {
        return {
            restrict: 'E',
            scope: {
                do: '&submit',
                valid: '=',
                continue: '=?',
                confirmDirty: '=?'
            },
            template:
            '<div class="full-width-without-margin">'+
            '   <scope></scope>'+
            '   <div ng-class="getPosition()">' +
            '       <label id="continuarInserindo" ng-if="continue" >'+
            '           <input type="checkbox" name="continuar" ng-model="continue.value"/>' +
            '           <span>Continuar Inserindo</span>'+
            '       </label>' +
            '       <button class="btn btn-warning" style="margin-right: 0.8em" ng-click="back()" type="button"><i class="glyphicon glyphicon-floppy-remove"></i> Back</button>' +
            '       <button class="btn btn-primary" style="margin-right: 0" ng-click="do()" ng-disabled="!valid" type="button"><i class="glyphicon glyphicon-floppy-saved"></i> Save</button>' +
            '   </div>'+
            '<div>',
            require: '^form',
            link: function (scope, elm, attrs, ctrl) {
                if(!attrs.confirDirty) scope.confirmDirty = true;
                if(!$stateParams.id) scope.inNew = true;
                if(!attrs.continue) scope.continue = false;

                scope.getPosition = function () {
                    if (attrs.position == 'left') {
                        return 'pull-left';
                    }
                    return 'pull-right';
                };

                scope.back = function () {
                    if(scope.confirmDirty && ctrl.$dirty){
                        var modal = $modal.open({
                            template:
                            '<div>'+
                            '   <section class="modal-body">' +
                            '       <h4>Deseja sair sem salvar as alterações?</h4>' +
                            '   </section>'+
                            '   <div class="modal-footer">'+
                            '       <button class="btn btn-default" ng-click="handleClose(false)">Não</button>' +
                            '       <button class="btn btn-default" ng-click="handleClose(true)">Sim</button>' +
                            '   </div>'+
                            '</div>',
                            backdrop: false,
                            keyboard: false,
                            size: 'sm',
                            controller: ["$scope", "$modalInstance", "$state", "$rootScope", function($scope,$modalInstance,$state,$rootScope){
                                $scope.handleClose = function(_boolean){
                                    _boolean ? $modalInstance.close(true) : $modalInstance.close(false);
                                };  
                                if($state){
                                    $scope.currentState =$state.current.name;
                                    $rootScope.$on('$stateChangeStart',
                                        function(event, toState, toParams, fromState, fromParams){
                                            $modalInstance.dismiss();
                                        })
                                }
                            }]
                        });
                        modal.result.then(function(shouldIGo){
                            if(shouldIGo){
                                $state.go(attrs.back);
                                return 0;
                            }
                        })
                        } else {
                            $state.go(attrs.back);
                        }
                };

            }
        } 
    }

angular.module('gumga.directives.formbuttons',['ui.bootstrap','ui.router'])
.directive('gumgaFormButtons',FormButtons);

})();

(function(){
	'use strict';

	ManyMany.$inject = ["$modal", "$compile", "$timeout"];
	/**
	 * @ngdoc directive
	 * @name gumga.core:gumgaManyToMany
	 * @restrict E
	 * @description 
	 * 	O componente gumgaManyToMany é um componente que é utilizado para mostrar duas listas lado a lado, e permitir que um registro seja trocado de uma lista para outra,
	 * 	assim como também visualizado os seus valores(caso seja um objeto). Um exemplo do componente pode ser encontrado [aqui](http://embed.plnkr.co/gyrqAKQQGuEHwp2npv8G/).
	 *
	 * ---
	 * ## Configuração de como será mostrado o valor na lista
	 *
	 *Para que o programador possa escolher como os valores serão demonstrados, forão desenvolvidas duas tags que devem estar dentro do componente manyToMany.
	 * 		<pre> <left-field>{{$value}}</left-field>
	 * 		<left-field>{{$value}}</left-field></pre>
	 * 
	 * @param {Array} left-list Parâmetro obrigatório que irá conter uma variável que possuirá um array, para ser mostrado na lista da esquerda.
	 *  *A lista da esquerda será filtrada e não conterá resultados iguais a da lista da direita.*
	 * @param {Array} right-list Parâmetro obrigatório que irá conter uma variável que possuirá um array, para ser mostrado na lista da direita.
	 * @param {Function} left-search Parâmetro obrigatório que irá conter uma variável que possuirá uma função que irá ser executada toda vez
	 * que o usuário digitar algo no input acima da lista. Essa função terá o valor do input como parâmetro. O parâmetro deverá ser este: `left-search="doSearch(text)"`
	 * @param {Function} right-search Parâmetro obrigatório que irá conter uma variável que possuirá uma função que irá ser executada toda vez
	 * que o usuário digitar algo no input acima da lista. Essa função terá o valor do input como parâmetro. O parâmetro deverá ser este: `left-search="doSearch(text)"`
	 * @param {Function} post-method Parâmetro não obrigatório que irá conter uma variável que possuirá uma função que irá ser executada quando o usuário desejar adicionar um valor 
	 * caso sua busca não tenha trazido resultados.
	 * @param {Function} on-list-change Parâmetro não obrigatório que irá conter uma variável que possuirá uma função que irá ser executada quando o usuário tiver clicado em um registro
	 * e o mesmo tiver trocado de lista.
	 * @param {Function} on-value-visualization-opened Parâmetro não obrigatório que irá conter uma variável que possuirá uma função que irá ser executada quando o usuário tiver aberto o modal
	 * para visualização de dados
	 * @param {Function} on-value-visualization-closed Parâmetro não obrigatório que irá conter uma variável que possuirá uma função que irá ser executada quando o usuário tiver fechado o modal
	 * para visualização de dados
	 * @param {Boolean} authorize-add Parâmetro não obrigatório que irá conter uma variável que possuirá um booleano que irá fazer o controle para mostrar o botão de adicionar um registro caso a busca não
	 * tenha retornado nenhum registro
	 * @param {String} left-label Parâmetro não obrigatório que irá conter uma String que irá aparecer acima do input e da lista.
	 * @param {String} right-label Parâmetro não obrigatório que irá conter uma String que irá aparecer acima do input e da lista.
	 *

	 */
	function ManyMany($modal,$compile,$timeout){

		return {
			restrict: 'E',
			scope: {
				left: '=leftList',
				right: '=rightList',
				leftFn: '&leftSearch',
				rightFn: '&rightSearch',
				postMethod: '&',
				onListChange: '&?',
				onNewValueAdded: '&?',
				onValueVisualizationOpened: '&?',
				onValueVisualizationClosed: '&?',
				authorizeAdd: '=?'
			},
			transclude: true,
			link: function (scope, elm, attrs, ctrl, transcludeFn) {
				if (!attrs.authorizeAdd) scope.authorizeAdd = true;
				var mockObject = {};
				scope.texts = {left: '',right: ''};
				scope.template = '';
				scope.labels = {left: attrs.leftLabel,right: attrs.rightLabel};
				var eventHandler = {
					listChange: (attrs.onListChange? scope.onListChange : angular.noop),
					newValueAdded: (attrs.onNewValueAdded ? scope.onNewValueAdded : angular.noop),
					valueVisualizationOpened: (attrs.onValueVisualizationOpened ? scope.onValueVisualizationOpened :angular.noop),
					valueVisualizationClosed: (attrs.onValueVisualizationClosed ? scope.onValueVisualizationClosed :angular.noop)
				};
				transcludeFn(scope,function(cloneEl){
					angular.forEach(cloneEl,function(cl){
						var element = angular.element(cl)[0];
						switch(element.nodeName){
							case 'LEFT-FIELD':
							scope.texts.left = element.innerHTML;
							break;
							case 'RIGHT-FIELD':
							scope.texts.right = element.innerHTML;
							break;
						}
					});
					checkErrors();
				});
				mountRenderedContent();
				scope.$watch('left',function(){
					checkErrors();
					copyObject(scope.left[0]);
				});
				function copyObject(obj) {
					for (var key in obj) if (obj.hasOwnProperty(key)) {
						mockObject[key] = null;
					}
				}
				function checkErrors(){
					var errorTexts = [];
					if(!scope.left || !scope.right){
						errorTexts.push('You haven\'t provided a list to GumgaManyToMany directive');
					}
					if(!scope.texts.left || !scope.texts.right){
						errorTexts.push('You have\'nt provided the content to GumgaManyToMany directive');
					}
					errorTexts.forEach(function(txt){
						throw txt;
					});
					removeDuplicates();
				}
				function removeDuplicates(){
					function filterOnRight(text){
						return scope.right.filter(function($elm){
							return $elm[attrs.filterParameter] == text;
						}).length
					}
					scope.leftAux = scope.left.filter(function(elm){
						if(filterOnRight(elm[attrs.filterParameter]) == 0){
							return elm;
						}
					});
				}
				function mountRenderedContent(){
					var text =
					'<div class="full-width-without-padding">\n'+
					'   <div class="col-md-6" style="padding-left: 0">\n'+
					'       <strong><small>{{::labels.left}}</small></strong>\n' +
					'       <div class="{{showClass()}}">'+
					'           <input type="text" name="manymanyleft" ng-model="leftFilter" novalidate class="form-control"' + doesItHaveFunction('left',0) + ' ng-change="leftFn({param: leftFilter})" ng-model-options="{ updateOn: \'default blur\', debounce: {\'default\': 300, \'blur\': 0} }"/>\n' +
					'           <span class="input-group-addon" ng-show="showPlus(leftFilter)"> ' +
					'               <button type="button" style="border: 0;background-color: #EEE" ng-click="addNew(leftFilter)"><i class="glyphicon glyphicon-plus"></i></button>' +
					'           </span>' +
					'       </div>' +
					'       <ul class="list-group" style="max-height: 200px;overflow: auto;">\n' +
					'           <li class="list-group-item" style="display:flex;padding: 7px 15px;" ng-repeat="$value in leftAux ' + doesItHaveFunction('left',1) + '">' +
					'               <a class="inside-list-anchor" ng-click="removeFromAndAddTo(leftAux,right,$value)">' + scope.texts.left + '</a>' +
					'              <button class="badge" style="background-color: #81AEDA;cursor: pointer;border: 0" ng-click="halp($value)"><i class="glyphicon glyphicon-resize-full"></i></button>' +
					'           </li>\n'+
					'       </ul>'+
					'   </div>\n'+
					'   <div class="col-md-6" style="padding-right: 0">\n'+
					'       <strong><small>{{::labels.right}}</small></strong>\n'+
					'       <input type="text" name="manymanyleft" ng-model="rightFilter" novalidate class="form-control"' + doesItHaveFunction('right',0) + '/>\n'+
					'       <ul class="list-group" style="max-height: 200px;overflow: auto;">\n' +
					'           <li class="list-group-item" style="display:flex;padding: 7px 15px;" ng-repeat="$value in right ' + doesItHaveFunction('right',1) + '">' +
					'               <a class="inside-list-anchor" ng-click="removeFromAndAddTo(right,leftAux,$value)">' + scope.texts.right + '</a>' +
					'              <button class="badge badge-helper" ng-click="halp($value)"><i class="glyphicon glyphicon-resize-full"></i></button>' +
					'           </li>\n'+
					'       </ul>\n'+
					'   </div>\n'+
					'</div>\n';
					elm.append($compile(text)(scope));
				}
				scope.removeFromAndAddTo = function(removeFrom,addTo,value){
					removeFrom.splice(removeFrom.indexOf(value),1);
					eventHandler.listChange({$value:value});
					addTo.push(value);
				};
				scope.addNew = function(text){
					scope.leftFilter = '';
					scope.postMethod({value: text });
					eventHandler.newValueAdded();
				};
				scope.showClass = function(){
					if(scope.showPlus()){
						return 'input-group';
					}
					return '';
				};
				scope.halp = function(obj){
					scope.template =
					'<div class="modal-body">\n';
					for (var key in obj) if (obj.hasOwnProperty(key) && key != '$$hashKey' && key != 'oi' && key != 'version') {
						scope.template += '   <div class="form-group">\n';
						scope.template += '       <label><small>'+ key +'</small></label>\n';
						scope.template += '       <input type="text" ng-model="$value.' + key +'" disabled class="form-control"/>\n';
						scope.template += '   </div>\n';
					}
					scope.template += '   <div class="modal-footer">\n';
					scope.template += '       <button type="button" class="btn btn-warning" ng-click="back()">Back</button>\n';
					scope.template += '   </div>\n';
					scope.template += '</div>\n';
					eventHandler.valueVisualizationOpened();
					var mi = $modal.open({
						template: scope.template,
						size: 'sm',
						controller: ["$scope", "$value", "$modalInstance", function($scope,$value,$modalInstance){
							$scope.$value = $value;
							$scope.back = function(){
								$modalInstance.dismiss();
							}
						}],
						resolve: {
							$value: function(){
								return obj;
							}
						}
					});

					mi.result.then(function(){
						eventHandler.valueVisualizationClosed();
					})
				};
				scope.showPlus = function(){
					function filterLeft(){
						return scope.leftAux.filter(function(el){
							return el[attrs.filterParameter] == scope.leftFilter;
						}).length < 1;
					}
					function filterRight(){
						return scope.right.filter(function(el){
							return el[attrs.filterParameter] == scope.leftFilter;
						}).length < 1;
					}
					if(scope.authorizeAdd == true){
						return filterLeft() && filterRight();
					}
					return false;
				};

				scope.doesItHaveClass = function(){
					if(scope.left.length > 0){
						return '';
					}
					return 'input-group';
				};
				function doesItHaveFunction(field,place){
					if(place == 0){
						if(field == 'left' && attrs.leftFn){
							return  'ng-change= "' + attrs.leftFn  +'({text: leftFilter})" ';
						}
						if(field == 'right' && attrs.rightFn){
							return  'ng-change= "' + attrs.leftFn  +'({text: rightFilter})" ';
						}
						return '';
					} else {
						if(field == 'left' && !attrs.leftFn){
							return ' | filter: leftFilter';
						}
						if(field == 'right' && !attrs.rightFn){
							return ' | filter: rightFilter'
						}
						return '';
					}
				}
			}
		}
	}

		angular.module('gumga.directives.manytomany',['ui.bootstrap'])
		.directive('gumgaManyToMany',ManyMany)
	})();
(function(){
    'use strict';

    ManyToOne.$inject = ["$templateCache", "GumgaKeyboard", "$modal"];
    /**
     * @ngdoc directive
     * @name gumga.core:gumgaManyToOne
     * @restrict E
     * @description
     *  A directive gumgaManyToOne pode ser usada para quando o programador precise de um select que filtre uma lista assíncronamente.
     *  Ela também permite adicionar um registro caso a busca retorne uma lista vazia e permite também visualizar os atributos do registro selecionado.
     *  ---
     *  #Exemplo básico de utilização do GumgaManyToOne
     *  O exemplo desse componente pode ser encontrado [aqui](http://embed.plnkr.co/NYL3gItVsWLFcGxt5itz/).
     *
     * @param {Object} value Parâmetro obrigatório que irá conter uma variável que será o registro escolhido na lista.
     * @param {Array} list Parâmetro obrigatório que irá conter uma lista dos registros que foram buscados.
     * @param {Function} search-method Parâmetro obrigatório que irá conter uma função que fará a busca na lista assíncronamente. `search-method="getSearch(param)"`
     * @param {Function} post-method Parâmetro obrigatório que irá conter uma função que dependendo do parâmetro `async`, chamará a função async com o parâmetro
     * `post-method="post(value)"` e caso o parâmetro async não esteja presente ou seja falso, fará um push na lista.
     * @param {String} field Parâmetro obrigatório que irá conter o atributo do registro que está sendo procurado e o que estará na lista.
     * @param {Boolean} authorize-add Parâmetro não obrigatório que irá conter uma variável que possuirá um booleano que irá fazer o controle para mostrar o botão de adicionar um registro caso a busca não
     * tenha retornado nenhum registro
     * @param {Btava veoolean} async Parâmetro não obrigatório que irá dizer caso componente fará um post chamando a função passada ou um push na lista. Por default, o valor é
     * @param {Function} on-new-value-added Parâmetro não obrigatório que irá conter uma variável que possuirá uma função que irá ser executada quando o usuário adicionar um novo valor.
     * @param {Function} on-value-visualization-opened Parâmetro não obrigatório que irá conter uma variável que possuirá uma função que irá ser executada quando o usuário tiver aberto o modal
     * para visualização de dados
     * @param {Function} on-value-visualization-closed Parâmetro não obrigatório que irá conter uma variável que possuirá uma função que irá ser executada quando o usuário tiver fechado o modal
     * para visualização de dados
     */



    function ManyToOne($templateCache,GumgaKeyboard,$modal){
        $templateCache.put('mtoItem.html',
            '<span bind-html-unsafe="match.label | typeaheadHighlight:query" style="cursor: pointer;"></span>');
        var template ='<div class="full-width-without-padding">';
        template += '   <div class="form-group">';
        template += '       <div ng-class="showFullView() || authorizeAdd ? \'input-group\' : \'\'">';
        template += '           <input class="form-control"  ng-model="model" type="text" typeahead="$value as $value[field] for $value in proxySearchMethod()">';
        template += '           <span class="input-group-addon" style="background-color: transparent; padding: 3px 12px;border-left:0" ng-show="showFullView()"> ';
        template += '               <button class="badge" style="background-color: #6ECFFF;border: 0" ng-click="halp(model)" ><i class="glyphicon glyphicon-resize-full"></i></button>';
        template += '           </span>';
        template += '           <span class="input-group-addon" style="padding: 0 0.25%" ng-show="authorizeAdd"> ';
        template += '               <button type="button" style="border: 0;background-color: transparent" ng-click="addNew(model)" ><i class="glyphicon glyphicon-plus"></i></button>';
        template += '           </span>';
        template += '       </div>';
        template += '   </div>';
        template += '</div>';
        return {
            restrict : 'E',
            template: template,
            require: '^form',
            scope : {
                model:'=value',
                list: '=',
                searchMethod: '&',
                postMethod: '&addMethod',
                field: '@',
                onNewValueAdded: '&?',
                onValueVisualizationOpened: '&?',
                onValueVisualizationClosed: '&?'
            },
            link: function(scope, elm, attrs,ctrl){
                scope.formCtrl = ctrl;
                var ngModelCtrl = elm.find('input').controller('ngModel'),
                eventHandler = {
                    newValueAdded: (attrs.onNewValueAdded ? scope.onNewValueAdded : angular.noop),
                    valueVisualizationOpened: (attrs.onValueVisualizationOpened ? scope.onValueVisualizationOpened :angular.noop),
                    valueVisualizationClosed: (attrs.onValueVisualizationClosed ? scope.onValueVisualizationClosed :angular.noop)
                },
                async;
                !attrs.authorizeAdd ? scope.authorizeAdd = true : scope.authorizeAdd = JSON.parse(attrs.authorizeAdd);
                !attrs.async ? async = true : async = JSON.parse(attrs.async);
                scope.list = scope.list || [];
                function checkIfItIsString(string){
                    return ((typeof string).toUpperCase().trim()) === 'string'.toUpperCase().trim() && string.length > 1;
                }
                scope.$watch('model',function(){
                    checkIfItIsString(scope.model) ?
                    ctrl.$setValidity('GumgaManyToOne',false) : ctrl.$setValidity('GumgaManyToOne',true);
                });
                try {
                    GumgaKeyboard.bindToElement(elm.find('input')[0],'down',function(){ngModelCtrl.$setViewValue(' ')});
                } catch(e){

                }

                scope.showFullView = function(){
                    return ((typeof scope.model).toUpperCase().trim()) === 'object'.toUpperCase().trim() && scope.model != undefined;
                };

                scope.showPlus = function(){
                    return (((typeof scope.model).toUpperCase().trim()) === 'string'.toUpperCase().trim() && scope.authorizeAdd === true) ;
                };

                scope.proxySearchMethod = function(){
                  return scope.searchMethod({param: ngModelCtrl.$viewValue});
                };
                scope.addNew = function(text){
                    if(async) {
                        scope.postMethod({value: text})
                        .then(function(values){
                          scope.model = values.data.data;
                        })
                    } else {
                        scope.list.push(text);
                    }
                };
                scope.halp = function(obj){
                    var template = '';
                    template =
                    '<div class="modal-body">\n';
                    for (var key in obj) if (obj.hasOwnProperty(key) && key != '$$hashKey' && key != 'oi' && key != 'version' && key != 'password' && typeof obj[key] != 'object') {
                        template += '   <div class="form-group">\n';
                        template += '       <label><small>'+ key +'</small></label>\n';
                        template += '       <input type="text" ng-model="$value.' + key +'" disabled class="form-control"/>\n';
                        template += '   </div>\n';
                    }
                    template += '   <div class="modal-footer">\n';
                    template += '       <button type="button" class="btn btn-warning" ng-click="back()">Back</button>\n';
                    template += '   </div>\n';
                    template += '</div>\n';
                    eventHandler.valueVisualizationOpened();
                    var mi = $modal.open({
                        template: template,
                        size: 'sm',
                        controller: ["$scope", "$value", "$modalInstance", function($scope,$value,$modalInstance){
                            $scope.$value = $value;
                            $scope.back = function(){
                                $modalInstance.dismiss();
                            }
                        }],
                        resolve: {
                            $value: function(){
                                return obj;
                            }
                        }
                    });
                    mi.result.then(function(){
                        eventHandler.valueVisualizationClosed();
                    })
                };
            }
        }
    }
        angular.module('gumga.directives.manytoone',['ui.bootstrap','gumga.services.keyboard'])
        .directive('gumgaManyToOne',ManyToOne);
    })();


(function(){
	'use strict';
	Menu.$inject = ["$http", "$compile"];
	/**
	 * @ngdoc directive
	 * @name  gumga.core:gumgaMenu
	 * @restrict E
	 * @description
	 *  O componente gumgaMenu é uma directive que cria um menu na lateral esquerda da tela para facilitar a navegação do usuário no sistema.
	 *  Seus itens são carregados de forma dinâmica através de um arquivo `json` que é carregado através de uma requisição HTTP. Além disso,
	 *  ele faz um filtro de acordo com as keys passadas para ele também através de um arquivo `json`.
	 *  ## Exemplo
     *  Veja um exemplo em funcionamento [aqui](http://embed.plnkr.co/UcMtAor6sUA6s0oZnJiu/preview).
	 *  @param {String} menu-url Parâmetro obrigatório que irá conter uma variável com o endereço do arquivo `json` para que seja carregada as entradas do menu.
	 *  @param {String} keys-url Parâmetro obrigatório que irá conter uma variável com o endereço do arquivo `json` para que seja carregada as chaves que farão o filtro do menu.
	 *  @param {String} image Parâmetro obrigatório que irá conter uma variável com o endereço da imagem que ficará no menu.
	 *
 	 * ## Example
	 * 	###Exemplo de json para o menu:
	 * <pre>
    [
      {
        "label": "Home",
        "URL": "welcome",
        "key": "CRUD-BASE",
        "icon": "glyphicon glyphicon-home",
        "icon_color": "",
        "imageUrl": "",
        "imageWidth": "",
        "imageHeight": "",
        "filhos": []
      }
    ]
	 * 	</pre>
	 * 	###Exemplo de json para as keys:
	 * 	<pre>
    [
      "CRUD-BASE",
      "CRUD-User"
    ]
	 * 	</pre>
	 *
	 *
	 *  @param {String} menu-url Parâmetro obrigatório que irá conter uma variável com o endereço do arquivo `json` para que seja carregada as entradas do menu.
	 *  @param {String} keys-url Parâmetro obrigatório que irá conter uma variável com o endereço do arquivo `json` para que seja carregada as chaves que farão o filtro do menu.
	 *  @param {String} image Parâmetro obrigatório que irá conter uma variável com o endereço da imagem que ficará no menu.
	 *

	 */
	function Menu($http, $compile) {
		return {
			restrict: 'E',
			replace: true,
			scope: {},
			link: function (scope, el, attrs) {
				scope.v = [];
				var indexs = [];
				var count = 0;

				var menuOpen = false;

				$http.get(attrs.menuUrl).then(function (data) {
					scope.dados = data.data;
				}, function (data) {
					throw 'Erro:' + data;
				});

				$http.get(attrs.keysUrl).then(function (data) {
					scope.keys = data.data;
				}, function (data) {
					throw 'Erro:' + data;
				});

				scope.$watchGroup(['dados', 'keys'], function () {
					if (scope.dados && scope.keys) {
						gerateMenus();
					}
				});

				var gerateMenus = function () {
					var template = ['<div>'];
					template.push('<button id="btn-menu" class="btn btn-link" ng-click="mostrarMenu()"><i class="glyphicon glyphicon-align-justify"></i></button>');
					template.push('<nav id="menu" class="col-sm-3" name="menu">');
					template.push('<ul class="menu-holder">');
					template.push('<img ng-src="' + attrs.image + '" alt="logo" width="40%" class="img-centered">');
					for (var i = 0; i < scope.dados.length; i++) {
						if (keyIsValid(scope.dados[i].key)) {
							template.push(gerarNavPill(scope.dados[i], 'menu', {count: -1, label: null}));
						}
					}
					template.push('</ul>');
					template.push('</nav>');
					template.push('</div>');
					template = template.join('\n');
					el.append($compile(template)(scope));
				};

				var gerarNavPill = function (param, type, parent) {

					scope.v[count] = {
						isActive: false,
						parent: parent.count
					};

					var urlSelected = location.hash;
					var url = angular.copy(param.URL);
					url = '#/'+url.replace('.','/')
					if (urlSelected==url) {
							var template = ['<li class="' + type + '-option" style="background: #4ca089" >'];
					} else {
							var template = ['<li class="' + type + '-option">'];
					}

					if (param.filhos.length > 0 && verificarPermicaoFilho(param.filhos)) {
						template.push('<i  ng-class="v[' + count + '].isActive ? \' glyphicon glyphicon-chevron-down \' : \'glyphicon glyphicon-chevron-right\'" class="fa ' + type + '-color"  ng-click="resetarMenu(' + count + ')"></i>');
					} else {
						if (param.icon) {
							if (param.icon_color) {
								template.push('<i  class=" ' + param.icon + ' " style="color: ' + param.icon_color + '" ng-click="resetarMenu(' + count + ')"></i>');
							} else {
								template.push('<i  class=" ' + param.icon + ' " style="color: #fff" ng-click="resetarMenu(' + count + ')"></i>');
							}
						}
					}

					template.push('<a ui-sref="' + param.URL + '" ng-class="v[' + count + '].isActive ? \'is-active\' : \' \'"');
					if (parent.label === null || param.filhos.length > 0) {
						template.push('gumga-translate-tag="' + param.label.toLowerCase() + '.menuLabel">');
					} else if (param.filhos.length === 0) {
						template.push('gumga-translate-tag="' + parent.label.toLowerCase() + '.' + param.label.toLowerCase() + '">');
					}
					template.push(param.label);
					template.push('</a>');

					if (param.imageUrl) {
						if(param.imageWidth && param.imageHeight){
							template.push('<a ui-sref="' + param.URL + '"><img  src="' + param.imageUrl + '" style="width: '+param.imageWidth+'; height: '+param.imageHeight+';" ng-click="resetarMenu(' + count + ')"></i></a>');
						}else
						template.push('<a ui-sref="' + param.URL + '"><img  src="' + param.imageUrl + '" style="width: 20px; height: 20px;" ng-click="resetarMenu(' + count + ')"></i></a>');
					}

					var aux = count;

					count++;
					if (param.filhos.length > 0) {
						template.push('<ul ng-class="v[' + (count - 1) + '].isActive ? \' submenu-group-ativo\' : \'submenu-group\'" class="menu-holder">');
						for (var i = 0; i < param.filhos.length; i++) {
							if (keyIsValid(param.filhos[i].key)) {
								template.push(gerarNavPill(param.filhos[i], 'submenu', {count: aux, label: param.label}));
							}
						}
						template.push('</ul>');
					}
					template.push('</li>');
					return template.join('\n');
				};


				scope.resetarMenu = function (index) {
					var i;
					if (scope.v[index].isActive) {
						for (i = 0; i < scope.v.length; i++) {
							scope.v[index].isActive = false;
						}
						setarTrue(scope.v[index].parent);

					} else {
						for (i = 0; i < scope.v.length; i++) {
							scope.v[i].isActive = false;
						}
						setarTrue(index);
					}

				};

				var keyIsValid = function (key) {
					return scope.keys.indexOf(key) != -1;
				};

				function setarTrue(index) {
					if (index >= 0) {
						scope.v[index].isActive = true;
						setarTrue(scope.v[index].parent);
					}
				}

				scope.mostrarMenu = function () {
					menuOpen = !menuOpen;

					var elm = el.find('nav');
					if (menuOpen) {
						elm.addClass('open-menu');
					} else {
						elm.removeClass('open-menu');
					}
				};

				function verificarPermicaoFilho(filhos) {
					for (var i = 0; i < filhos.length; i++) {
						for (var j = 0; j < scope.keys.length; j++) {
							if (filhos[i].key == scope.keys[j]) {
								return true;
							}
						}
					}
					return false;
				}

			}
		};
	}

	angular.module('gumga.directives.menu',[])
	.directive('gumgaMenu',Menu);

})();

(function(){
	'use strict';

	OneToMany.$inject = ["$modal"];
	/**
	 * @ngdoc directive
	 * @name gumga.core:gumgaOneToMany
	 * @restrict E
	 * @description
	 * 	A directive gumgaOneToMany pode ser usada quando é necessária a criação de uma lista de objetos dentro do formulário, especialmente quando esses
	 * 	objetos acessam outros Services. Ela lança um modal para a criação destes objetos, que podem ser recursivos. Além disso, possui suporte a edição e remoção
	 * 	destes registros.
	 * @param {Array} children Parâmetro obrigatório que irá conter um Array que será utilizado para construir a lista.
	 * @param {String} template-url Parâmetro obrigatório que irá conter uma string referenciando a url na qual o template do modal estará.
	 * @param {String} property Parâmetro obrigatório que irá conter uma string com a propriedade do objeto que será mostrada na lista.
	 * @param {String} name *Utilizar modal-title*.
	 * @param {String} modal-title Parâmetro não obrigatório que irá conter uma string com o título que será passado para o controller
	 * @param {String} controller Parâmetro obrigatório que irá conter uma String que referenciará o nome do controller que será atribuido ao modal.
	 * *Este controller necessita injetar além do $scope, as propriedades **entity** e **title** *
	 * @param {Function} on-delete Parâmetro não obrigatório que irá conter uma variável que irá conter uma função que será chamada quando um elemento da lista for deletado.
	 * A função que está no on-delete
   * @param {Function} on-value-visualization-opened Parâmetro não obrigatório que irá conter uma variável que possuirá uma função que irá ser executada quando o usuário tiver aberto o modal
   * para visualização de dados
   * @param {Function} on-value-visualization-closed Parâmetro não obrigatório que irá conter uma variável que possuirá uma função que irá ser executada quando o usuário tiver fechado o modal
   * para visualização de dados
	 *
	 */
	function OneToMany($modal){
		var template = [
		'<div class="col-md-12" style="padding-left: 0;padding-right: 0">',
		'   <button type="button" class="btn btn-default" ng-click="newModal()">New</button>',
		'   <ul class="list-group">',
		'       <li ng-repeat="child in children" class="list-group-item">',
		'           {{::child[property]}}',
		'           <button type="button" class="btn btn-default pull-right btn-sm" ng-click="newModal(child)"><i class="glyphicon glyphicon-pencil"></i></button>',
		'           <button type="button" class="btn btn-danger pull-right btn-sm" ng-click="removeFromList(child)"><i class="glyphicon glyphicon-remove"></i></button>',
		'       <div class="clearfix"></div></li>',
		'   <ul>',
		'</div>',
		'<div class="clearfix"></div>'
		];

		return {
			restrict: 'E',
			template: template.join('\n'),
			scope: {
				children: '=',
				templateUrl: '@',
				property: '@displayableProperty',
				name: '@',
				controller: '@',
				onDelete: '&?',
				onValueVisualizationOpened: '&?',
				onValueVisualizationClosed: '&?',
				modalTitle: '@'
			},
			link: function (scope,elm,attrs) {
				var eventHandler = {
					valueVisualizationOpened: (attrs.onValueVisualizationOpened ? scope.onValueVisualizationOpened :angular.noop),
					valueVisualizationClosed: (attrs.onValueVisualizationClosed ? scope.onValueVisualizationClosed :angular.noop),
					delete: (attrs.onDelete ? scope.onDelete : angular.noop)
				};
				scope.newModal = newModal;
				scope.removeFromList = removeFromList;
				scope.getFromModal = getFromModal;
				var name = attrs.name || 'New';
				if(!scope.children) throw 'You must provide a list to GumgaOneToMany';
				if(!scope.templateUrl) throw 'You must provide a templateUrl for the modal';
				if(!scope.property) throw 'You must provide a property to display in GumgaOneToMany';
				if(!scope.controller) throw 'You must provide a controller to the modal';
				function getFromModal(selected){
					eventHandler.valueVisualizationClosed();
					if(JSON.stringify(scope.etty) !== '{}'){
						scope.children.splice(scope.children.indexOf(scope.etty),1,selected);
					} else {
						scope.children.push(selected);
					}
				}
				function removeFromList(obj){
					eventHandler.delete({$value: obj});
					scope.children.splice(scope.children.indexOf(obj),1);
				}
				function newModal(obj){
					scope.etty = {};
					if(obj){
						scope.etty= obj;
					}
					eventHandler.valueVisualizationOpened();
					var modalInstance = $modal.open({
						templateUrl: scope.templateUrl,
						controller: scope.controller,
						resolve: {
							entity: function(){
								return scope.etty;
							},
							title: function(){
								return scope.name;
							}
						}
					});
					modalInstance.result.then(getFromModal);
				}


			}
		};
	}

	angular.module('gumga.directives.onetomany',[])
		.directive('gumgaOneToMany',OneToMany)


})();

(function(){
	'use strict';
	/**
	 * @ngdoc directive
	 * @name gumga.core:gumgaSearch
	 * @restrict E
	 * @description A directive gumgaSearch pode ser utilizada para fazer montar queries de busca, sejam essas buscas normais ou avançadas. É possível escolher
	 * quais campos no qual a busca será feita, assim como na busca avançada.
	 * ## Exemplo
     * Veja um exemplo em funcionamento [aqui](http://embed.plnkr.co/ezZITh3ZfmwVao0Xz1w6/preview).    
	 *
	 * O componente utiliza-se de tags que só funcionam dentro das tags do componente, que são as tags `<advanced-field></advanced-field>`. A tag de advanced-field 
	 * 	recebe dois atributos como parâmetro: `name` e `type` que recebem , respectivamente, o nome do atributo a ser pesquisado e qual seu tipo.
	 * 	<pre>
	 *  		<advanced-field name="nome" type="string"></advanced-field>
	 *  		<advanced-field name="idade" type="number"></advanced-field>
	 *  </pre>
	 * 
	 * @param {Function} advanced-method Parâmetro obrigatório que irá conter uma função que será utilizada para fazer a busca avançada.
	 * Para receber a query avançada, basta passar um parâmetro `param` para a função. `advanced-method="function(param)"`
	 * @param {Function} search-method Parâmetro obrigatório que irá conter uma função que será utilizada para fazer a busca simples.
	 * Para receber o campo e a pesquisa que foi feita, basta passar os parâmetros `field` e `param` para a função. `search-method="function(field,param)"`.
	 * @param {String} fields Parâmetro obrigatório que irá conter uma sequência de campos com o qual o componente irá criar a lista de atributos que serão pesquisáveis.
	 * Exemplo: `fields="id,name,company,age"`
	 * @param {Boolean} advanced Parâmetro não obrigatório que irá conter um valor booleano para controlar se o componente irá ou não fazer busca avançada
	 * @param {Function} on-search Parâmetro não obrigatório que irá conter uma função que será chamada quando uma busca simples for feita. 
	 * @param {Function} on-advanced-search Parâmetro não obrigatório que irá conter uma função que será chamada quando uma busca avançada for feita. 
	 *
	 * 
	 */
	angular.module('gumga.directives.search',
		[
		'gumga.directives.search.search',
		'gumga.directives.search.normalsearch',
		'gumga.directives.search.advancedsearch',
		'gumga.directives.search.advancedlabel',
		'gumga.directives.search.searchhelper',
		]);

})();

(function(){
    'use strict';
     Nav.$inject = ["$state", "GumgaWebStorage", "$modal", "$rootScope", "$timeout"];
     /**
      * @ngdoc directive
      * @name  gumga.core:gumgaNav
      * @restrict E
      * @description O componente gumgaNav é uma directive que cria uma barra de navegação superior, para ajudar o usuário. Dentro da barra de navegação, 
      *  possuímos uma busca que, quando o botão ENTER é pressionado, ele redireciona para a página de Busca Multi-entidades. Possui também informações sobre o usuário que está logado,
      *  uma opção para fazer o logout e outra para alterar a senha.
      *  ## Exemplo
      *  Veja um exemplo em funcionamento [aqui](http://embed.plnkr.co/PeJHAS6viutuekw614ZL/preview).   
      *  @param {String} title Parâmetro não obrigatório que contém uma string que será o título que aparecerá na barra de navegação. 
      *  @param {Boolean} multi-entity Parâmetro nao obrigatório que contém um valor booleano para compilar ou não a busca multientidade. Por padrão, o valor é true.
      *  @param {String} put-url Parâmetro não obrigatório que contém uma String ou uma variável que estará no $scope da directive para atribuir uma url para fazer o put do alterar a senha.
      *  @param {String} state Parâmetro obrigatório que contém uma String com o $state para qual será redirecionado quando o usuário clicar em Logout.
      */
     function Nav($state, GumgaWebStorage, $modal, $rootScope, $timeout) {
                 var template = [
                     '<nav id="navbar">',
                     '   <a href="#" class="navbar-logo" style="  float: left;">{{title | uppercase}}</a>' +
                             '   <span style="color: white; font-size: 1.4em;margin-left: 2%;float: left;"><small>{{info.organization}}</small></span>',
                     ' <div class="navbar-form navbar-left" ng-transclude></div>',
                     '   <b class="pull-right"><img ng-show="info.picture" class="img-circle" style="width: 40px;height: 40px;margin-right:10px;" src="{{info.picture}}" /> <a href ng-blur="hidePanel()" class="status-navbar" ng-click="showPanelNavBar()"><small  style="font-size: 85%;">{{info.name}} &nbsp;&nbsp; <i class="glyphicon glyphicon-triangle-bottom" style="margin-left: 1px"></i> </small></a></b>',
                     '    <span ng-if="multientity" ng-click="treatUrl()"  class="glyphicon glyphicon-search btn  pull-right" style="color:#fff;  padding-top: 1%;margin-right: 5%;height: 100%;"></span>',
                     '    <input ng-if="multientity" type="text" id="inputSearch" ng-blur="inputVisible = false" ng-keyup="submitSearch($event)" style="  background: none repeat scroll 0 0 rgba(244, 214, 214, 0.15); ',
                     '            border: double; ',
                     '            font-size: 14px; ',
                     '            outline: 0; ',
                     '            color: #fff;  ',
                     '            height: 100%; ',
                     '            margin: 0; ',
                     '            border-color: rgba(0, 0, 0, 0); ',
                     'z-index: 2000;" ng-model="search" ng-show="inputVisible" class="navbar-input flip-right" placeholder="Search">',
                     '</nav>',
                     '<div class="nav-panel" ng-show="showPanelNav">',
                     '   <div class="panel-body" id="navPanelBody">',
                     '           <button ng-repeat="link in navlinks" ng-click="handle(link)" class="btn btn-link" style="display:block;width: 100%;color: black; font-size: 0.9em;"><i class="{{link.glyphicon}}"> </i>{{link.text}} </button>',
                     '   </div>',
                     '</div>'
                 ];

                 var modalTemplate = [
                     '<div class="modal-header">Change Password</div>',
                     '<div class="modal-body">' +
                             '   <form name="ModalForm" novalidate>' +
                             '   <label> <small>Old Password</small></label>' +
                             '   <input type="password" ng-keyup="validPassword(user.newpass, user.oldpass)" ng-focus="oldPasswordInvalid=false" class="form-control" ng-model="user.oldpass" required/>' +
                             '   <label class="text-danger" style="width: 100%;"  ng-show="oldPasswordInvalid">Esta não é sua senha antiga</label>' +
                             '   <label><small> New Password</small></label>' +
                             '   <input type="password" class="form-control" ng-keyup="validPassword(user.newpass, user.oldpass)" ng-model="user.newpass" required/>' +
                             '   <label class="text-danger" style="width: 100%;"  ng-show="newPasswordInvalid">Por favor insira uma senha diferente da antiga.</label>' +
                             '   <label><small> New Password (again)</small></label>' +
                             '   <input type="password" class="form-control" ng-keyup="validPasswordConfirm(user.newpass,user.newpasscheck)" ng-model="user.newpasscheck" required/>' +
                             '   <label class="text-danger" style="width: 100%;"  ng-show="newPasswordConfirm">Repita a nova senha corretamente.</label>' +
                             '</div>',
                     '<div class="modal-footer">' +
                             '   <button class="btn btn-primary" ng-click="ok(user)" type="submit" ng-disabled="ModalForm.$invalid || !btnEnabled"> Save</button>' +
                             '   <button class="btn btn-warning" ng-click="cancel()" type="button"> Cancel</button>' +
                             '</div>' +
                             '</form>'];
                 return {
                     restrict: 'E',
                     scope: false,
                     transclude: true,
                     template: template.join('\n'),
                     link: function (scope, el, attrs) {
                        var putUrl = attrs.putUrl;
                        if(attrs.multiEntity == "true" || !attrs.multiEntity) scope.multientity = true;
                        (!scope[attrs.putUrl]) ? putUrl = scope[attrs.putUrl] : angular.noop;
                         scope.info = GumgaWebStorage.getSessionStorageItem('user');
                         scope.navlinks = [{text: 'Change Password', glyphicon: 'glyphicon glyphicon-user', value: 'pass'}, {text: 'Logout', glyphicon: 'glyphicon glyphicon-log-out', value: 'logout'}];
                         scope.inputVisible = false;    
                         scope.title = attrs.title || '';
                         scope.treatUrl = function () {
                             scope.inputVisible = true;
                             $timeout(function () {
                                 document.getElementById('inputSearch').focus();
                             }, 200);

                         };
                         scope.$on('close', function () {
                             scope.showPanelNav = false;
                         });
                         scope.showPanelNavBar = function () {
                             scope.showPanelNav = !scope.showPanelNav;
                         };
                         var obj = {};

                         scope.submitSearch = function (event) {
                             var key_code = event.keyCode;
                             if (key_code === 13)
                                 $state.go('multientity', {'search': scope.search})
                         }

                         scope.hidePanel = function () {
                             $timeout(function () {
                                 scope.showPanelNav = false;
                             }, 200);
                         };

                         scope.handle = function (link) {
                             scope.showPanelNav = !scope.showPanelNav;
                             switch (link.value) {
                                 case 'pass':
                                     var modalInstance = $modal.open({
                                         template: modalTemplate.join('\n'),
                                         size: 'sm',
                                         controller: ["$scope", "$modalInstance", "$http", "GumgaWebStorage", function ($scope, $modalInstance, $http, GumgaWebStorage) {
                                             var userSession = GumgaWebStorage.getSessionStorageItem('user');
                                             $scope.btnEnabled = false;
                                             $scope.oldPasswordInvalid = false;
                                             $scope.newPasswordConfirm = false;
                                             $scope.newPasswordInvalid = false;

                                             $scope.validPasswordConfirm = function (password, confimPassword){
                                                 if(password !== confimPassword){
                                                     $scope.newPasswordConfirm = true;
                                                 }else{
                                                     $scope.newPasswordConfirm = false;
                                                 }
                                                 $scope.enabledBtn();
                                             }

                                             $scope.validPassword = function (password, oldPassword){
                                                 $scope.user.newpasscheck = '';
                                                 if(password == oldPassword && password){
                                                     $scope.newPasswordInvalid = true;
                                                 }else{
                                                     $scope.newPasswordInvalid = false;
                                                 }
                                                 $scope.enabledBtn();
                                             }

                                             $scope.enabledBtn = function (){
                                                 if(!$scope.newPasswordConfirm && !$scope.newPasswordInvalid){
                                                      $scope.btnEnabled = true;
                                                 }else{
                                                      $scope.btnEnabled= false;
                                                 }
                                             }

                                             $scope.ok = function (user) {
                                                 $http.put(attrs.putUrl, {
                                                     user: userSession.user,
                                                     password: user.oldpass,
                                                     newPassword: user.newpass})
                                                         .success(function (data) {
                                                             if (data.response == 'BAD_PASSWORD') {
                                                                 $scope.oldPasswordInvalid = true;
                                                             } else if (data.response == 'OK') {
                                                                 $scope.$emit('successMessage', {
                                                                     title: 'Senha alterada',
                                                                     message: 'Sua senha foi alterada com sucesso.'
                                                                 })
                                                                 $modalInstance.close();
                                                             } else {
                                                                 $modalInstance.close();
                                                             }
                                                         });
                                             };
                                             $scope.cancel = function () {
                                                 $modalInstance.dismiss();
                                             };

                                         }],
                                         resolve: {}
                                     });
                                     modalInstance.result.then(function (selectedItem) {
                                         scope.selected = selectedItem;
                                     });
                                     break;
                                 case 'logout':
                                     $state.go(attrs.state);
                                     break;
                             }
                         };
                         el.find('input')
                                 .on('keypress', function (k) {
                                     if (k.keyCode == 13)
                                         scope.treatUrl()
                                 });
                     }
                 };
             }

    angular.module('gumga.directives.nav',['ui.bootstrap'])
    .directive('gumgaNav',Nav)
})();

(function(){
  'use strict';
  /**
   * @ngdoc directive
   * @name gumga.core:gumgaTable
   * @restrict E
   * @description O componente **GumgaTable** serve para expor dados em forma de tabela.
   * O componente expõe no $scope.selectedEntities um array contendo os objetos das linhas selecionadas para que o desenvolvedor possa usa-los em ações.
   *
   * @example
   * Um exemplo da directive gumgaTable funcionando pode ser encontrado [aqui](http://embed.plnkr.co/SALkp5bKRZ1aywsrpmEX).
   *  <pre>
   *    <gumga-table values="list" columns="name,age"></gumga-table>
   *    <script>
   *    $scope.list = [{name: 'Guilherme', age: 28},{name: 'Igor', age: 19}];
   *    </script>
   *  </pre>
   * 
   * @param {String} values Atributo obrigatório. Deve ser o nome do array exposto no $scope para popular a tabela.
   * @param {String} columns Atributo obrigatório. As propriedades do objeto que serão apresentados como colunas na tabela, 
   * @param {String} size Possuem 3 opções de tamanhos, **large**, **medium** e **small**, que respectivamente ocupam, todo o espaço da row, dois terços e 
   * um terço. O valor padrão é large.
   * @param {String} translate-entity Nome da entidade.
   * @param {Array} pages Deve conter os valores para apresentar opções de registros por página.
   * @param {String} table-class Possuem 3 opções, **bordered**, **striped** e **condensed**, que respectivamente, adiciona bordas a tabela,
   * alterna cores das linhas e diminui o espaçamento interno das linhas e colunas. O valor padrão é bordered.
   * o componente seguirá a ordem de colunas adicionada ao atributo.
   * @param {Boolean} multi-selection É true por padrão, determina a possibilidade da seleção de várias entidades ou apenas
   * uma por vez.
   * @param {Function} sort-function Nome da função atribuida ao $scope para manipular a ordenação, a função recebe dois 
   * parâmetros, **field** e **way** que serão, a coluna e a direção da ordenação respectivamente, existem duas direções,
   * **asc** ou **desc**.
   * @param {String} sort-default Deve conter a **coluna** e a **direção** separados por virgula, será a ordenação padrão na primeira exibição da tabela.
   * @param {Expression} row-class Deve conter uma expressão condicional para marcar determinadas linhas correspondentes como 
   * verdadeiras perante a expressão.
   * @param {Function} onSelect Nome da função que será executada ao evento click.
   * @param {Function} onSort Nome da função que será executada ao evento de sort.
   */
   Table.$inject = ["GumgaUtils", "$compile", "$rootScope", "$state", "GumgaKeyboard", "$timeout"];
   function Table(GumgaUtils, $compile,$rootScope,$state,GumgaKeyboard,$timeout) {
    return {
      restrict: 'E',
      scope: {
        multi: '=?multiSelection',
        list: '=values',
        pages: '=pages',
        sort: '&?sortFunction',
        rowClass: '=?',
        onSelect: '&?',
        onSort: '&?'
      },
      link: LinkFn,
      transclude: true
    };

    function LinkFn(scope, elm, attrs, ctrl, transcludeFn) {
      var eventHandler = {
        select: (attrs.onSelect ? scope.onSelect : angular.noop),
        sort: (attrs.onSort ? scope.onSort: angular.noop)
      };

      scope.$on('_clean',function(){
       scope.cleanSearch();
     });

      var ColumnObject = {};
      scope.indexes = [];
      scope.trs = [];
      scope.$parent.selectedEntities = [];
      scope.objectColumn = [];
      scope.conditionalColumns = [];
      var rawTableConfig = {
        multi: scope.multi,
        list: [],
        pages: scope.pages || [10, 25, 50],
        sortFn: attrs.sort? scope.sort : angular.noop,
        sortDf: !!attrs.sortDefault? attrs.sortDefault.split(',') : false,
        size: attrs.size || 'large',
        class: attrs.tableClass || 'bordered',
        columns: attrs.columns.split(','),
        headings: [],
        translate: attrs.translateEntity,
      };
      var itemsPerPage = window.sessionStorage.getItem('itemsPerPage') || rawTableConfig.pages[0];
      scope.itemsPerPage = itemsPerPage;
      scope.$parent.itemsPerPage = itemsPerPage;

      scope.$watch('list', function () {
        if (scope.list) {
          scope.$parent.selectedEntities = [];
          scope.tableconfig.list = scope.list;
          scope.indexes = [];

        }
      });

      setColumnConfig(rawTableConfig);

      function setColumnConfig(rawConfig) {
        rawConfig.columns.forEach(function (elm) {
          var obj = {
            label: GumgaUtils.camelCase(elm),
            field: elm
          };
          rawConfig.headings.push({label: obj.label, way: null});
          rawConfig.columns.splice(rawConfig.columns.indexOf(elm), 1, obj);
        });

        transcludeFn(function (clone) {
          angular.forEach(clone, function (cloneEl) {
            if (cloneEl.nodeName != "#text") {
              switch (cloneEl.nodeName) {
                case 'GUMGA-BOOLEAN-MASK':
                rawConfig.columns.forEach(function (obj) {
                  if (obj.field == cloneEl.getAttribute('column')) {
                    $.extend(obj, {
                      trueValue: cloneEl.getAttribute('boolean-true'),
                      falseValue: cloneEl.getAttribute('boolean-false')
                    });
                  }
                });
                break;
                case 'BUTTONS-COLUMN':
                scope.buttonElements = cloneEl.children;
                rawConfig.headings.push({label: ' ', way: null});
                break;
                case 'EXTRA-COLUMN':
                scope.extraElements = cloneEl.children;
                rawConfig.headings.push({label: ' ', way: null});
                break;
                case 'OBJECT-COLUMN':
                scope.objectColumn.push({column: cloneEl.getAttribute('column'),value: cloneEl.getAttribute('property')});
                break;
                case 'COLUMN-CLASS':
                scope.conditionalColumns.push({column: cloneEl.getAttribute('column'),conditional: cloneEl.getAttribute('conditional-class')});
                break;

              }
            }
          });
});
scope.tableconfig = rawConfig;
generateTable(scope.tableconfig);
}
function getConditions(){
  var conditionText = attrs.rowClass || '';
  return conditionText.replace(/{/,'').replace(/}/,'').split(',');
}
function generateTable(config) {
  var template = [];
  if (scope.pages) {
    var pagination =
    '<select ng-model="itemsPerPage" ng-change="changeItemsPerPage(itemsPerPage)">' +
    '<option ng-repeat="p in pages" value="{{ p }}" ng-selected="p == itemsPerPage">{{ p }}</option>' +
    '</select>';
    template.push(pagination);
  }
  switch (config.size) {
    case 'large':
    template.push(
      '<div class="full-width-without-padding" style="margin-top: 1%">' +
      '<button class="btn btn-default btn-xs" style="margin-bottom: 0.25%" ng-click="selectAll()">Selecionar todos</button>' +
      '<button class="btn btn-default btn-xs" style="margin-bottom: 0.25%;margin-left:0.25%" ng-click="cleanSearch()"> Limpar pesquisa</button>' +
      '<table class="table table-' + config.class + ' ">');
    break;
    case 'medium':
    template.push(
      '<div class="col-md-8" style="padding-left:0;padding-right: 0;">' +
      '<table class="table table-' + config.class + '">');
    break;
    case 'small':
    template.push(
      '<div class="col-md-4" style="padding-left:0;padding-right: 0;">' +
      '<table class="table table-' + config.class + '">');
    break;
  }
  template.push('<thead>');
  template.push('<tr>');
  if (attrs.sortFunction) {
    template.push(' <td ng-repeat="head in tableconfig.headings track by $index" ng-click="head.label !== \' \' ? sortAux(head) : \'\'"');
    template.push('     ng-class="head.label != \' \' ? \'clickable-td\' : \' \' ">');
    template.push('         <small>{{::head.label}}<i ng-class="(head.way != null && head.label !== \' \') ? (head.way === true ? \'glyphicon glyphicon-menu-up\' : \'glyphicon glyphicon-menu-down\') : \'\'"></i></small></td>');
  } else {
    template.push('<td ng-repeat="head in tableconfig.headings track by $index">{{::head.label}}');
  }
  template.push(' </td>');
  template.push('</tr>');
  template.push('</thead>');
  template.push('<tbody>');
  if (config.multi === false) {
    template.push('<tr style="{{::getClassFromConditionalRow(entity)}}" ng-class="returnClass($index)" ng-repeat="entity in tableconfig.list" class="used" ng-click="handleSingle(entity,$index)" ng-dblclick="goToEdit(entity.id)">' + generateTableCell(config) + '</tr>');
  } else {
    template.push('<tr style="{{::getClassFromConditionalRow(entity)}}" ng-class="returnClass($index)" ng-repeat="entity in tableconfig.list" class="used" ng-click="handleMultiple(entity,$index)" ng-dblclick="goToEdit(entity.id)" >' + generateTableCell(config) + '</tr>');
  }
  template.push('</tbody>');
  template.push('</table></div>');
  elm.append($compile(template.join('\n'))(scope));

}
var selected = false;

scope.goToEdit = function(index){
  $state.go(scope.tableconfig.translate + '.' + 'edit',{id: index});
};
scope.changeItemsPerPage = function(itemsPerPage){
  window.sessionStorage.setItem('itemsPerPage', itemsPerPage);
  scope.$parent.itemsPerPage = itemsPerPage;
};
scope.selectAll = function(){
  if(!selected){
    for(var i = 0, len = scope.tableconfig.list.length;i < len;i++){
      scope.indexes.push(i);
    }
    scope.$parent.selectedEntities = scope.tableconfig.list;
  } else {
    scope.indexes = [];
    scope.$parent.selectedEntities = [];
  }
  selected = !selected;
};


scope.cleanSearch = function(){
  $rootScope.$broadcast('normal',{field:scope.tableconfig.columns[1],param: ''});
  scope.tableconfig.headings.forEach(function(elm){
    elm.way = null;
  })
};

scope.getClassFromConditionalRow = function (entity){
  var HelperObject = {};
  var conditionsFromTag = getConditions();
  conditionsFromTag.forEach(function(elm){
    HelperObject[elm.split(':')[0]] = eval(elm.split(':')[1]);
  });
  for(var key in HelperObject) if(HelperObject.hasOwnProperty(key) && HelperObject[key] === true){
    return 'border-left: 3px solid ' + key.trim();
  }
  return '';
};

function checkObject(field){
  for(var i = 0; i < scope.objectColumn.length;i++){
    if(scope.objectColumn[i].column === field){
      return '{{::entity.'+  scope.objectColumn[i].value +'}}';
    }
  }
  return -1;
}

function getClassFromConditionalCell(column,entity){
  scope.conditionalColumns.forEach(function(elm){
    if(elm.column.toLowerCase().trim() === column.toLowerCase().trim()){
      ColumnObject[elm.column] = {};
      elm.conditional.replace(/{/,'').replace(/}/,'').split(',')
      .forEach(function(arg){
        var x = arg.split(':');
        ColumnObject[elm.column][x[0].trim().replace(/"/g,'')] = x[1].trim();
      })
    }
  });
}


scope.getStyleFromCell = function(entity,column){
  if(ColumnObject[column.trim().toLowerCase()]){
    var auxObj = ColumnObject[column.trim().toLowerCase()];
    for(var key in auxObj) if(auxObj.hasOwnProperty(key) && eval(auxObj[key]) === true){
      return 'border-left: 3px solid ' + key.trim();
    }
  }
};

function generateTableCell(config) {
  var template = [];
  config.columns.forEach(function (elm) {
    getClassFromConditionalCell(elm.field);
    if (elm.trueValue) {
      template.push('<td style="{{::getStyleFromCell(entity,\' '+ elm.field + ' \')}}">{{::entity.' + elm.field + ' === true? \'' + elm.trueValue + '\' : \'' + elm.falseValue + '\'}}</td>');
    } else if(checkObject(elm.field) != -1){
      template.push('<td style="{{::getStyleFromCell(entity,\' '+ elm.field + ' \')}}">' + checkObject(elm.field) +' </td>');
    } else {
      template.push('<td style="{{::getStyleFromCell(entity,\' '+ elm.field + ' \')}}">{{::entity.'+ elm.field + '}} </td>');
    }
  });
  if (scope.buttonElements) {
    template.push('<td style="{{::getStyleFromCell(entity,\' '+ elm.field + ' \')}}">' + getSpecial(scope.buttonElements) + '</td>');
  }
  if (scope.extraElements) {
    template.push('<td style="{{::getStyleFromCell(entity,\' '+ elm.field + ' \')}}">' + getSpecial(scope.extraElements) + '</td>');
  }
  return template.join(' ');
}


function getSpecial(array) {
  var txt = [];
  angular.forEach(array, function (elm) {
    txt.push(elm.outerHTML);
  });
  return txt.join(' ');
}

            // Negação dupla transforma em boolean
            if (!!rawTableConfig.sortDf) {
              // Se houver o atributo sort-default monta o objeto e dispara o evento
              var objSortDefault = {
                field: rawTableConfig.sortDf[0],
                way: rawTableConfig.sortDf[1]
              };
              eventHandler.sort({field: objSortDefault.field});
              scope.sort(objSortDefault);
            }

            scope.sortAux = function (obj) {
                //Quando ele clica, ele verifica se já existe alguma coluna com sort, se já existir, retorna ela para null
                scope.tableconfig.headings.forEach(function (key) {
                  if (key != obj) {
                    if (key.way === true || key.way === false) {
                      key.way = null;
                    }
                  }
                });
                // Pega o index do objeto
                var index = scope.tableconfig.headings.indexOf(obj);
                //Seta o sort dele pra false ou true
                obj.way = !obj.way;
                //Remove da lista anterior o antigo e coloca o novo
                scope.tableconfig.headings.splice(index, 1, obj);
                var aux;
                // Se for true, é ascendente
                if (obj.way === true) {
                  aux = 'asc';
                } else {
                  aux = 'desc';
                }
                // Dispara o evento
                eventHandler.sort({field: obj.label.toLowerCase()});
                scope.sort({field: obj.label.toLowerCase(), way: aux});
              };

              scope.handleMultiple = function (entity, index) {
                if (GumgaUtils.areNotEqualInArray(scope.indexes, index) || scope.indexes.length < 1) {
                  scope.indexes.push(index);
                  scope.$parent.selectedEntities.push(entity);
                } else {
                  scope.indexes.splice(scope.indexes.indexOf(index), 1);
                  scope.$parent.selectedEntities.splice(scope.$parent.selectedEntities.indexOf(entity), 1);
                }
                eventHandler.select({selected: scope.$parent.selectedEntities});
              };

              scope.handleSingle = function (entity, index) {
                if (scope.indexes.length >= 1) {
                  scope.indexes = [];
                  scope.$parent.selectedEntities = [];
                }
                scope.selectedIndex = index;
                scope.indexes.push(index);
                scope.$parent.selectedEntities.push(entity);
                eventHandler.select({selected: scope.$parent.selectedEntities});
              };

              scope.returnClass = function (index) {
                if (!GumgaUtils.areNotEqualInArray(scope.indexes, index)) {
                  return 'info';
                }
                return '';
              };
            }
          }

          angular.module('gumga.directives.table',[])
          .directive('gumgaTable',Table);
        })();


(function(){
	'use strict';
	TranslateTag.$inject = ["GumgaTranslateHelper", "$compile"];
	function TranslateTag(GumgaTranslateHelper,$compile){
		var child;
		return {
			restrict: 'A',
			link: function(scope,elm,attrs){
				if(!attrs.gumgaTranslateTag) throw 'You must pass a valid value to gumgaTranslateTag';
				scope.__valueToTranslate = attrs.gumgaTranslateTag;
				if(GumgaTranslateHelper.getTranslate(scope.__valueToTranslate)){
					if(elm[0].childNodes.length > 0){
						scope.child = elm[0].childNodes[0];
						elm[0].innerHTML =  GumgaTranslateHelper.getTranslate(scope.__valueToTranslate);
						elm.append($compile(scope.child)(scope));
					} else {
						elm[0].innerHTML = GumgaTranslateHelper.getTranslate(scope.__valueToTranslate);
					}
				}
			}

		};
	}

	angular.module('gumga.directives.translatetag',['gumga.services.translate.helper','gumga.services.translate'])
		.directive('gumgaTranslateTag',TranslateTag);
})();
(function(){
	'use strict';
	angular.module('gumga.directives.translate',
		[
			'gumga.directives.translate.translatehelper',
			'gumga.directives.translate.translate',
			'gumga.directives.translate.translatetag'
		])
})();

(function(){
	'use strict';
	Upload.$inject = ["$http", "$parse", "$timeout"];
	/**
	 * @ngdoc directive
	 * @name gumga.core:gumgaUpload
	 * @restrict
	 * @description 
	 * 	O componente gumgaUpload pode ser utilizado para fazer upload de imagens. O framework GUMGA usa um método de upload
	 * 	de imagens que faz o upload do arquivo para uma pasta temporária e retorna um token. Quando o registro é salvo, o framework gumga 
	 * 	faz o bind da string que está no atributo com o arquivo temporário.
	 * 	@param {Objet} model Objeto que irá conter as informações da imagem.
	 * 	@param {Function} upload-method Função que será executada para fazer o upload da imagem para o arquivo temporário.
	 * 	@param {Function} delete-method Função que será executada para deletar a imagem do espaço temporário.
	 * 	@param {String} tooltip-text Mensagem que irá aparecer no tooltip da imagem.
	 */
	function Upload($http,$parse,$timeout){  

		var img = 	
		'<div ng-click="fireClick()" ng-show="flag" class="col-md-1" tooltip="{{::tooltipText}}" tooltip-placement="right">'+
		'	<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="128px" height="128px" viewBox="0 0 512 512" enable-background="new 0 0 512 512" xml:space="preserve">'+
		'		<path id="avatar" fill="#cccccc" d="M490.579,383.029c-14.152-22.086-61.763-35.824-108.835-55.453c-47.103-19.633-58.268-26.439-58.268-26.439'+
		'			l-0.445-45.182c0,0,17.646-13.557,23.127-56.074c11.01,3.198,22.619-16.461,23.237-26.824c0.625-9.98-1.508-37.662-14.981-34.877' +
		'			c2.754-20.845,4.741-39.586,3.764-49.505c-3.495-36.295-39.23-74.578-94.182-74.578c-54.95,0-90.7,38.283-94.193,74.578' +
		'			c-0.978,9.919,1.019,28.661,3.758,49.505c-13.455-2.785-15.587,24.897-14.979,34.877c0.635,10.363,12.196,30.021,23.255,26.824' +
		'			c5.462,42.517,23.122,56.074,23.122,56.074l-0.441,45.182c0,0-11.178,6.807-58.268,26.439' +
		'			c-47.104,19.629-94.683,33.367-108.851,55.453c-12.7,19.777-8.882,114.875-8.882,114.875h470.946' +
		'			C499.462,497.904,503.281,402.806,490.579,383.029z"/>' +
		'	</svg>' +
		'</div>'
;loca

		var template =
		'<div class="full-width-without-padding">' +
		img + 
		'   <img src="#" alt="Uploaded Image" ng-show="!flag" class="img-rounded" style="object-fit: cover"/>' +
		'   <input type="file" id="upload" ng-hide="true"/>' +
		'   <div class="col-md-12" style="padding-left: 0">' +
		'   <button type="button" class="btn btn-link" ng-hide="flag" ng-click="deleteImage()"> Delete Image <span class="glyphicon glyphicon-trash"></span></button>' +
		'</div>' +
		'</div>';
		return {
			restrict: 'AE',
			scope: {
				model: '=attribute',
				uploadMethod: '&',
				deleteMethod: '&',
				tooltipText: '@'
			},
			template: template,
			link:function(scope,elm,attrs){
				var model = $parse(attrs.attribute),
				modelSetter = model.assign,
				element = elm.find('input'),
				image = elm.find('img')[0],
				reader = new FileReader();


				scope.fireClick = function(){
					$timeout(function(){
						document.getElementById('upload')
							.click();	
					});
				}

				scope.$watch('model',function(){
					if(scope.model){
						if(scope.model.bytes){
							scope.flag = false;
							image.src = 'data:' + scope.model.mimeType + ';base64,' + scope.model.bytes;
							image.width = 200;
							image.height = 200;
						}
					} else {
						scope.model = {};
					}
				});

				if(!attrs.attribute){
					throw 'You must pass an attribute to GumgaUpload';
				}

				scope.flag = true;

				function scaleSize(maxW, maxH, currW, currH){
					var ratio = currH / currW;
					if(currW >= maxW && ratio <= 1){
						currW = maxW;
						currH = currW * ratio;
					} else if(currH >= maxH){
						currH = maxH;
						currW = currH / ratio;
					}
					return [currW, currH];
				}

				scope.deleteImage = function(){
					image.src = '';
					scope.flag = true;
					element[0].files = [];
					scope.deleteMethod();
				};

				element.bind('change',function(){
					scope.$apply(function(){
						var x;
						modelSetter(scope,element[0].files[0]);
						scope.flag = false;
						reader.onloadend = function(){
							image.src = reader.result;
							image.width = 200;
							image.height =200;
							var x = attrs.attribute.split('.');
							scope.uploadMethod({image: scope[x[0]][x[1]]})
							.then(function(val){
								scope.model.name = val.data;
							});
						};
						reader.readAsDataURL(element[0].files[0]);
					});
				});
			}
		};
	}

	angular.module('gumga.directives.upload',[])
		.directive('gumgaUpload',Upload);

})();
(function(){
	'use strict';
	AddressService.$inject = [];
	function AddressService(){
		return {
			everyUf: ['AC', 'AL', 'AM', 'AP', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MG', 'MS', 'MT', 'PA', 'PB', 'PE', 'PI', 'PR',
			'RJ', 'RN', 'RR', 'RS', 'SC', 'SE', 'SP', 'TO'],
			everyLogradouro: [	'Outros', 'Aeroporto', 'Alameda', 'Área', 'Avenida', 'Campo', 'Chácara', 'Colônia', 'Condomínio', 'Conjunto', 'Distrito',
			'Esplanada', 'Estação', 'Estrada', 'Favela', 'Fazenda', 'Feira', 'Jardim', 'Ladeira', 'Largo', 'Lago', 'Lagoa', 'Loteamento',
			'Núcleo', 'Parque', 'Passarela', 'Pátio', 'Praça', 'Quadra', 'Recanto', 'Residencial', 'Rodovia', 'Rua', 'Setor', 'Sítio',
			'Travessa', 'Trevo', 'Trecho', 'Vale', 'Vereda', 'Via', 'Viaduto', 'Viela', 'Via'],
			availableCountries: ['Brasil'],
			returnFormattedObject: function(){
				return {
					zipCode : null,
					premisseType: null,
					premisse: null,
					number: null,
					information: null,
					neighbourhood: null,
					localization: null,
					state: null,
					country: null
				}
			}
		}
	}

		angular.module('gumga.services.address',[])
		.factory('GumgaAddressService',AddressService);

	})();

(function(){
	'use strict';

	Alert.$inject = []
	/**
	 * @ngdoc service
	 * @name gumga.core:GumgaAlert
	 * @description O service GumgaAlert é uma nova versão da directive {@link gumga.core:gumgaAlert} e é utilizado para criar
	 * notificações growl-like. Para utilizar o service, basta incluir GumgaAlert como dependência.
	 * 
	 * *Observação: Para utilização do service no config do módulo, utilizar `GumgaAlertProvider`*
	 *
	 *
	 * ## Métodos
	 *
	 * O service GumgaAlert possui quatro métodos de criação de alerta, porém todos recebem o mesmo parâmetro. Foi optado por criar quatro
	 * métodos diferentes para aumentar a legibilidade.
	 * - createWarningMessage(title,message,options)
	 * - createDangerMessage(title,message,options)
	 * - createSuccessMessage(title,message,options)
	 * - createInfomessage(title,message,options)
	 *
	 *  ### Parâmetros
	 *  - `title`: Uma string que irá conter o título da mensagem que será criada.
	 *  - `message`: Uma string que irá conter o corpo da mensagem que será criada.
	 *  - `options`: Um objeto com opções adicionais para o alerta. Os atributos que podem ser passados para este objeto são:
	 *  	<pre>
	 *   		var config = {
	 *   		 offset: 50, //Tamanho da distância entre o alerta e tela.
	 *   		 timer: 100, //Tempo que irá demorar para a mensagem aparecer após
	 *   		 delay: 3500,
	 *   		 alowDismiss:true,
	 *   		 animationEnter: 'animated bounceInRight',
	 *   		 animationExit: 'animated bounceOutRight'
	 *   		}
	 * 		</pre> *Objeto com os valores padrões do alerta*
	 * 		
	 */
	function Alert(){
		return {
			$get: function(){
				return this;
			},
			__config: {
				warn: {
					icon: 'glyphicon glyphicon-warning-sign',
					type: 'warning'
				},
				danger: {
					icon: 'glyphicon glyphicon-exclamation-sign',
					type: 'danger' 
				},
				success: {
					icon:'glyphicon glyphicon-ok',
					type: 'success'
				},
				info: {
					icon: 'glyphicon glyphicon-info-sign',
					type: 'info'
				}
			},
			_notify: function(type,title,message,options){
				var config = this.__config[type]
				,		offset = options.offset || 50
				,		timer = options.timer || 100
				,		delay = options.delay || 3500
				,		alowDismiss = options.alowDismiss || true
				,		animationEnter = options.animationEnter || 'animated bounceInRight'
				,		animationExit = options.animationExit || 'animated bounceOutRight';
				$.notify({
					icon: config.icon,
					title: title,
					message: message
				},{
					type: type,
					offset: offset,
					timer: timer,
					delay: delay,
					alow_dismiss: alowDismiss,
					animate: {
							enter: animationEnter,
							exit: animationExit
						},
					template: '<div data-notify="container" class="col-xs-9 col-sm-3 alert alert-{0}" role="alert">' +
						'<button type="button" aria-hidden="true" class="close" data-notify="dismiss">×</button>' +
						'<span data-notify="icon"></span> ' +
						'<span data-notify="title"><b>{1}</b></span><br> ' +
						'<span data-notify="message">{2}</span>' +
						'</div>'
				})
			},
			createWarningMessage: function(title,message,options){
				if(!options) options = {};
				this._notify('warning',title,message,options);
			},
			createDangerMessage: function(title,message,options){
				if(!options) options = {};
				this._notify('danger',title,message,options);
			},
			createSuccessMessage: function(title,message,options){
				if(!options) options = {};
				this._notify('success',title,message,options);
			},
			createInfoMessage: function(title,message,options){
				if(!options) options = {};
				this._notify('info',title,message,options);
			}
		}
	}

	angular.module('gumga.services.alert',[])
		.provider('GumgaAlert',Alert);
})();
(function(){
	'use strict';

	Base.$inject = ["$http", "$q"];
	/**
	 * @ngdoc service
	 * @name gumga.core:GumgaBase
	 * @description 
	 * 	O service GumgaBase pode ser utilizado como helper para fazer chamadas HTTP. Ele permite que o programador não precise incluir o service $http
	 * 	do AngularJS e já vem com algumas funções incluídas. Para utilizar o GumgaBase, basta íncluí-lo como dependência.
	 *
	 *
	 *  # Métodos
	 *  `GumgaBase.get(url,params)`
	 *  
	 *  O método get aceita dois parâmetros `url` e `params` e retorna uma promise de uma chamada HTTP do tipo GET.
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">url</label>  Endereço no qual a chamada http será feita.
	 *  - <label class="label label-warning" style="margin-right: 1%">Object</label> <label class="label label-info">params</label> Parâmetros da query que será feita.
	 *  ### Retorno
	 *  - <label class="label label-info">HttpPromise</label> Retona uma promise da chamada HTTP GET.
	 *  ---
 	 *  `GumgaBase.getById(url,id)`
	 *  
	 *  O método getById aceita dois parâmetros `url` e `id` e retorna uma promise de uma chamada HTTP do tipo GET.
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">url</label>  Endereço no qual a chamada http será feita.
	 *  - <label class="label label-warning" style="margin-right: 1%">[String|Number]</label> <label class="label label-info">id</label> Identificador do registro que será buscado.
	 *  ### Retorno
	 *  - <label class="label label-info">HttpPromise</label> Retona uma promise da chamada HTTP GET.
	 *  ---
	 *  `GumgaBase.getNew(url)`
	 *  
	 *  O método getById aceita um parâmetro `url` e retorna uma promise de uma chamada HTTP do tipo GET.
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">url</label>  Endereço no qual a chamada http será feita e na qual
	 *   será feita a chamada para um novo registro.
	 *  ### Retorno
	 *  - <label class="label label-info">HttpPromise</label> Retorna uma promise da chamada HTTP GET.
	 *  ---
 	 *  `GumgaBase.deleteAll(url,array)`
	 *  
	 *  O método deleteAll aceita dois parâmetros `url` e `array` e retorna uma promise de uma série de chamadas http do tipo DELETE que serão resolvidas ao mesmo tempo.
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">url</label>  Endereço no qual a chamada http será feita.
	 *  - <label class="label label-warning" style="margin-right: 1%">Array</label><label class="label label-info">array</label> Array com todas os registros que serão deletados 
	 *  ### Retorno
	 *  - <label class="label label-info">HttpPromise</label> Retorna uma promise após todas as chamadas terem sido resolvidas.
	 *  ---
	 *  `GumgaBase.save(url,data)`
	 *  
	 *  O método save aceita dois parâmetros `url` e `data` e retorna uma promise de de uma chamada HTTP POST.
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">url</label>  Endereço no qual a chamada http será feita.
	 *  - <label class="label label-warning" style="margin-right: 1%">Object</label><label class="label label-info">data</label> Objeto que deseja ser salvo.
	 *  ### Retorno
	 *  - <label class="label label-info">HttpPromise</label> Retorna uma promise da chamada HTTP POST.
	 *  ---
 	 *  `GumgaBase.update(url,data)`
	 *  
	 *  O método deleteAll aceita dois parâmetros `url` e `data` e retorna uma promise de de uma chamada HTTP PUT.
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">url</label>  Endereço no qual a chamada http será feita.
	 *  - <label class="label label-warning" style="margin-right: 1%">Object</label><label class="label label-info">data</label> Objeto que deseja ser atualizado.
	 *  ### Retorno
	 *  - <label class="label label-info">HttpPromise</label> Retorna uma promise da chamada HTTP POST.
	 *  ---  
 	 *  `GumgaBase.del(url,data)`
	 *  
	 *  O método del aceita dois parâmetros `url` e `data` e retorna uma promise de de uma chamada HTTP DELETE. Esta função é chamada para cada registro passado dentro do Array
	 *  na função deleteAll.
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">url</label>  Endereço no qual a chamada http será feita.
	 *  - <label class="label label-warning" style="margin-right: 1%">Object</label><label class="label label-info">data</label> Objeto que deseja ser deletado.
	 *  ### Retorno
	 *  - <label class="label label-info">HttpPromise</label> Retorna uma promise da chamada HTTP DELETE.
	 *  ---
	 *  `GumgaBase.postImage(url,attribute,data)`
	 *  
	 *  O método postImage aceita três parâmetros `url`,`attribute` e `data` e retorna uma promise de de uma chamada HTTP POST FORM-DATA.
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">url</label>  Endereço no qual a chamada http será feita.
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">attribute</label> Atributo no qual a imagem será feito o
	 *  bind após o form ter sido enviado completo.
	 *  - <label class="label label-warning" style="margin-right: 1%">Object</label><label class="label label-info">data</label> Dados da imagem que foi selecionada..
	 *  ### Retorno
	 *  - <label class="label label-info">HttpPromise</label> Retorna uma promise da chamada HTTP POST. Nesta promise, será retornado o valor de uma String que deverá ser atribuída ao atributo
	 *  onde estava a imagem. Esta string é um identificador para quando o registro for enviado através de um post.
	 *  ---
 	 *  `GumgaBase.deleteImage(url,attribute,data)`
	 *  
	 *  O método del aceita três parâmetros `url`, `attribute` e `data` e retorna uma promise de uma chamada HTTP DELETE FORM-DATA.
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">url</label> Endereço no qual a chamada http será feita.
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">attribute</label> Atributo no qual a imagem será feito o
	 *  bind após o form ter sido enviado completo.
	 *  - <label class="label label-warning" style="margin-right: 1%">Object</label><label class="label label-info">data</label> Dados da imagem que foi selecionada.
	 *  ### Retorno
	 *  - <label class="label label-info">HttpPromise</label> Retorna uma promise da chamada HTTP DELETE.
	 *  ---
	 */
	function Base($http,$q){
		var defaultParams = {};
		this.get = get;
		this.getById = getById;
		this.getNew = getNew;
		this.deleteAll = deleteAll;
		this.save = save;
		this.update = update;
		this.del = del;
		this.postImage = postImage;
		this.deleteImage = deleteImage;
		
		function get(url,params) {
			if (!params) {
				params = defaultParams;
			}
			return $http.get(url, params);
		}

		function getById(url,id) {
			return $http.get(url + '/' + id);
		}

		function getNew(url){
			return $http.get(url+'/new');
		}

		function deleteAll(url,entities) {
			var promises = entities.map(function(entity){
				return del(url,entity);
			});
			return $q.all(promises);
		}

		function save(url,entity) {
			return $http.post(url, entity);
		}

		function update(url,entity) {
			return $http.put(url + '/' + entity.id, entity);
		}

		function del(url,entity) {
			return $http.delete(url + '/' + entity.id);
		}

		function postImage(url, attribute, model) {
			var fd = new FormData();
			fd.append(attribute, model);
			return $http.post(url + '/' + attribute + '/', fd, {
				transformRequest: angular.identity,
				headers: {'Content-Type': undefined}
			});
		}

		function deleteImage(url, attribute, value) {
			return $http.delete(url + '/' + attribute + '/' + value, {
				transformRequest: angular.identity,
				headers: {'Content-Type': undefined}
			});

		}
	}
	angular.module('gumga.services.base',[])
	.service('GumgaBase',Base);
})();


(function(){
	'use strict';
	DateService.$inject = [];
	function DateService(){
		return {
			formats: {
				DMY: /^(\d{1,2})\-(\d{1,2})\-(\d{4})$/,
				YMD: /^(\d{4})\-(\d{1,2})\-(\d{1,2})$/
			},
			validateFormat: function(format, date) {
				if (!this.formats.hasOwnProperty(format)) {
					throw 'Formato não suportado';
				}
				var regex = new RegExp(this.formats[format]);
				if (!regex.test(date)) {
					throw 'A data ' + date + ' não confere com o formato ' + format + '.';
				}
				return regex.test(date);
			}
		}
	}
	angular.module('gumga.services.date',[])
	.factory('GumgaDateService',DateService);
})();

(function(){
	'use strict';

	Keyboard.$inject = [];
	/**
	 * @ngdoc service
	 * @name gumga.core:GumgaKeyboard
	 * @description 
	 * 	A directive GumgaKeyboard é um Wrapper de uma biblioteca chamada [Mousetrap](https://craig.is/killing/mice) 
	 * 	que é utilizada para adicionar funcionalidades quando determinadas teclas são pressionadas.
	 *
	 * 	# Métodos
	 *
	 *  `GumgaKeyboard.addBind(key,function,event)`
	 *  
	 * 	O método `addBind` adiciona uma função a combinação de teclas passada como parâmetro. Ele recebe três parâmetros, `key` e `function` e `event`.
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">key</label> Quais teclas serão clicadas para que a função seja executada.
	 *  - <label class="label label-warning" style="margin-right: 1%">Object</label> <label class="label label-info">function</label> Função que será executada quando sequência de teclas especificadas for digitada pelo usuário.
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">event</label> Em qual evento de teclado será disparado, como por exemplo `keypress` ou`keydown`
	 *  ### Retorno
	 *  - <label class="label label-warning">Boolean</label> Retona um boolean. Se o bind foi feito, retorna true, caso ao contrário retorna false.
	 *  ---
 	 *  `GumgaKeyboard.removeBind(key)`
	 *  
	 * 	O método `removeBind` remove as funções que estão atribuídas a `key` que foi passada . Ele recebe um parâmetro `key`.
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">key</label> Quais teclas que o desenvolvedor deseja remover o bind.
	 *  
	 *  ---
	 *  
 	 *  `GumgaKeyboard.triggerBoundedEvent(key)`
	 *  
	 * 	O método `triggerBoundedEvent` dispara o evento atribuído a `key` que foi passada.
	 * 	
	 *  ###Parâmetros
	 *  
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">key</label> Quais teclas que o desenvolvedor deseja remover o bind.
	 *  
	 *  ---
	 *
	 * 	`GumgaKeyboard.bindToElement(element,key,function,event)`
 	 *  
	 * 	O método `bindToElement` adiciona uma função a combinação de teclas passada como parâmetro em um elemento específico. Ele recebe quatro parâmetros,`element`, `key` e `function` e `event`.
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">Element</label><label class="label label-info">element</label> Elemento no qual a sequência de teclas deve ser executada para disparar o evento.
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">key</label> Quais teclas serão clicadas para que a função seja executada.
	 *  - <label class="label label-warning" style="margin-right: 1%">Object</label> <label class="label label-info">function</label> Função que será executada quando sequência de teclas especificadas for digitada pelo usuário.
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">event</label> Em qual evento de teclado será disparado, como por exemplo `keypress` ou`keydown`
	 *  ### Retorno
	 *  - <label class="label label-warning">Boolean</label> Retona um boolean. Se o bind foi feito, retorna true, caso ao contrário retorna false.
	 *  ---
	 *
 	 * 	`GumgaKeyboard.unbindFromElement(element,key)`
 	 *  
	 * 	O método `unbindFromElement` remove as teclas do elemento passado como parâmetro. Ele recebe dois parâmetros,`element` e `key`.
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">Element</label><label class="label label-info">element</label> Elemento no qual a sequência de teclas vai ser retirada.
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">key</label> Quais teclas serão removidas do element.
	 *  ---
	 *  
	 * 	`GumgaKeyboard.bindToMultipleElement(array,key,function,event)`
 	 *  
	 * 	O método `bindToElement` adiciona uma função a combinação de teclas passada como parâmetro em um elemento específico. Ele recebe quatro parâmetros,`element`, `key` e `function` e `event`.
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">Array</label><label class="label label-info">array</label> Lista dos elementos que serão adicionados a sequência de teclas.
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">key</label> Quais teclas serão clicadas para que a função seja executada.
	 *  - <label class="label label-warning" style="margin-right: 1%">Object</label> <label class="label label-info">function</label> Função que será executada quando sequência de teclas especificadas for digitada pelo usuário.
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">event</label> Em qual evento de teclado será disparado, como por exemplo `keypress` ou`keydown`
	 *  ### Retorno
	 *  - <label class="label label-warning">Boolean</label> Retona um boolean. Se o bind foi feito, retorna true, caso ao contrário retorna false.
	 *  ---
	 *
 	 * 	`GumgaKeyboard.getBinds()`
 	 *  
	 * 	O método `getBinds` retorna todos os binds que foram adicionados.
	 *
	 * 
	 *  ### Retorno
	 *  - <label class="label label-warning">Array</label> Retorna uma lista de todos os binds já feitos.
	 *  
	 *  ---
	 */
	function Keyboard(){
		return {
			addBind: function(key,fn,event){
				if(key && fn){
					Mousetrap.bind(key,fn,event? event : '');
					this.__binds.push(key);
					return true;
				}
				return false;
			},removeBind: function(key){
				if(key){
					Mousetrap.unbind(key);
					this.__binds.splice(this.__binds.indexOf(key),1);
				}
			},
			triggerBoundedEvent: function(key){
				if(key){
					Mousetrap.trigger(key);
				}
			},
			bindToElement: function(element,key,fn,event){
				if(element && key && fn){
					Mousetrap(element).bind(key,fn,event ? event: '');
					this.__binds.push(key);
					return true;
				}
				return false;
			},
			unbindFromElement: function(element,key){
				if(element && key) {
					Mousetrap(element).unbind(key);
				}
			},
			bindToMultipleElements: function(arrayOfElements,key,fn,event){
				for(var i = 0, len = arrayOfElements.length; i < len; i++) if(key && fn){
					Mousetrap(arrayOfElements[i]).bind(key,fn,event? event: '');
					this.__binds.push(key);
				}
			},
			getBinds: function(){
				return this.__binds;
			},
			__binds: []
		}
	}
	angular.module('gumga.services.keyboard',[])
		.factory('GumgaKeyboard',Keyboard);
})();
(function(){
	'use strict';

	angular.module('gumga.services.notifications',[])
		.factory('GumgaNotification',function(){
			return {
				_dangerMessages:{},
				_successMessages:{},
				_warningMessages:{},
				_infoMessages:{},				
				createDangerMessage: function(){

				},	
				createSuccessMessage: function(){

				},
				createWarningMessage: function(){

				},
				createInfoMessage: function(){

				}
			}
		})
})();
(function(){
	'use strict';

	Populate.$inject = [];
	/**
	 * @ngdoc service
	 * @name gumga.core:$populateProvider
	 * @description O service **$populate** é utilizado para adicionar funções básicas de CRUD, que já fazem a conexão com o Service
	 *  (*Melhor utilizado com o service GumgaRest*), possibilitando assim que o $scope fique limpo. É possível também criar uma configuração 
	 *  nova para ser utilizada, extender as já criadas e recuperar o objeto de controle da configuração.
	 *
	 * 	As funções criam um objeto com o nome do ID passado para armazenar os dados. Além disso, o identificador é utilizado para nomear as funções. Caso o Identificador 
	 * 	passado seja `User` e a função seja `get`, o nome da função será `userGet`, para evitar colisão de nomes.
	 * 	Todas as funções possuem eventos que são disparados antes e depois da execução da função, para ajudar o desenvolvedor a extender as funcionalidades
	 * 	das funções sem precisar sobrescrever-las. Para utilizar estes eventos, basta adicionar um listener no $scope, como por exemplo:
	 *  <pre>
	 *  	$scope.$on('beforeGet',function(){
	 *    alert('Antes do Get!');
	 *  	})
	 *
	 * 		$scope.$on('afterGet',function(values){
	 *		  // values é retorno da função asíncrona.
	 * 		})
	 * 	</pre>
	 * 		
	 *
	 * # Como utilizar:
	 *
	 * 	Para utilizar o assistente, é necessário injetar como dependência no bloco de configuração do módulo:
	 * 	<pre>
	 *  	angular.module('sample',['gumga.core'])
	 *  	.config(function($populateProvider){
	 *     $stateProvider
   *   	 .state('crud.list', {
   *      url: '/list',
	 *      templateUrl: 'app/modules/crud/views/list.html',
	 *      controller: 'CrudController',
   *      resolve:  {
   *       populateScope: function(){
   *        return $populateProvider.populateScope;
   *       }
   *     }
   *   })
	 *   })
	 *  </pre>
	 *
	 * 	E depois no controller, utilizar ele executando a função populateScope que foi passada através do resolve:
	 * 	<pre>
	 * 		angular.module('sample')
	 * 		.controller('SampleController',
	 * 	   ['$scope','populateScope','UserService',function($scope,populateScope,UserService){
	 * 		   populateScope($scope,UserService,'User','base-list');
	 * 	   }])
	 * 	</pre>
	 *
	 * 	Pode-se optar também por não incluir no módulo de configuração, mas direto no controller:
	 * 	<pre>
	 * 		angular.module('sample')
	 * 		.controller('SampleController',
	 * 	   ['$scope','$populate','UserService',function($scope,$populate,UserService){
	 * 		   $populate.populateScope($scope,UserService,'User','base-list');
	 * 	   }])
	 * 	</pre>
	 *
	 * # Configurações:
	 *
	 * 	- `base-list`: A configuração `base-list` serve para incluir funções gerais que são necessárias em páginas de listagem, que são:
	 * 		- `get`
	 * 		- `resetAndGet`
	 * 		- `getById`
	 * 		- `update`
	 * 		- `delete`
	 * 		
	 *    - `sort`
	 *    - `search`
	 *    - `advancedSearch`
	 *    
	 *    
	 * 	- `base-form`: A configuração `base-form` serve para incluir funções gerais que são necessárias em páginas de formulário, que são:
	 * 		- `getNew`
	 * 		- `getById`
	 * 		- `save`
	 * 		- `update`
	 * 		- `saveImage`
	 * 		
	 *    - `deleteImage`
	 *
	 * 
	 * 	- `many-to-many`: A configuração `many-to-many` serve para incluir funções que comumente são utilizadas em relações muitos para muitos, que são:
	 * 		- `search` 
	 * 		- `save`
	 * 		- `searchAsync`
	 * 		- `saveAsync`
	 *
	 * 	- `many-to-one`: A configuração `many-to-one` serve para incluir funções que comumente são utilizadas em relações muitos para um, que são: 
	 * 		- `search` 
	 * 		- `save`
	 * 		- `saveAsync`
	 *
	 *	## Implementações:
	 *		Para ver as implementações das funções acima, clique [aqui]().
	 *
	 *	# Métodos
	 *  `$populate.setConfig(name,value)`
	 *  
	 *  O método setConfig aceita dois parâmetros `name` e `value`, o nome da configuração e o objeto que irá fazer a configuração.
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">name</label> String que será usada para identificar o objeto que será criado.
	 *  - <label class="label label-warning" style="margin-right: 1%">Object</label> <label class="label label-info">value</label> Objeto de configuração que será usado.
	 *   Para adicionar a função, coloque o nome da função e o valor dele como `true`
	 *  
	 *  ---
	 *  
	 *  `$populate.getConfig(name)`
	 *  
	 *  O método getConfig aceita um parâmetro `name`, que é o nome da configuração desejada.
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">name</label> String que será usada para identificar o objeto que será recuperado.
	 *   Para adicionar a função, coloque o nome da função e o valor dele como `true`
	 *
	 * 	### Retorno
	 *
	 * 
	 *  - <label class="label label-info">Object</label> Configuração que será recuperada da função.
	 *
	 * 
	 *  --- 	
	 *  
	 *  `$populate.setMethod(name,config,function)`
	 *  
	 *  O método setMethod aceita três parâmetros: `name`,`config`, `function`. Este método é utilizado para extender as funcionalidades de uma configuração.
	 *  
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">name</label> String que será usada para identificar como será o nome da função a ser adicionada.
	 *   Para adicionar a função, coloque o nome da função e o valor dele como `true`
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">config</label> String que será usada para identificar qual objeto de configuração esta função será adicionada.
	 *   Para adicionar a função, coloque o nome da função e o valor dele como `true`
	 *  - <label class="label label-warning" style="margin-right: 1%">Function</label><label class="label label-info">function</label> Função que será adicionada ao $scope. *Ao passar a função, o desenvolvedor
	 *  tem acesso a 4 parâmetros que serão utilizados para definir a função no scope: `Scope`, `Service`,`Id`*.
	 *
	 *  --- 	
	 *
 	 *  
	 *  `$populate.populateScope(scope,service,id,config)`
	 *  
	 *  O método populateScope aceita quatro parâmetros: `scope`,`service`, `id` e `config`. Este método é utilizado para popular o $scope do controlador com as funções da configuração.
	 *  
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">Object</label><label class="label label-info">scope</label> Objeto onde as funções são colocadas, caso sejam num controlador, no *$scope*.
	 *   Para adicionar a função, coloque o nome da função e o valor dele como `true`
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">id</label> Identificador que será utilizado para armazenar os dados no $scope, além de nomear
	 *  as funções.
 	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">config</label> String que será utilizada para definir qual configuração será utilizada.
	 *  --- 	 
	 */
	
	function Populate(){
		var helpers = {}, configs = {}, methods = {};
		helpers.guaranteeString = function(s){ return (s && angular.isString(s))};
		helpers.guaranteeArray = function(a){ return (a && angular.isArray(a))};
		helpers.guaranteeIsDefined = function(d){ return angular.isDefined(d)};
		helpers.guaranteeBasicList = function(s){ return (s && this.guaranteeString(s) && s == 'basic-list')};
		configs['base-list']= {
			get: true,
			resetAndGet: true,
			getById: true,
			update: true,
			delete: true,
			sort: true,
			search: true,
			advancedSearch: true,
			resetQuery: true
		};
		configs['base-form'] = {
			getNew: true,
			getById: true,
			save: true,
			update: true,
			saveImage: true,
			deleteImage: true
		};

		configs['many-to-many'] = {
			search: true,
			save: true,
			searchAsync: true,
			saveAsync: true
		}

		configs['many-to-one']={
			save: true,
			searchAsync: true,
			saveAsync: true
		}


		methods.searchAsync = function(Scope,Service,Id){
			Scope[Id.toLowerCase() + 'AsyncSearch'] = function(field,value){
				return Service.getSearch(field, value)
				.then(function (data) {
					return data.data.values;
				});
			}
		}


		methods.saveAsync = function(Scope,Service,Id){
			Scope[Id.toLowerCase() + 'AsyncSave'] = function(value,param){
				var obj = {};
				obj[param] = value;
				return Service.update(obj);
			}
		}
		methods.get = function(Scope,Service,Id){
			Scope[Id]= {};
			Scope.page = 0;
			Scope[Id.toLowerCase() + 'Get']= function(page) {
				Scope.$broadcast('beforeGet');
				Service.get(page)
				.then(function (values) {
					Scope[Id].content = values;
					Scope.$broadcast('afterGet',values);
				})
			}
			Scope[Id.toLowerCase() + 'Get']();
		};
		methods.resetAndGet = function(Scope,Service,Id){
			Scope[Id.toLowerCase() + 'ResetAndGet'] = function(){
				Scope.page = 0;
				Scope.$broadcast('beforeResetAndGet');
				Service.resetAndGet()
				.then(function(values){
					Scope[Id].content = values;
					Scope.$broadcast('afterResetAndGet',values);
				})
			}
		};
		methods.getNew = function(Scope,Service,Id){
			Scope[Id] = Scope[Id] || {};
			Scope[Id.toLowerCase() + 'GetNew'] = function(){
				Scope.$broadcast('beforeGetNew');
				Service.getNew()
				.then(function(values){
					Scope.$broadcast('afterGetNew',values);
					Scope[Id]['new' + Id] = values;
				})
			}
		};
		methods.getById = function(Scope,Service,Id){
			Scope[Id.toLowerCase() + 'GetById'] = function(id){
				Scope.$broadcast('beforeGetById');
				Service.getById(id)
				.then(function(values){
					Scope[Id]['id' + id] = values;
					Scope.$broadcast('afterGetById',values);
				})
			}
		};
		methods.save = function(Scope,Service,Id){
			Scope[Id.toLowerCase() + 'Save'] = function(value,param){
				Scope.$broadcast('beforeSave',value);
				var obj = {};
				obj[param] = value;
				Service.update(obj)
				.then(function(values){
					Scope.$broadcast('afterSave',values);
				})
			}
		};
		methods.update = function(Scope,Service,Id){
			Scope[Id.toLowerCase()+'Update'] = function(value){
				Scope.$broadcast('beforeUpdate',value);
				Service.update(value)
				.then(function(values){
					Scope.$broadcast('afterUpdate',values);
				})
			}
		};
		methods.delete = function(Scope,Service,Id){
			Scope[Id.toLowerCase() + 'Delete'] = function(value){
				Scope.$broadcast('beforeDelete');
				Service.deleteCollection(value)
				.then(function(values){
					Scope.$broadcast('afterDelete',values);
					Scope[Id.toLowerCase() + 'Get']();
				})
			}
		};
		methods.sort = function(Scope,Service,Id){
			Scope[Id.toLowerCase()+'Sort'] = function(field,way){
				Scope.$broadcast('beforeSort');
				Service.sort(field,way)
				.then(function(values){
					Scope[Id].content = values;
					Scope.$broadcast('afterSort',values);
				})
			}
		};
		methods.saveImage = function(Scope,Service,Id){
			Scope[Id.toLowerCase() + 'SaveImage'] = function(attribute,model){
				Scope.$broadcast('beforeSaveImage');
				return Service.saveImage(attribute,model);
			}
		};
		methods.deleteImage = function(Scope,Service,Id){
			Scope[Id.toLowerCase() + 'DeleteImage'] = function(attribute,model){
				Scope.$broadcast('beforeDeleteImage');
				Service.deleteImage(attribute,model)
				.then(function(values){
					Scope.$broadcast('afterDeleteImage',values);
				})
			}
		};
		methods.search = function(Scope,Service,Id){
			Scope[Id.toLowerCase() + 'Search'] = function(field,param){
				Scope.$broadcast('beforeSearch');
				Service.getSearch(field,param)
				.then(function(values){
					Scope[Id].content = values;
					Scope.$broadcast('afterSearch',values);
				})
			}
		}
		methods.advancedSearch = function(Scope,Service,Id){
			Scope[Id.toLowerCase() + 'AdvancedSearch'] = function(param){
				Scope.$broadcast('beforeAdvancedSearch',param)
				Service.getAdvancedSearch(param)
				.then(function(values){
					Scope[Id].content = values;
					Scope.$broadcast('afterAdvancedSearch',values)
				})
			}
		}
		methods.resetQuery = function(Scope,Service,id){
			Scope[id.toLowerCase() + 'ResetQuery'] = function(){
				Scope.page = 0;
				Service.resetQuery();
			}
		}
		return {
			setConfig: function(n,v){
				helpers.guaranteeString(n) && helpers.guaranteeIsDefined(v) ? (configs[n] = v) : angular.noop;
			},
			getConfig: function(string){
				return configs[string];
			},
			setMethod: function(name,config,fn){
				if(!(helpers.guaranteeString(name) && helpers.guaranteeString(config)))
					throw 'One of $populateProvider.setMethod arguments is wrong.';
				configs[config][name] = true;
				methods[name] = fn;
			},
			populateScope: function(scp,svc,id,config){
				if(!helpers.guaranteeIsDefined(scp)) throw 'The $scope passed for populateScope wasn\'t defined';
				if(!helpers.guaranteeIsDefined(id)) throw 'The identifier for populateScope must be passed';
				if(!helpers.guaranteeIsDefined(config)) throw 'The configuration for populateScope must be passed';
				if(!helpers.guaranteeIsDefined(svc)) throw 'The service for populateScope must be passed';
				if(configs[config]){
					scp[id] = {};
					scp[id].content = {};
					var configuration = configs[config];
					for (var key in configuration) if(configuration.hasOwnProperty(key)){
						methods[key](scp,svc,id);
					}
				}
			},
			$get: function(){
				return null;
			}
		}
	}
	angular.module('gumga.services.populate',[])
	.provider('$populate',Populate)
})();
(function(){
	'use strict';

	Base.$inject = ["$http", "$q"];
	/**
	 * @ngdoc service
	 * @name gumga.core:GumgaRest
	 * @description
	 * 	O service GumgaRest é uma evolução do service {@link gumga.core:GumgaBase}, pois sua configuração não necessita
	 * 	de nenhuma outra configuração adicional no service que irá chamá-lo.
	 *
	 * ## Exemplo
	 * <pre>
	 * angular.module('sample',['gumga.core'])
	 * .service('GumgaRest',function(GumgaRest){
	 * 	   //Exemplo de utilização.
	 * 	   var service = new GumgaRest('http://www.gumga.com.br/api');
	 *     // Ou, caso não queira adicionar nenhum método, utilizar:
	 *     // return new GumgaRest('http://www.gumga.com.br/api');
	 *
	 *	   service.get = function(page){
	 *	       alert('Modifiquei um método da service e chamei o padrão!');
	 *		     return GumgaRest.prototype.get.call(this,page);
	 *	   }
	 * 	   return service;
	 * })
	 * </pre>
	 *
	 * # Métodos
	 *
	 *  `GumgaRest.get(params)`
	 *  
	 *  O método get aceita um parâmetro `url` e retorna uma promise de uma chamada HTTP do tipo GET.
	 *  
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">Object</label> <label class="label label-info">params</label> Parâmetros da query que será feita.
	 *  ### Retorno
	 *  - <label class="label label-info">HttpPromise</label> Retona uma promise da chamada HTTP GET.
	 *  ---
	 *  `GumgaRest.resetAndGet()`
	 *  
	 *  O método resetAndGet reseta a query atual e performa uma chamada HTTP do tipo GET.
	 *  
	 *  ### Retorno
	 *  
	 *  - <label class="label label-info">HttpPromise</label> Retorna uma promise da chamada HTTP GET.
	 *
	 * 	---
	 *
 	 *  `GumgaRest.getById(id)`
	 *  
	 *  O método getById aceita um parâmetro `id` e retorna uma promise de uma chamada HTTP do tipo GET.
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">[String|Number]</label> <label class="label label-info">id</label> Identificador do registro que será buscado.
	 *  ### Retorno
	 *  - <label class="label label-info">HttpPromise</label> Retona uma promise da chamada HTTP GET.
	 *  ---
	 *  `GumgaRest.getNew()`
	 *  
	 *  O método getById  retorna uma promise de uma chamada HTTP do tipo GET.
	 *  ### Retorno
	 *  
	 *  - <label class="label label-info">HttpPromise</label> Retorna uma promise da chamada HTTP GET.
	 *  
	 *  --- 
 	 *  `GumgaRest.delete(data)`
	 *  
	 *  O método delete recebe como parâmetro um objeto que será deletado. O objeto deve ter um parâmetro ID, 
	 *  que será passado para a url da chamada.
	 *
 	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">Object</label> <label class="label label-info">data</label> Registro que será deletado.
	 * 
	 *  ### Retorno
	 *  
	 *  - <label class="label label-info">HttpPromise</label> Retorna uma promise da chamada HTTP DELETE.
	 *  
	 *  --- 
	 *  
 	 *  `GumgaRest.sort(field,way)`
	 *  
	 * O método sort recebe dois parâmetros para fazer a ordenação: `field` e `way`, que determinarão qual campo será ordenado
	 * e se será 'asc' ou 'desc'. 
	 *
 	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label> <label class="label label-info">field</label> Qual campo será feita a ordenação
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label> <label class="label label-info">way</label> Em que sentido a ordenação será feita, se será ascendente `asc` ou descendente `desc`.
	 *  ### Retorno
	 *  
	 *  - <label class="label label-info">HttpPromise</label> Retorna uma promise da chamada HTTP GET.
	 *  
	 *  --- 
	 *
	 *  `GumgaRest.deleteCollection(array)`
	 *  
	 *  O método deleteAll aceita um parâmetro `url`  e retorna uma promise de uma série de chamadas http do tipo DELETE que serão resolvidas ao mesmo tempo.
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">Array</label><label class="label label-info">array</label> Array com todas os registros que serão deletados 
	 *  ### Retorno
	 *  - <label class="label label-info">HttpPromise</label> Retorna uma promise após todas as chamadas terem sido resolvidas.
	 *  ---
	 *
 	 *  `GumgaRest.saveImage(attribute,data)`
	 *  
	 *  O método saveImage aceita dois parâmetros `attribute` e `data` e retorna uma promise de de uma chamada HTTP POST FORM-DATA.
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">attribute</label> Atributo no qual a imagem será feito o
	 *  bind após o form ter sido enviado completo.
	 *  - <label class="label label-warning" style="margin-right: 1%">Object</label><label class="label label-info">data</label> Dados da imagem que foi selecionada..
	 *  ### Retorno
	 *  - <label class="label label-info">HttpPromise</label> Retorna uma promise da chamada HTTP POST. Nesta promise, será retornado o valor de uma String que deverá ser atribuída ao atributo
	 *  onde estava a imagem. Esta string é um identificador para quando o registro for enviado através de um post.
	 *  ---
 	 *  `GumgaRest.deleteImage(attribute,data)`
	 *  
	 *  O método deleteImage aceita dois parâmetros `url` e `data` e retorna uma promise de de uma chamada HTTP DELETE FORM-DATA.
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">attribute</label> Atributo no qual a imagem será feito o
	 *  bind após o form ter sido enviado completo.
	 *  - <label class="label label-warning" style="margin-right: 1%">Object</label><label class="label label-info">data</label> Dados da imagem que foi selecionada.
	 *  ### Retorno
	 *  - <label class="label label-info">HttpPromise</label> Retorna uma promise da chamada HTTP DELETE.
	 *  ---
 	 *
 	 *  `GumgaRest.getSearch(field,param)`
	 *  
	 *  O método getSearch aceita dois parâmetros `field` e `param` e retorna uma promise de uma chamada HTTP do tipo GET.
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">[String]</label> <label class="label label-info">field</label> Qual campo a busca será feita. Caso 
	 *  queira fazer a busca em mais de um campo, passar uma string com os nomes separados por vírgula.
 	 *  - <label class="label label-warning" style="margin-right: 1%">[Object]</label> <label class="label label-info">param</label> Objeto que irá conter os parâmetros 
 	 *  da busca.
	 *  ### Retorno
	 *  - <label class="label label-info">HttpPromise</label> Retona uma promise da chamada HTTP GET.
	 *  --- 
	 *
 	 *  `GumgaRest.getAdvancedSearch(param)`
	 *  
	 *  O método getAdvancedSearch aceita um parâmetro `param` e retorna uma promise de uma chamada HTTP do tipo GET.
	 *  ### Parâmetros
 	 *  - <label class="label label-warning" style="margin-right: 1%">[Object]</label> <label class="label label-info">param</label> Objeto que irá conter os parâmetros 
 	 *  da busca.
	 *  ### Retorno
	 *  - <label class="label label-info">HttpPromise</label> Retona uma promise da chamada HTTP GET.
	 *  ---   
   *
 	 *  `GumgaRest.resetDefaultState()`
	 *  
	 *  O método resetDefaultState retorna o objeto de query ao seu estado padrão.
	 *  
	 *  ---
	 */
	function Base($http,$q){
		function RestPrototype(url){
			this._url = url;
			this._query = {params: {start: 0,pageSize: 10}};
		}
		RestPrototype.prototype.get = _get;
		RestPrototype.prototype.resetAndGet = _resetAndGet;
		RestPrototype.prototype.getNew = _getNew;
		RestPrototype.prototype.getById = _getById;
		RestPrototype.prototype.save = _save;
		RestPrototype.prototype.update= _update;
		RestPrototype.prototype.delete = _delete;
		RestPrototype.prototype.sort = _sort;
		RestPrototype.prototype.deleteCollection = _deleteCollection;
		RestPrototype.prototype.saveImage = _saveImage;
		RestPrototype.prototype.deleteImage = _deleteImage;
		RestPrototype.prototype.getSearch = _getSearch;
		RestPrototype.prototype.getAdvancedSearch = _getAdvancedSearch;
		RestPrototype.prototype.resetDefaultState = _resetQuery;
		function _get(page){
			if (page) {
				this._query.params.start = (page - 1) * this._query.params.pageSize;
				if (page < 1) throw 'Invalid page';
			}
			return $http.get(this._url,this._query);
		}
		function _getNew () {return $http.get(this._url + '/new')}
		function _getById(id){return $http.get(this._url + '/' + id);}
		function _save (v){return $http.post(this._url,v);}
		function _update (v){
			if(v.id){
				return $http.put(this._url + '/' + v.id ,v);
			}
			return this.save(v);
		}
		function _delete(v){return $http.delete(this._url + '/' + v.id);}
		function _resetQuery(){this._query = {params: {start: 0,pageSize: 10}};}

		function _resetAndGet(){
			this.resetDefaultState();
			return $http.get(this._url,this._query);
		}
		function _sort(f,w){
			this.resetDefaultState();
			this._query.params.sortField = f;
			this._query.params.sortDir = w;
			return $http.get(this._url,this._query);
		}
		function _deleteCollection(arr){
			var url = this._url;
			return $q.all(arr.map(function(v){
				return $http.delete(url + '/' + v.id);
			}))
		}
		function _saveImage(a,m){
			var fd = new FormData();
			fd.append(a,m);
			return $http.post(this._url + '/' +a ,fd,{
				transformRequest: angular.identity,
				headers: {'Content-Type': undefined}
			});
		}
		function _deleteImage(a){
			var fd = new FormData();
			fd.append(a,{});
			return $http.delete(this._url + '/' +a,fd,{
				transformRequest: angular.identity,
				headers: {'Content-Type': undefined}
			});
		}
		function _getSearch(f,p){
			this.resetDefaultState();
			(!p) ?  p = '' : angular.noop;
			this._query.params.q = p;
			this._query.params.searchFields = f;
			return this.get();
		}
		function _getAdvancedSearch(p){
			this._query.params = {}
			this._query.params.aq = p;
			return $http.get(this._url,this._query);
		}
		return RestPrototype;
	}

	angular.module('gumga.services.rest',[])
	.service('GumgaRest',Base);

})();
(function(){
	'use strict';


		Translate.$inject= [];
		function Translate(){
			return {
				$get: ["$http", function($http){
					var self = this;
					$http.get('/i18n/'+self._language + '.json')
						.success(function SuccessGet(values){
							localStorage.setItem('GUMGA'+ self._language,JSON.stringify(values));
							localStorage.setItem('GUMGACurrent',self._language);
						})
					return self;
				}],
				setLanguage: function(language){
					if(!language) throw 'You must pass a language to GumgaTranslate';
					this._language.toLowerCase() !== language.toLowerCase() ? this._language = language : function(){};
				},
				_language: 'pt-br'
			}
		}

		angular.module('gumga.services.translate',['gumga.services.translate.helper'])
		.provider('$gumgaTranslate',Translate)
})();
(function(){
	'use strict';

	TranslateHelper.$inject = [];

	function TranslateHelper() {
		return {
			_translation: {},
			__getFromLocalStorage: function(){
				var language = localStorage.getItem('GUMGACurrent')
				,		self = this;
				function iterate(obj,string){
					for(var key in obj) if(obj.hasOwnProperty(key)){
						(typeof obj[key] == 'object') ? 
							iterate(obj[key], string + '.' + key) : self._translation[(string + '.' + key).substring(1)] = obj[key];
					}
				}
				if(language && localStorage.getItem('GUMGA' + language)){
					iterate(JSON.parse(localStorage.getItem('GUMGA' + language)),'');
					return true;
				}
				
			},
			getTranslate: function(toTranslate){
				var self = this;
				if (Object.getOwnPropertyNames(self._translation).length === 0)
					self.__getFromLocalStorage();
				if(!toTranslate || typeof toTranslate != 'string')  
					throw 'The value passed to GumgaTranslate is Wrong!';
				if(self._translation[toTranslate])
					return self._translation[toTranslate];
				return toTranslate;
			}
		}
	}

	angular.module('gumga.services.translate.helper',[])
	.factory('GumgaTranslateHelper',TranslateHelper)

})();
(function(){
  'use strict';

  Utils.$inject = [];

  function Utils(){
    return {
      areNotEqualInArray: function (array, index) {
        var aux = array.filter(function (element) {
          return element == index;
        });
        return (aux.length < 1);
      },
      camelCase: function (string) {
        return string.slice(0, 1).toUpperCase() + string.slice(1, string.length);
      },
      objInArray: function (array, field) {
        var arrayAux = array.filter(function (obj) {
          return obj.field == field;
        });
        return arrayAux.length > 0;
      },
      checkIndex: function (array, txt) {
        var flag = -1;
        array.forEach(function (obj, index) {
          if (obj.field == txt) {
            flag = index;
          }
        });
        return flag;
      },
      errorMessages: {
        max: "You've typed more than the maximum!",
        min: "You've typed less than the minimum!",
        req: "This field is required"
      }
    }
  }
  angular.module('gumga.services.utils',[])
  .factory('GumgaUtils',Utils);
})();

(function(){
	'use strict';

	WebStorage.$inject = [];
	/**
	 * @ngdoc service
	 * @name gumga.core:GumgaWebStorage
	 * @description 
	 * 
	 * 	O service GumgaWebStorage é utilizado para ajudar o desenvolvedor a trabalhar com o storage do Browser.
	 *
	 * 	#Métodos
	 *
	 *	---
	 * 
	 *  `GumgaWebStorage.setSessionStorageItem(key,value)`
	 *  
	 *  O método setSessionStorageItem aceita dois parâmetros `key` e `value`.
 	 *  
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label> <label class="label label-info">key</label> Qual o identificador do valor que será salvo.
	 *  - <label class="label label-warning" style="margin-right: 1%">[String|Number|Object]</label> <label class="label label-info">value</label> Valor que será salvo no sessionStorage.
	 *  ---
 	 * 
	 *  `GumgaWebStorage.getSessionStorageItem(key)`
	 *  
	 *  O método setSessionStorageItem aceita um parâmetro `key`.
 	 *  
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label> <label class="label label-info">key</label> Qual o identificador do valor que será salvo.
	 *
	 *  ### Retorno
	 *  - <label class="label label-warning" style="margin-right: 1%">[String|Number|Object]</label> <label class="label label-info">key</label> Retorna o valor que estiver na sessionStorage daquela key específica. Caso não encontre,
	 *  o valor retornado é null.
	 *  ---
	 *
 	 *  `GumgaWebStorage.removeSessionStorageItem(key)`
	 *  
	 *  O método removeSessionStorageItem aceita um parâmetro `key`.
 	 *  
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label> <label class="label label-info">key</label> Qual o identificador do valor que será removido da sessionStorage.
	 *
	 *  --- 
	 *
	 *  `GumgaWebStorage.clearSessionStorage()`
	 *  
	 *  O método clearSessionStorage não aceita nenhum parâmetro e limpa a sessionStorage.
 	 *  
	 *  --- 
	 *
 	 *
	 *  `GumgaWebStorage.getNumberOfItemsInSessionStorage()`
	 *  
	 *  O método getNumberOfItemsInSessionStorage não aceita nenhum parâmetro, e retorna o número de itens no localStorage.
 	 *  
	 *  --- 
	 *
 	 * 
	 *  `GumgaWebStorage.setLocalStorageItem(key,value)`
	 *  
	 *  O método setLocalStorageItem aceita dois parâmetros `key` e `value`.
 	 *  
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label> <label class="label label-info">key</label> Qual o identificador do valor que será salvo.
	 *  - <label class="label label-warning" style="margin-right: 1%">[String|Number|Object]</label> <label class="label label-info">value</label> Valor que será salvo no LocalStorage.
	 *  ---
 	 * 
	 *  `GumgaWebStorage.getLocalStorageItem(key)`
	 *  
	 *  O método setLocalStorageItem aceita um parâmetro `key`.
 	 *  
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label> <label class="label label-info">key</label> Qual o identificador do valor que será salvo.
	 *
	 *  ### Retorno
	 *  - <label class="label label-warning" style="margin-right: 1%">[String|Number|Object]</label> <label class="label label-info">key</label> Retorna o valor que estiver na LocalStorage daquela key específica. Caso não encontre,
	 *  o valor retornado é null.
	 *  ---
	 *
 	 *  `GumgaWebStorage.removeLocalStorageItem(key)`
	 *  
	 *  O método removeLocalStorageItem aceita um parâmetro `key`.
 	 *  
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label> <label class="label label-info">key</label> Qual o identificador do valor que será removido da LocalStorage.
	 *
	 *  --- 
	 *
	 *  `GumgaWebStorage.clearLocalStorage()`
	 *  
	 *  O método clearLocalStorage não aceita nenhum parâmetro e limpa o localStorage.
 	 *  
	 *  --- 
 	 *
	 *  `GumgaWebStorage.getNumberOfItemsInLocalStorage()`
	 *  
	 *  O método getNumberOfItemsInLocalStorage não aceita nenhum parâmetro, e retorna o número de itens no localStorage.
 	 *  
	 *  --- 
	 */
	function WebStorage(){
		return {
			setSessionStorageItem: function(key,value){
				var _value = value;
				if(typeof value == 'object'){
					_value = angular.toJson(value);
				}
				window.sessionStorage.setItem(key,_value);
			},
			getSessionStorageItem: function(key){
				var g = window.sessionStorage.getItem(key);
				if(!g){
					return null;
				}
				try {
					angular.fromJson(g);
				}catch(e){
					return g;
				}
				return angular.fromJson(g);
			},
			removeSessionStorageItem: function(key){
				window.sessionStorage.removeItem(key);
			},
			clearSessionStorage: function(){
				window.sessionStorage.clear();
			},
			getNumberOfItemsInSessionStorage: function(){
				return window.sessionStorage.length;
			},
			setLocalStorageItem: function(key,value){
				window.localStorage.setItem(key,angular.toJson(value));
			},
			getLocalStorageItem: function(key){
				var g = window.localStorage.getItem(key);
				try {
					angular.fromJson(g);
				}catch(e){
					return g;
				}
				return angular.fromJson(g);
			},
			removeLocalStorageItem: function(key){
				window.localStorage.removeItem(key);
			},
			clearLocalStorage: function(){
				window.localStorage.clear();
			},
			getNumberOfItemsInLocalStorage: function(){
				return window.localStorage.length;
			}
		}
	}

	angular.module('gumga.services.webstorage',[])
	.factory('GumgaWebStorage',WebStorage)
})();
(function(){
	'use strict';
	Errors.$inject = [];
  function Errors() {
    return {
      restrict: 'A',
      scope: {},
      template:'',
      require: '^form',
      link: function (scope, elm, attrs, ctrl) {
         g('diretiva form errors');
      }
    }
  }
	angular.module('gumga.directives.form.errors',[])
	.directive('gumgaErrors',Errors);
})();

(function(){
	'use strict';
	Form.$inject = ["$timeout"];
	function Form($timeout) {
		return {
			restrict: 'A',
			require: '^form',
			scope: false,
			link: function(scope, elm, attrs, ctrl) {
				if(!attrs.name) throw 'É necessário passar um valor para o atributo "name" do element <form>';
				scope.GumgaForm = {};
				var _form = scope[attrs.name];
				var _formControllers = [];
				(function() {
					angular.forEach(elm.find('input'),function(input){
						_formControllers.push({
							name: angular.element(input).controller('ngModel').$name,
							controller: angular.element(input).controller('ngModel'),
							errorMessages: {
								max:{
									date: 'A data especificada ultrapassou o limite de: {1}.',
									length: 'O texto especificado ultrapassou o limite de: {1}.',
									number: 'O número especificado ultrapassou o limite de: {1}.'
								},
								min: {
									date: 'A data especificada não atigiu o limite mínimo de: {1}',
									length: 'O texto especificado não atingiu o limite mínimo de: {1}',
									number: 'O número especificado não atingiu o limite mínimo de: {1}'
								},
								pattern: 'O texto especificado deve estar dentro do padrão: {1}',
								range: {
									date:'A data especificada não está dentro do alcance: {1}',
									number: 'O número especificado não está dentro do alcance: {1}'
								},
								required: 'O campo é requerido.'
							}
						})
					});
				})();

				scope.changeMessage = function(){

				}

				scope.GumgaForm.setFormValid = function () {
					for(var key in _form.$error) if(_form.$error.hasOwnProperty(key)){
							_form.$error[key].forEach(function (value) {
								value.$setValidity(key,true);
							})
					}
					scope.$apply();
				}
				scope.GumgaForm.clearForm = function(){
					_formControllers.forEach(function(controller){
						controller.controller.$setViewValue('');
						controller.controller.$setPristine();
					})
					scope.$apply();
				}

				scope.GumgaForm.setFormPristine = function () {
					_formControllers.forEach(function(controller){
						controller.controller.$setPristine();
					})
					scope.$apply();
				}

				scope.GumgaForm.getFormErrors = function(){
					var _arr = []
					,		name
					,		aux = [];
					for(var key in _form.$error) if(_form.$error.hasOwnProperty(key)){
							_form.$error[key].forEach(function (value) {
								aux.push(value.$name);
							})
							_arr.push({type: key,fields: aux});
							aux = [];
					}
					return _arr;
				}


			}
		}
	}
	angular.module('gumga.directives.form.form',[])
	.directive('gumgaForm',Form);
})();

(function(){
	'use strict';
  /**
   * @ngdoc directive
   * @name gumga.core:gumgaMaxDate
   * @element input
   * @restrict A
   * @scope false
   * @description O componente GumgaMaxDate serve para validar datas máximas em entradas de formulários.
   * 
   * ## Nota
   * Esta diretiva suporta apenas **inputs** do tipo **date**. O valor do atributo/diretiva é **obrigatório** e deve ser uma **data**.
   *
   * @example
   *  Um exemplo da directive gumgaMaxDate funcionando pode ser encontrado [aqui](http://embed.plnkr.co/6KjgXFTEAnQq9GgWbbDB).
   *  <pre>
   *    <form name="myForm">
   *      <input type="date" name="maxDate" ng-model="maxDate" gumga-max-date="2015-07-20">
   *      <p ng-show="myForm.maxDate.$error.maxdate" class="text-danger">Data superior a esperada</p>
   *    </form>
   *  </pre>
   */
   MaxDate.$inject = ["$filter"];
   function MaxDate($filter) {
     return {
      restrict: 'A',
      require: 'ngModel',
      link: function (scope, elm, attr, ctrl) {
       if (attr.type != 'date') {
        throw 'Esta diretiva suporta apenas inputs do tipo date';
      }
      if (!attr.gumgaMaxDate) {
        throw "O valor da diretiva gumga-max-date não foi informado.";
      }
        // if (!GumgaDateService.validateFormat('YMD', attr.gumgaMaxDate)) {
        //   throw 'O valor da diretiva não corresponde ao formato yyyy-mm-dd';
        // }
        var validateMaxDate = function (inputValue) {
        	var format = 'yyyy-MM-dd';
        	var input = $filter('date')(inputValue, format);
        	var max = $filter('date')(attr.gumgaMaxDate, format);
        	var isValid = input <= max;
        	ctrl.$setValidity('maxdate', isValid);
        	return inputValue;
        };
        ctrl.$parsers.unshift(validateMaxDate);
        ctrl.$formatters.push(validateMaxDate);
        attr.$observe('gumgaMaxDate', function () {
        	validateMaxDate(ctrl.$viewValue);
        });

        scope.$on('clearFields',function(event, data) {
         ctrl.$modelValue = null;
         console.log('directive date clear');
					// console.log(elm);
					// console.log(ctrl);
				});
      }
    }
  }
  angular.module('gumga.directives.form.max.date',[])
  .directive('gumgaMaxDate',MaxDate);
})();

(function(){
	'use strict';
  /**
   * @ngdoc directive
   * @name gumga.core:gumgaMaxLength
   * @element input
   * @restrict A
   * @scope false
   * @description O componente GumgaMaxLength serve para validar quantidades máximas de caracteres em entradas de formulários.
   * 
   * ## Nota
   * O valor do atributo/diretiva é **obrigatório** e deve ser um **número**.
   *
   * @example
   *  Um exemplo da directive GumgaMaxLength funcionando pode ser encontrado [aqui](http://embed.plnkr.co/6KjgXFTEAnQq9GgWbbDB).
   *  <pre>
   *    <form name="myForm">
   *      <input type="date" name="maxLength" ng-model="maxLength" gumga-max-length="20" id="maxLength">
   *      <p ng-show="myForm.maxLength.$error.maxlength" class="text-danger">Tamanho superior ao esperado</p>
   *    </form>
   *  </pre>
   */
   MaxLength.$inject = [];
   function MaxLength() {
    return {
      restrict: 'A',
      require: 'ngModel',
      link: function (scope, elm, attr, ctrl) {
        if (!attr.gumgaMaxLength) {
          throw "O valor da diretiva gumga-max-length não foi informado.";
        }
        var validateMaxLength = function (inputValue) {
          var input = (inputValue == undefined) ? -1 : inputValue.length;
          var max = attr.gumgaMaxLength;
          var isValid = input <= max && input != -1;
					// if (isValid) console.log(isValid);
          ctrl.$setValidity('maxlength', isValid);
          return inputValue;
        };
        ctrl.$parsers.unshift(validateMaxLength);
        ctrl.$formatters.push(validateMaxLength);
        attr.$observe('gumgaMaxLength', function () {
          validateMaxLength(ctrl.$viewValue);
        });
      }
    }
  }
  angular.module('gumga.directives.form.max.length',[])
  .directive('gumgaMaxLength',MaxLength);
})();

(function(){
	'use strict';
  /**
   * @ngdoc directive
   * @name gumga.core:gumgaMaxNumber
   * @element input
   * @restrict A
   * @scope false
   * @description O componente GumgaMaxNumber serve para validar números máximos em entradas de formulários.
   *
   * ## Nota
   * Esta diretiva suporta apenas **inputs** do tipo **number**. O valor do atributo/diretiva é **obrigatório** e deve ser um **número**.
   *
   * @example
   *  Um exemplo da directive GumgaMaxNumber funcionando pode ser encontrado [aqui](http://embed.plnkr.co/IKifBxWz5i5obkVAmuxI).
   *  <pre>
   *    <form name="myForm">
   *      <input type="number" name="maxNumber" ng-model="maxNumber" gumga-max-number="20">
   *      <p ng-show="myForm.maxNumber.$error.maxnumber" class="text-danger">Número superior ao esperado</p>
   *    </form>
   *  </pre>
   */
   MaxNumber.$inject = [];
   function MaxNumber() {
     return {
      restrict: 'A',
      require: 'ngModel',
      link: function (scope, elm, attr, ctrl) {
       if (attr.type != 'number') {
        throw 'Esta diretiva suporta apenas inputs do tipo number';
      }
      if (!attr.gumgaMaxNumber) {
        throw "O valor da diretiva gumga-max-number não foi informado.";
      }
      var validateMaxNumber = function (inputValue) {
        var input = parseInt(inputValue);
        var max = parseInt(attr.gumgaMaxNumber);
        var isValid = input <= max;
        ctrl.$setValidity('maxnumber', isValid);
        return inputValue;
      };
      ctrl.$parsers.unshift(validateMaxNumber);
      ctrl.$formatters.push(validateMaxNumber);
      attr.$observe('gumgaMaxNumber', function () {
        validateMaxNumber(ctrl.$viewValue);
      });

      scope.$on('clearFields',function(event, data) {
       ctrl.$modelValue = null;
       console.log('directive date clear');
					// console.log(elm);
					// console.log();
				});
    }
  }
}
angular.module('gumga.directives.form.max.number',[])
.directive('gumgaMaxNumber',MaxNumber);
})();

(function(){
	'use strict';
  /**
   * @ngdoc directive
   * @name gumga.core:gumgaMinDate
   * @element input
   * @restrict A
   * @description O componente GumgaMinDate serve para validar datas mínimas em entradas de formulários.
   * 
   * ## Nota
   * Esta diretiva suporta apenas **inputs** do tipo **date**. O valor do atributo/diretiva é **obrigatório** e deve ser uma **data**.
   *
   * @example
   *  Um exemplo da directive GumgaMinDate funcionando pode ser encontrado [aqui](http://embed.plnkr.co/GZr9ml0fTkK1Zrlh985F).
   *  <pre>
   *    <form name="myForm">
   *      <input type="date" name="minDate" ng-model="minDate" gumga-min-date="2015-07-20">
   *      <p ng-show="myForm.minDate.$error.mindate" class="text-danger">Data inferior a esperada</p>
   *    </form>
   *  </pre>
  */
	 MinDate.$inject = ["$filter"];
	 function MinDate($filter) {
	 	return {
	 		restrict: 'A',
	 		require: 'ngModel',
	 		link: function (scope, elm, attr, ctrl) {
	 			if (attr.type != 'date') {
	 				throw 'Esta diretiva suporta apenas inputs do tipo date';
	 			}
	 			if (!attr.gumgaMinDate) {
	 				throw "O valor da diretiva gumga-min-date não foi informado.";
	 			}
        // if (!GumgaDateService.validateFormat('YMD', attr.gumgaMinDate)) {
        //   throw 'O valor da diretiva não corresponde ao formato yyyy-mm-dd';
        // }
        var validateMinDate = function (inputValue) {
					var format = 'yyyy-MM-dd';
					var input = $filter('date')(inputValue, format);
					var min = $filter('date')(attr.gumgaMinDate, format);
					var isValid = input >= min;
					ctrl.$setValidity('mindate', isValid);
					return inputValue;
				};
				ctrl.$parsers.unshift(validateMinDate);
				ctrl.$formatters.push(validateMinDate);
				attr.$observe('gumgaMinDate', function () {
					validateMinDate(ctrl.$viewValue);
				});
			}
		}
	}
	angular.module('gumga.directives.form.min.date',[])
	.directive('gumgaMinDate',MinDate);
})();

(function(){
	'use strict';
  /**
   * @ngdoc directive
   * @name gumga.core:gumgaMinLength
   * @element input
   * @restrict A
   * @description O componente GumgaMinLength serve para validar quantidades mínimas de caracteres em entradas de formulários.
   * 
   * ## Nota
   * O valor do atributo/diretiva é **obrigatório** e deve ser um **número**.
   *
   * @example
   *  Um exemplo da directive GumgaMinLength funcionando pode ser encontrado [aqui](http://embed.plnkr.co/ENXymH2Drgw3MDPJ9dli).
   *  <pre>
   *    <form name="myForm">
   *      <input type="date" name="minLength" ng-model="minLength" gumga-min-length="20" id="minLength">
   *      <p ng-show="myForm.minLength.$error.minlength" class="text-danger">Tamanho inferior ao esperado</p>
   *    </form>
   *  </pre>
  */
	MinLength.$inject = [];
	function MinLength() {
    return {
      restrict: 'A',
      require: 'ngModel',
      link: function (scope, elm, attr, ctrl) {
        if (!attr.gumgaMinLength) {
          throw "O valor da diretiva gumga-min-length não foi informado.";
        }
        var validateMinLength = function (inputValue) {
          var input = (inputValue == undefined) ? -1 : inputValue.length;
          var min = attr.gumgaMinLength;
          var isValid = input >= min;
          ctrl.$setValidity('minlength', isValid);
          return inputValue;
        };
	 			ctrl.$parsers.unshift(validateMinLength);
	 			ctrl.$formatters.push(validateMinLength);
	 			attr.$observe('gumgaMinLength', function () {
	 				validateMinLength(ctrl.$viewValue);
	 			});
	 		}
	 	}
	 }
	 angular.module('gumga.directives.form.min.length',[])
	 .directive('gumgaMinLength',MinLength);
	})();

(function(){
	'use strict';
  /**
   * @ngdoc directive
   * @name gumga.core:gumgaMinNumber
   * @element input
   * @restrict A
   * @description O componente GumgaMinNumber serve para validar números mínimos para entradas em formulários.
   *
   * ## Nota
   * Esta diretiva suporta apenas **inputs** do tipo **number**. O valor do atributo/diretiva é **obrigatório** e deve ser um **número**.
   *
   * @example
   *  Um exemplo da directive GumgaMinNumber funcionando pode ser encontrado [aqui](http://embed.plnkr.co/GsMxY6QFES1rRktFCWsX).
   *  <pre>
   *    <form name="myForm">
   *      <input type="number" name="minNumber" ng-model="minNumber" gumga-min-number="20">
   *      <p ng-show="myForm.minNumber.$error.minnumber" class="text-danger">Número inferior ao esperado</p>
   *    </form>
   *  </pre>
  */
	 MinNumber.$inject = [];
	 function MinNumber() {
	 	return {
	 		restrict: 'A',
	 		require: 'ngModel',
	 		link: function (scope, elm, attr, ctrl) {
	 			if (attr.type != 'number') {
	 				throw 'Esta diretiva suporta apenas inputs do tipo number';
	 			}
	 			if (!attr.gumgaMinNumber) {
	 				throw "O valor da diretiva gumga-min-number não foi informado.";
	 			}
	 			var validateMinNumber = function (inputValue) {
	 				var input = parseInt(inputValue);
	 				var min = parseInt(attr.gumgaMinNumber);
	 				var isValid = input >= min;
	 				ctrl.$setValidity('minnumber', isValid);
	 				return inputValue;
	 			};
	 			ctrl.$parsers.unshift(validateMinNumber);
	 			ctrl.$formatters.push(validateMinNumber);
	 			attr.$observe('gumgaMinNumber', function () {
	 				validateMinNumber(ctrl.$viewValue);
	 			});
	 		}
	 	}
	 }
	 angular.module('gumga.directives.form.min.number',[])
	 .directive('gumgaMinNumber',MinNumber);
	})();

(function(){
	'use strict';
  /**
   * @ngdoc directive
   * @name gumga.core:gumgaPattern
   * @element input
   * @restrict A
   * @description O componente GumgaPattern serve para validar expressões regulares de formulários.
   * 
   * ## Nota
   * O valor do atributo/diretiva é **obrigatório** e deve ser uma **expressão regular**.
   *
   * @example
   *  Um exemplo da directive GumgaPattern funcionando pode ser encontrado [aqui](http://embed.plnkr.co/rYRDHYIWwi5nz8YKwGaw).
   *  <pre>
   *    <form name="myForm">
   *      <input type="text" name="cep" ng-model="cep" gumga-pattern="(\d{5})\-(\d{3})" id="cep" placeholder="99999-999">
   *      <p ng-show="myForm.cep.$error.pattern" class="text-danger">Expressão não corresponde com o formato esperado</p>
   *    </form>
   *  </pre>
  */
	Pattern.$inject = [];
  function Pattern() {
    return {
			restrict: 'A',
	 		require: 'ngModel',
      link: function (scope, elm, attr, ctrl) {
				if (!attr.gumgaPattern) {
					throw "O valor da diretiva gumga-pattern não foi informado.";
				}
				var validatePattern = function (inputValue) {
					var regex = new RegExp('^' + attr.gumgaPattern + '$');
					var isValid = regex.test(inputValue);
					ctrl.$setValidity('pattern', isValid);
					return inputValue;
				};
				ctrl.$parsers.unshift(validatePattern);
				ctrl.$formatters.push(validatePattern);
				attr.$observe('gumgaPattern', function () {
					validatePattern(ctrl.$viewValue);
				});
      }
    }
  }
  angular.module('gumga.directives.form.pattern',[])
  .directive('gumgaPattern',Pattern);
})();

(function(){
	'use strict';
  /**
   * @ngdoc directive
   * @name gumga.core:gumgaRangeDate
   * @restrict A
   * @element input
   * @description
	 * O componente GumgaRangeDate serve para validar datas mínimas e máximas para entradas em formulários com campos do tipo date.
   *
   * ## Nota
   * O valor do atributo/diretiva é **obrigatório** e deve ser um **objeto** contendo duas propriedades, **min** e **max** 
   * com os valores de suas respectivas datas para execução da validação range.
   *
   * ## Exemplo
   * Um exemplo da directive GumgaRangeDate funcionando pode ser encontrado [aqui](http://embed.plnkr.co/OGu2toHUi5pBSPx4D5OU).
   *
   * @example
   *  <pre>
   *    <form name="myForm">
   *      <input type="date" name="rangeDate" ng-model="rangeDate" gumga-range-date="{min: '1986-12-29', max: '2015-07-20'}" id="rangedate">
   *      <p ng-show="myForm.cep.$error.rangedate" class="text-danger">A data informada não está entre os valores esperados</p>
   *    </form>
   *  </pre>
	 */
	 RangeDate.$inject = ["$filter"];
	 function RangeDate($filter) {
	 	return {
	 		restrict: 'A',
	 		require: 'ngModel',
	 		link: function (scope, elm, attr, ctrl) {
	 			if (attr.type != 'date') {
	 				throw 'Esta diretiva suporta apenas inputs do tipo date';
	 			}
	 			if (!attr.gumgaRangeDate) {
	 				throw "O valor da diretiva gumga-range-date não foi informado.";
	 			}
        // if (!GumgaDateService.validateFormat('YMD', attr.gumgaMaxDate)) {
        //   throw 'O valor da diretiva não corresponde ao formato yyyy-mm-dd';
        // }
        var validateRangeDate = function (inputValue) {
          var format = 'yyyy-MM-dd';
          var range = scope.$eval(attr.gumgaRangeDate);
        	var input = $filter('date')(inputValue, format);
          var min = $filter('date')(range.min, format);
        	var max = $filter('date')(range.max, format);
        	var isValid = input >= min && input <= max;
        	ctrl.$setValidity('rangedate', isValid);
        	return inputValue;
        };
        ctrl.$parsers.unshift(validateRangeDate);
        ctrl.$formatters.push(validateRangeDate);
        attr.$observe('gumgaRangeDate', function () {
        	validateRangeDate(ctrl.$viewValue);
        });
      }
    }
  }
  angular.module('gumga.directives.form.range.date',[])
  .directive('gumgaRangeDate',RangeDate);
})();

(function(){
	'use strict';
  /**
   * @ngdoc directive
   * @name gumga.core:gumgaRangeNumber
   * @restrict A
   * @element input
   * @description
	 * O componente GumgaRangeNumber serve para validar números mínimos e máximos em entradas de formulários com campos do tipo number.
   *
   * ## Nota
   * O valor do atributo/diretiva é **obrigatório** e deve ser um **objeto** contendo duas propriedades, **min** e **max** 
   * com os valores de suas respectivas datas para execução da validação range.
   *
   * ## Exemplo
   * Um exemplo da directive GumgaRangeNumber funcionando pode ser encontrado [aqui](http://embed.plnkr.co/uu6wvzmWlYgc7ThG4j4f).
   *
   * @example
   *  <pre>
   *    <form name="myForm">
   *      <input type="date" name="rangeNumber" ng-model="rangeNumber" gumga-number-date="{min: 0, max: 20}">
   *      <p ng-show="myForm.rangeNumber.$error.rangenumber" class="text-danger">O número informado não está entre os valores esperados</p>
   *    </form>
   *  </pre>
	 */
	 RangeNumber.$inject = [];
	 function RangeNumber() {
	 	return {
	 		restrict: 'A',
	 		require: 'ngModel',
	 		link: function (scope, elm, attr, ctrl) {
	 			if (attr.type != 'number') {
	 				throw 'Esta diretiva suporta apenas inputs do tipo number';
	 			}
	 			if (!attr.gumgaRangeNumber) {
	 				throw "O valor da diretiva gumga-range-number não foi informado.";
	 			}
	 			var validateRangeNumber = function (inputValue) {
          var range = scope.$eval(attr.gumgaRangeNumber);
          var input = parseInt(inputValue);
          var isValid = input >= range.min && input <= range.max;
          ctrl.$setValidity('rangenumber', isValid);
	 				return inputValue;
	 			};
	 			ctrl.$parsers.unshift(validateRangeNumber);
	 			ctrl.$formatters.push(validateRangeNumber);
	 			attr.$observe('gumgaRangeNumber', function () {
	 				validateRangeNumber(ctrl.$viewValue);
	 			});
	 		}
	 	}
	 }
	 angular.module('gumga.directives.form.range.number',[])
	 .directive('gumgaRangeNumber',RangeNumber);
	})();

(function(){
  'use strict';
  /**
   * @ngdoc directive
   * @name gumga.core:gumgaRequired
   * @restrict A
   * @element ANY
   * @description
   * O componente GumgaRequired serve para validar campos obrigatórios.
   *
   * ## Exemplo
   * Um exemplo da directive GumgaRequired funcionando pode ser encontrado [aqui](http://embed.plnkr.co/iznjjYkg3tjGSVH5LAOs).
   *
   * @example
   *  <pre>
   *    <form name="myForm">
   *      <input type="text" name="required" ng-model="required" gumga-required>
   *      <p ng-show="myForm.required.$error.required" class="text-danger">Campo obrigatório</p>
   *    </form>
   *  </pre>
   */
  Required.$inject = [];
  function Required() {
    return {
      restrict: 'A',
      require: 'ngModel',
      link: function (scope, elm, attr, ctrl) {
        attr.required = true;
        ctrl.$validators.required = function(modelValue, viewValue) {
          return !attr.required || !ctrl.$isEmpty(viewValue);
        };
      }
    }
  }
  angular.module('gumga.directives.form.required',[])
  .directive('gumgaRequired',Required);
})();

(function(){
	'use strict';
	
	AdvancedLabel.$inject = [];
	function AdvancedLabel(){
		var template =
		'<div class="btn-group">' +
		'   <button class="btn btn-default btn-xs" id="btn{{attr}}" ng-click="orOrAnd(value)"><strong>{{attr}}</strong> {{hql}} <strong>{{value}}</strong></button>' +
		'   <button class="btn btn-default btn-xs" ng-click="emitDelete()" ng-if="getVisibility(value)"><span aria-hidden="true">&times;</span></button>' +
		'</div>';

		return {
			restrict: 'E',
			template: template,
			scope: {
				attr: '@',
				hql: '@',
				value: '=',
				index: '='
			},
			link: function(scope,$elm,$attrs){
				scope.bol = false;

				scope.orOrAnd = function(){

					if(typeof scope.value === 'string' && scope.value.toUpperCase() === 'OR' && !scope.hql){
						scope.value = 'AND';
					}   else  if(scope.value.toUpperCase() === 'AND' && !scope.hql){
						scope.value = 'OR';
					}
				};

				scope.emitDelete = function(){
					scope.$emit('deletepls',scope.index);
				};


				scope.getVisibility = function(val){
					return !(val == 'AND' || val == 'OR');
				}
			}
		};
	}
	angular.module('gumga.directives.search.advancedlabel',[])
	.directive('gumgaAdvancedLabel',AdvancedLabel)
})();
(function(){
	'use strict';

	AdvancedSearch.$inject = ["GumgaSearchHelper"];
	function AdvancedSearch(GumgaSearchHelper){
		var template =
		'   <div class="input-group">' +
		'       <input type="text" ng-model="searchInputText" class="form-control" ng-disabled="isPanelOpen" id="textMain"/> ' +
		'       <span class="input-group-btn">' +
		'           <button class="my-button btn-default" ng-click="showLittlePanel = !showLittlePanel"><span class="glyphicon glyphicon-chevron-down"></span></button>' +
		'           <button class="my-button btn-default" type="button" ng-click="isPanelOpen = !isPanelOpen"><span class="glyphicon glyphicon-filter"></span>' +
		'           <button class="my-button btn-primary last" type="button" ng-disabled="isPanelOpen" ng-click="doSearch(searchInputText)">Search <span class="glyphicon glyphicon-search"></span>' +
		'       </span>' +
		'   </div>' +
		'   <div class="panel-advanced" ng-show="isPanelOpen">' +
		'       <div class="panel-body">' +
		'           <div class="col-md-3">' +
		'           <h3 style="margin-top: 0;margin-bottom: 0"><small>Advanced Search</small></h3>' +
		'           </div>' +
		'           <div class="form-inline col-md-9">' +
		'               <div class="form-group">' +
		'                   <div class="list-holder">' +
		'                           <ul class="list-selectable" ng-show="selectAttribute">\n' +
		'                               <li ng-repeat="attr in attributes" ng-click="attributeHasChanged(attr)" class="hover-list"><button class="btn btn-link">{{attr.name}}</button></li>\n' +
		'                           </ul>\n' +
		'                       </div>' +
		'                       <button type=button class="btn btn-default" ng-click="selectAttribute = !selectAttribute" >{{query.attribute.name || \'Attribute\'}}<span class="caret"></span></button>' +
		'                      <div class="list-holder">' +
		'                           <ul class="list-selectable" ng-show="selectHQL">\n' +
		'                               <li ng-repeat="opt in hqlOpts" class="hover-list" ng-click="handleHqlOption(opt)"><button class="btn btn-link" >{{opt.label}}</button></li>\n' +
		'                           </ul>\n' +
		'                       </div>' +
		'                    <button type="button" class="btn btn-default" ng-click="selectHQL = !selectHQL"> {{ query.hql.label || \'HQL\'  }} <span class="caret"></span></button>  '+
		'                   <input type="{{typeInput}}" class="form-control col-x-3" ng-model="query.value" id="selectableAdvancedValue" ng-init="input = this"/>' +
		'                   <button type="button" class="btn btn-default" ng-click="addQuery(query)" ng-disabled="query.value.length > 0 ? false : true"><span class="glyphicon glyphicon-plus"></span></button>' +
		'               </div>' +
		'           </div>' +
		'       </div>'+
		'           <hr/>' +
		'       <div class="col-md-12" style="padding-bottom: 2%">' +
		'       <gumga-advanced-label ng-repeat="query in queries" attr="{{query.attribute.name}}" hql="{{query.hql.label}}" value="query.value" index="$index" style="margin-right: 1%"></gumga-advanced-label>' +
		'       <div class="col-md-12" style="margin-top: 1%;">' +
		'       <button class="btn btn-primary pull-right" type="button" ng-disabled="queries.length == 0" ng-click="showArray(queries)">Advanced Search<span class="glyphicon glyphicon-search"></span>' +
		'       </div>' +
		'       </div>' +
		'       <div class="clearfix" style="margin-bottom: 2%"></div>' +
		'   </div>' +
		'<div class="little-panel" ng-show="showLittlePanel">' +
		'   <div class="panel-body">' +
		'       <label ng-repeat="field in normalFields" style="display: block" ><input type="checkbox" ng-model="models[field.value]" style="margin-right: 1%" ><span>{{field.value}}</span></label>' +
		'   </div>' +
		'</div>';
		return {
			restrict: 'E',
			template: template,
			scope: false,
			require: '^?gumgaSearch',
			link: function(scope,elm,attrs,ctrl){
				scope.isPanelOpen = false;
				scope.selectHQL = false;
				scope.models = {};
				scope.searchField = '';
				scope.translate = scope.$parent.entityToTranslate;

				scope.$on('_doSearch',function(){
					if(scope.queries.length != 0){
						scope.showArray(scope.queries);
					} else {
						if(scope.searchInputText){
							scope.doSearch(scope.searchInputText);
						}
					}
				});

				scope.$on('_focus',function(){
					if(scope.isPanelOpen){
						document.getElementById('selectableAdvancedValue').focus();
					} else {
						document.getElementById('textMain').focus();
					}
				});



				if(!scope.$parent.normalFields.length > 0 || !scope.$parent.entityToTranslate){
					throw 'Missing some parameters in GumgaSearch';
				}

				scope.normalFields = scope.$parent.normalFields.map(function(elm,$index){
					scope.models[elm] = false;
					$index == 0 && (scope.models[elm] = true);
					return {
						name: elm.slice(0,1).toUpperCase() + elm.slice(1,elm.length).toLowerCase(),
						value: elm
					};
				});


				scope.$on('showPanel',function(){
					scope.isPanelOpen = !scope.isPanelOpen;
					scope.$apply();
				});

				scope.models.returnString = function(){
					var txt = '';
					for(var key in this) if(this.hasOwnProperty(key) && key != 'returnString' && this[key]){
						txt += key + ',';
					}
					if(txt.length == 0){
						return scope.normalFields[0].value;
					}
					return txt.slice(0,-1);
				};

				scope.$watch('isPanelOpen',function(){
					if(scope.isPanelOpen === true){
						scope.selectAttribute = true;
					} else {
						scope.queries = [];
					}
					scope.query = {};
				});
				scope.attributes = scope.$parent.attributes;
				scope.hqlOpts = [];
				scope.queries = [];

				scope.attributeHasChanged = function(attribute) {
					scope.query.attribute = attribute;
					if(attribute.type === 'date'){
						scope.typeInput = 'date';
					} else {
						scope.typeInput = 'text';
					}
					scope.hqlOpts = GumgaSearchHelper.getTypeListOfHQLPossibilities(attribute.type);
					scope.selectHQL = true ;
					scope.selectAttribute = false;
				};

				scope.handleHqlOption = function(hq){
					scope.query.hql = hq;
					// document.getElementById('selectableAdvancedValue').focus();
					scope.selectHQL = false;
				};

				angular.element(document.getElementById('selectableAdvancedValue'))
				.on('keydown',function(ev){
					if(ev.keyCode == 13 && ev.target.value.length > 0){
						scope.addQuery(scope.query);
					}
					scope.$apply();
				});

				angular.element(document.getElementById('textMain'))
				.on('keydown',function(ev){
					if(ev.keyCode == 13 && ev.target.value.length > 0){
						scope.$emit('normal',{field: scope.models.returnString(),param:scope.searchInputText || ''});
						if(scope.showLittlePanel){
							scope.showLittlePanel = !scope.showLittlePanel;
						}
					}
				});

				scope.addQuery = function(query){
					if(scope.queries.length === 0){
						scope.queries.push(query);
					} else if(scope.queries.length >= 1){
						scope.queries.splice(scope.queries.length,1,{value: 'AND'},query);
					}
					scope.query = {};
					scope.typeInput = 'text';
				};

				scope.$on('deletepls',function(ev,data){
					scope.queries.splice(data,1);
				});

				scope.showArray = function(array){
					scope.isPanelOpen = false;
					scope.$emit('advanced',GumgaSearchHelper.translateArrayToHQL(array));
				};

				scope.doSearch = function(txt){
					scope.$emit('normal',{field: scope.models.returnString(),param:txt || ''});
					scope.searchInputText = '';
				};
			}
		};
	}
	angular.module('gumga.directives.search.advancedsearch',['gumga.directives.search.searchhelper'])
	.directive('gumgaAdvancedSearch',AdvancedSearch)
})();

(function(){
	'use strict';
	
	NormalSearch.$inject = [];
	function NormalSearch(){
		var template =
		'<div class="input-group">' +
		'   <input type="text" class="form-control" ng-model="searchField" placeholder="Search"/>' +
		'   <span class="input-group-btn">' +
		'       <button class="my-button btn-default" ng-click="showLittlePanel = !showLittlePanel"><span class="glyphicon glyphicon-chevron-down"></span></button>' +
		'       <button class="my-button btn-primary last" type="button" ng-disabled="!searchField" ng-click="doSearch(searchField)" >Search <span class="glyphicon glyphicon-search"></span></button>' +
		'   </span>' +
		'</div>' +
		'<div class="little-panel" ng-show="showLittlePanel">' +
		'   <div class="panel-body">' +
		'       <label ng-repeat="field in normalFields" style="display: block" ><input type="checkbox" ng-model="models[field.value]" style="margin-right: 1%" ><span>{{field.value}}</span></label>' +
		'   </div>' +
		'</div>';
		return {
			restrict: 'E',
			template: template,
			link: function(scope,elm,attrs){
				if(!scope.$parent.normalFields.length > 0 || !scope.$parent.entityToTranslate){
					throw 'Missing some parameters in GumgaSearch';
				}
				scope.models = {};
				scope.searchField = '';
				scope.translate = scope.$parent.entityToTranslate;
				scope.normalFields = scope.$parent.normalFields.map(function(elm,$index){
					scope.models[elm] = false;
					$index == 0 && (scope.models[elm] = true);
					return {
						name: elm.slice(0,1).toUpperCase() + elm.slice(1,elm.length).toLowerCase(),
						value: elm
					};
				});

				scope.models.returnString = function(){
					var txt = '';
					for(var key in this) if(this.hasOwnProperty(key) && key != 'returnString' && this[key]){
						txt += key + ',';
					}
					if(txt.length == 0){
						return scope.normalFields[0].value;
					}
					return txt.slice(0,-1);
				};

				elm.find('input')
				.bind('keypress',function(ev){
					if(ev.keyCode == 13 && scope.searchField.length > 0){
						scope.$emit('normal',{field: scope.models.returnString(),param:scope.searchField});
						if(scope.showLittlePanel){
							scope.showLittlePanel = !scope.showLittlePanel;
						}
					}
				});

				scope.doSearch = function(txt){
					scope.$emit('normal',{field: scope.models.returnString(),param:txt || ''});
					scope.showLittlePanel = !scope.showLittlePanel;
					scope.searchField = '';
				};

			}
		};
	}
	angular.module('gumga.directives.search.normalsearch',[])
	.directive('gumgaNormalSearch',NormalSearch)
})();
(function(){
	'use strict';
	
	Search.$inject = [];
	function Search(){
		var template =
		'<div class="full-width-without-padding">' +
		'     <div ng-if="!adv">' +
		'         <gumga-normal-search></gumga-normal-search>' +
		'     </div>' +
		'     <div ng-if="adv">' +
		'         <gumga-advanced-search></gumga-advanced-search>' +
		'     </div>' +
		'</div>';
		return {
			restrict: 'E',
			template: template,
			transclude: true,
			scope : {
				advanced: '&advancedMethod',
				normal: '&searchMethod',
				onSearch: '&',
				onAdvancedSearch: '&'
			},
			link: function(scope,elm,attrs,controller,transcludeFn){
				scope.adv = false;
				scope.attributes = [];
				scope.normalFields = attrs.fields.split(',');
				scope.entityToTranslate = attrs.translateEntity;
				var eventHandler = {
					search: attrs.onSearch ? scope.onSearch : angular.noop,
					advanced: attrs.onAdvancedSearch ? scope.onAdvancedSearch : angular.noop
				}
				if(attrs.advanced === "true"){
					scope.adv = true;
				}

				scope.getAttributes = function (){
					transcludeFn(function(clone){
						angular.forEach(clone,function(cloneEl){
							if(cloneEl.nodeName == 'ADVANCED-FIELD'){
								scope.attributes.push({
									name: cloneEl.getAttribute('name'),
									type: cloneEl.getAttribute('type')
								});
							}
						});
					});
				};

				scope.$on('advanced',function(ev,data){
					scope.advanced({param: data});
					eventHandler.search();
	              //ev.stopPropagation() || angular.noop;
	            });

				scope.$on('normal',function(ev,data){
					scope.normal({field: data.field,param: data.param});
					eventHandler.advanced()
	              //ev.stopPropagation() || angular.noop;
	            });

				scope.getAttributes();
			}
		};
	}
	angular.module('gumga.directives.search.search',[])
	.directive('gumgaSearch',Search)
})();
(function(){
	'use strict';
	
	SearchHelper.$inject = [];
	function SearchHelper(){
		var types ={
			"string": {
				"HQLPossibilities": [
				{hql:"eq",label: "igual" , before: "='",after:"'"},
				{hql:"ne",label: "diferente de" , before: "!='",after:"'"},
				{hql: "contains",label: "contém" , before: " like '\%",after:"\%'"},
				{hql: "not_contains",label:"não contém" , before: " not like '\%",after:"\%'"},
				{hql: "starts_with",label:"começa com" , before: "like '",after:"\%'"},
				{hql: "ends_with",label: "termina com" , before: "like '\%",after:"'"},
				{hql: "ge",label:"maior igual" , before: ">='",after:"'"},
				{hql: "le",label: "menor igual" , before: "<='",after:"'"}]
			},
			"number": {
				"HQLPossibilities": [
				{hql:"eq",label: "igual", before: "=",after:""},
				{hql:"ne",label: "diferente de", before: "!=",after:""},
				{hql: "gt",label:"maior que", before: ">",after:""},
				{hql: "ge",label:"maior igual", before: ">=",after:""},
				{hql: "lt",label:"menor que", before: "<",after:""},
				{hql: "le",label:"maior igual", before: "<=",after:""}]
			},
			"money": {
				"HQLPossibilities": [
				{hql:"eq",label: "igual", before: "=",after:""},
				{hql:"ne",label: "diferente de", before: "!=",after:""},
				{hql: "gt",label:"maior que", before: ">",after:""},
				{hql: "ge",label:"maior igual", before: ">=",after:""},
				{hql: "lt",label:"menor que", before: "<",after:""},
				{hql: "le",label:"maior igual", before: "<=",after:""}]

			},
			"boolean": {
				"HQLPossibilities": [{hql:"eq",label: "igual" , before: "='",after:"'"}]
			},
			"date": {
				"HQLPossibilities": [
				{hql: "eq", label: "igual", before: "='", after: "'"},
				{hql: "ge", label: "maior igual", before: ">='", after: "'"},
				{hql: "le", label: "menor igual", before: "<='", after: "'"}]
			}
		};
		return {
			getTypeListOfHQLPossibilities: function(type){
				if(angular.isDefined(types[type]))
					return types[type].HQLPossibilities;
				throw 'Type doesn\'t exist';
			},
			translateArrayToHQL: function(array){
				return array
				.map(function(element) {
					return (
						(angular.isDefined(element.attribute) ? 'obj.' + element.attribute.name : '!')
						+ '' +
						(angular.isDefined(element.hql) ? element.hql.before : ' !')
						+ '' +
						element.value
						+ (angular.isDefined(element.hql) ? element.hql.after : ' !') );
				}).map(function(element){
					if(element.indexOf('!') != -1){
						return element.replace(/!/g,'');
					}
					return element;
				}).join("");
			}
		};
	}
	angular.module('gumga.directives.search.searchhelper',[])
	.factory('GumgaSearchHelper',SearchHelper)
})();
(function(){
	'use strict';
	Translate.$inject = ["$http", "TranslateHelper"];
	function Translate($http,TranslateHelper){
		var ch = 0;
		return {
			restrict: 'AEC',
			scope: false,
			link: function($scope,$elm,$attrs){
				var language = $attrs.gumgaTranslate.toLowerCase() || navigator.language.toLowerCase();
				if(!TranslateHelper.getSessionStorageItem(language)){
					$http.get('./i18n/' + language + '.json')
					.success(function(values){
						TranslateHelper.setTranslators(language,values);
					});
				}

			}
		};
	}

	angular.module('gumga.directives.translate.translate',['gumga.directives.translate.translatehelper'])
	.directive('gumgaTranslate',Translate);
})();
(function(){
	'use strict';

	function TranslateHelper(){
		return {
			getSessionStorageItem: function(key){
				var g = window.sessionStorage.getItem(key);
				if(!g){
					return null;
				}
				try {
					angular.fromJson(g);
				}catch(e){
					return g;
				}
				this.translators = angular.fromJson(angular.fromJson(g));
				return angular.fromJson(angular.fromJson(g));
			},
			translators: {},
			setTranslators: function(language,obj){
				this.translators = obj;
				this.setSessionStorageItem(language,JSON.stringify(obj));
			},
			setSessionStorageItem: function(key,value){
				window.sessionStorage.setItem(key,angular.toJson(value));
			},
			returnTranslation: function(string){
				var array = string.split('.');
				try {
					return this.translators[array[0].toLowerCase().trim()][array[1].toLowerCase().trim()];
				} catch(e){}
			}
		};
	}

	angular.module('gumga.directives.translate.translatehelper',[])
	.factory('TranslateHelper',TranslateHelper);

})();

(function(){
  'use strict';
  TranslateTag.$inject = ["TranslateHelper", "$compile"];
  function TranslateTag(TranslateHelper,$compile){
    var child;
    return {
      restrict: 'A',
      link: function(scope,elm,attrs){
        if(!attrs.gumgaTranslateTag) throw 'You must pass a valid value to gumgaTranslateTag';
        if(TranslateHelper.returnTranslation(attrs.gumgaTranslateTag)){
          if(elm[0].childNodes.length > 0){
            scope.child = elm[0].childNodes[0];
            elm[0].innerHTML =  TranslateHelper.returnTranslation(attrs.gumgaTranslateTag);
            elm.append($compile(scope.child)(scope));
          } else {
            elm[0].innerHTML = TranslateHelper.returnTranslation(attrs.gumgaTranslateTag);
          }
        }
      }

    };
  }

  angular.module('gumga.directives.translate.translatetag',['gumga.directives.translate.translatehelper'])
  .directive('gumgaTranslateTag',TranslateTag);
})();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIiwiY29udHJvbGxlcnMvbW9kdWxlLmpzIiwiZGlyZWN0aXZlcy9tb2R1bGUuanMiLCJzZXJ2aWNlcy9tb2R1bGUuanMiLCJkaXJlY3RpdmVzL0FkZHJlc3MvQWRkcmVzcy5qcyIsImRpcmVjdGl2ZXMvQWxlcnQvQWxlcnQuanMiLCJkaXJlY3RpdmVzL0JyZWFkY3J1bWIvQnJlYWRjcnVtYi5qcyIsImRpcmVjdGl2ZXMvQ291bnRlci9Db3VudGVyLmpzIiwiZGlyZWN0aXZlcy9Gb3JtL21vZHVsZS5qcyIsImRpcmVjdGl2ZXMvRm9ybUJ1dHRvbnMvRm9ybUJ1dHRvbnMuanMiLCJkaXJlY3RpdmVzL0xvZ2luL0xvZ2luLmpzIiwiZGlyZWN0aXZlcy9NYW55VG9NYW55L01hbnlUb01hbnkuanMiLCJkaXJlY3RpdmVzL01hbnlUb09uZS9NYW55VG9PbmUuanMiLCJkaXJlY3RpdmVzL01hcHMvTWFwcy5qcyIsImRpcmVjdGl2ZXMvTWVudS9NZW51LmpzIiwiZGlyZWN0aXZlcy9PbmVUb01hbnkvT25lVG9NYW55LmpzIiwiZGlyZWN0aXZlcy9TZWFyY2gvbW9kdWxlLmpzIiwiZGlyZWN0aXZlcy9OYXYvTmF2LmpzIiwiZGlyZWN0aXZlcy9UYWJsZS9UYWJsZS5qcyIsImRpcmVjdGl2ZXMvVHJhbnNsYXRlL1RyYW5zbGF0ZS5qcyIsImRpcmVjdGl2ZXMvVHJhbnNsYXRlL1RyYW5zbGF0ZVRhZy5qcyIsImRpcmVjdGl2ZXMvVHJhbnNsYXRlL21vZHVsZS5qcyIsImRpcmVjdGl2ZXMvVXBsb2FkL1VwbG9hZC5qcyIsInNlcnZpY2VzL0FkZHJlc3NTZXJ2aWNlL0FkZHJlc3NTZXJ2aWNlLmpzIiwic2VydmljZXMvQWxlcnQvQWxlcnQuanMiLCJzZXJ2aWNlcy9CYXNlL0Jhc2UuanMiLCJzZXJ2aWNlcy9Ccm9hZGNhc3Rlci9Ccm9hZGNhc3Rlci5qcyIsInNlcnZpY2VzL0RhdGUvRGF0ZS5qcyIsInNlcnZpY2VzL0tleWJvYXJkL0tleWJvYXJkLmpzIiwic2VydmljZXMvTm90aWZpY2F0aW9uL05vdGlmaWNhdGlvbi5qcyIsInNlcnZpY2VzL1BvcHVsYXRlUHJvdmlkZXIvUG9wdWxhdGVQcm92aWRlci5qcyIsInNlcnZpY2VzL1Jlc3QvUmVzdC5qcyIsInNlcnZpY2VzL1RyYW5zbGF0ZS9UcmFuc2xhdGUuanMiLCJzZXJ2aWNlcy9UcmFuc2xhdGUvVHJhbnNsYXRlSGVscGVyLmpzIiwic2VydmljZXMvVXRpbHMvVXRpbHMuanMiLCJzZXJ2aWNlcy9XZWJTdG9yYWdlL1dlYlN0b3JhZ2UuanMiLCJkaXJlY3RpdmVzL0Zvcm0vRXJyb3JzL0Vycm9ycy5qcyIsImRpcmVjdGl2ZXMvRm9ybS9Gb3JtL0Zvcm0uanMiLCJkaXJlY3RpdmVzL0Zvcm0vTWF4L0RhdGUuanMiLCJkaXJlY3RpdmVzL0Zvcm0vTWF4L0xlbmd0aC5qcyIsImRpcmVjdGl2ZXMvRm9ybS9NYXgvTnVtYmVyLmpzIiwiZGlyZWN0aXZlcy9Gb3JtL01pbi9EYXRlLmpzIiwiZGlyZWN0aXZlcy9Gb3JtL01pbi9MZW5ndGguanMiLCJkaXJlY3RpdmVzL0Zvcm0vTWluL051bWJlci5qcyIsImRpcmVjdGl2ZXMvRm9ybS9QYXR0ZXJuL1BhdHRlcm4uanMiLCJkaXJlY3RpdmVzL0Zvcm0vUmFuZ2UvRGF0ZS5qcyIsImRpcmVjdGl2ZXMvRm9ybS9SYW5nZS9OdW1iZXIuanMiLCJkaXJlY3RpdmVzL0Zvcm0vUmVxdWlyZWQvUmVxdWlyZWQuanMiLCJkaXJlY3RpdmVzL1NlYXJjaC9BZHZhbmNlZExhYmVsL0FkdmFuY2VkTGFiZWwuanMiLCJkaXJlY3RpdmVzL1NlYXJjaC9BZHZhbmNlZFNlYXJjaC9BZHZhbmNlZFNlYXJjaC5qcyIsImRpcmVjdGl2ZXMvU2VhcmNoL05vcm1hbFNlYXJjaC9Ob3JtYWxTZWFyY2guanMiLCJkaXJlY3RpdmVzL1NlYXJjaC9TZWFyY2gvU2VhcmNoLmpzIiwiZGlyZWN0aXZlcy9TZWFyY2gvU2VhcmNoSGVscGVyL1NlYXJjaEhlbHBlci5qcyIsImRpcmVjdGl2ZXMvVHJhbnNsYXRlL1RyYW5zbGF0ZS9UcmFuc2xhdGUuanMiLCJkaXJlY3RpdmVzL1RyYW5zbGF0ZS9UcmFuc2xhdGVIZWxwZXIvVHJhbnNsYXRlSGVscGVyLmpzIiwiZGlyZWN0aXZlcy9UcmFuc2xhdGUvVHJhbnNsYXRlVGFnL1RyYW5zbGF0ZVRhZy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3ZCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDYkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ2pKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDdEVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQzNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUN6Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNsR0E7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUN4UEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDckpBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUN4TkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDakhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUN4Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUM3TEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUN2WEE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUMxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNoSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDaENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNoSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDdktBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUN4QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ2xJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDclhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDaFBBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQzFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3ZDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUN6Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQzdKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNqQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3hGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQy9EQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNsREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDM0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUN2REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNoREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNuREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDL0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUM3REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3ZEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDckNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDN0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQy9MQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3JFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNwRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3pFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUN2QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUN2Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Imd1bWdhLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuYW5ndWxhci5tb2R1bGUoJ2d1bWdhLmNvcmUnLFxuXHRbJ2d1bWdhLnNlcnZpY2VzJyxcblx0J2d1bWdhLmNvbnRyb2xsZXJzJyxcblx0J2d1bWdhLmRpcmVjdGl2ZXMnXSk7XG4iLCIoZnVuY3Rpb24oKXtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdGFuZ3VsYXIubW9kdWxlKCdndW1nYS5jb250cm9sbGVycycsW10pO1xuXG59KSgpO1xuIiwiKGZ1bmN0aW9uKCl7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHRhbmd1bGFyLm1vZHVsZSgnZ3VtZ2EuZGlyZWN0aXZlcycsXG5cdFx0W1xuXHRcdCdndW1nYS5kaXJlY3RpdmVzLmFkZHJlc3MnLFxuXHRcdCdndW1nYS5kaXJlY3RpdmVzLmFsZXJ0Jyxcblx0XHQnZ3VtZ2EuZGlyZWN0aXZlcy5icmVhZGNydW1iJyxcblx0XHQnZ3VtZ2EuZGlyZWN0aXZlcy5jb3VudGVyJyxcblx0XHQnZ3VtZ2EuZGlyZWN0aXZlcy5mb3JtYnV0dG9ucycsXG5cdFx0J2d1bWdhLmRpcmVjdGl2ZXMubWFueXRvbWFueScsXG5cdFx0J2d1bWdhLmRpcmVjdGl2ZXMubWFueXRvb25lJyxcblx0XHQnZ3VtZ2EuZGlyZWN0aXZlcy5tZW51Jyxcblx0XHQnZ3VtZ2EuZGlyZWN0aXZlcy5uYXYnLFxuXHRcdCdndW1nYS5kaXJlY3RpdmVzLm9uZXRvbWFueScsXG5cdFx0J2d1bWdhLmRpcmVjdGl2ZXMuc2VhcmNoJyxcblx0XHQnZ3VtZ2EuZGlyZWN0aXZlcy50YWJsZScsXG5cdFx0J2d1bWdhLmRpcmVjdGl2ZXMudXBsb2FkJyxcblx0XHQnZ3VtZ2EuZGlyZWN0aXZlcy5mb3JtJyxcblx0XHQnZ3VtZ2EuZGlyZWN0aXZlcy50cmFuc2xhdGUnXG5cdFx0XSk7XG5cbn0pKCk7XG4iLCIoZnVuY3Rpb24oKXtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdGFuZ3VsYXIubW9kdWxlKCdndW1nYS5zZXJ2aWNlcycsW1xuXHRcdCdndW1nYS5zZXJ2aWNlcy5hZGRyZXNzJyxcblx0XHQnZ3VtZ2Euc2VydmljZXMua2V5Ym9hcmQnLFxuXHRcdCdndW1nYS5zZXJ2aWNlcy5iYXNlJyxcblx0XHQnZ3VtZ2Euc2VydmljZXMudXRpbHMnLFxuXHRcdCdndW1nYS5zZXJ2aWNlcy5hbGVydCcsXG5cdFx0J2d1bWdhLnNlcnZpY2VzLnRyYW5zbGF0ZScsXG5cdFx0J2d1bWdhLnNlcnZpY2VzLndlYnN0b3JhZ2UnXG5cdFx0XSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uKCl7XG5cdCd1c2Ugc3RyaWN0Jztcblx0LyoqXG5cdCAqIEBuZ2RvYyBkaXJlY3RpdmVcblx0ICogQG5hbWUgZ3VtZ2EuY29yZTpndW1nYUFkZHJlc3Ncblx0ICogQHJlc3RyaWN0IEVcblx0ICogQGRlc2NyaXB0aW9uIE8gY29tcG9uZW50ZSBHdW1nYUFkZHJlc3MgcmVjZWJlIHVtIG9iamV0byBxdWUgc2Vyw6EgcHJlZW5jaGlkbyBjb20gbyBlbmRlcmXDp28sIHF1ZSBwb2RlIHNlciBwZXNxdWlzYWRvIGF0cmF2w6lzIGRvIENFUCAoVXRpbGl6YW5kbyB1bSBXZWJTZXJ2aWNlIEdVTUdBKSxcblx0ICogb3UgcHJlZW5jaGlkbyBtYW51YWxtZW50ZSBwZWxvIHVzdcOhcmlvLiBFc3RlIG9iamV0byBkZSBlbnRyYWRhIHBvZGUgc2VyIHZhemlvIG91IHByZWZlcml2ZWxtZW50ZSBubyBmb3JtYXRvIGRvIG9iamV0byBHVU1HQS5cbiAgICAgICAqICMjIEV4ZW1wbG9cbiAgICAgICAqIFZlamEgdW0gZXhlbXBsbyBlbSBmdW5jaW9uYW1lbnRvIFthcXVpXShodHRwOi8vZW1iZWQucGxua3IuY28vN3Q5bVp0TGw5YlB1VmhtaWcwb0kvKS5cblx0ICogQHBhcmFtIHtPYmplY3R9IHZhbHVlIEF0cmlidXRvIG9icmlnYXTDs3JpbyBxdWUgaXLDoSBjb250ZXIgbyBub21lIGRvIG9iamV0byBubyAkc2NvcGUgbm8gcXVhbCBvcyB2YWxvcmVzIGRvIEVuZGVyZcOnbyBzZXLDo28gY29sb2NhZG9zLlxuXHQgKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBBdHJpYnV0byBvYnJpZ2F0w7NyaW8gZSDDum5pY28gcXVlIGlyw6EgY29udGVyIHVtIG5vbWUgZGUgaWRlbnRpZmljYWRvciBwYXJhIGEgZGlyZWN0aXZlLlxuXHQgKiBAcGFyYW0ge1N0cmluZ30gdGl0bGUgQXRyaWJ1dG8gb3BjaW9uYWwgcXVlIGlyw6EgY29udGVyIG8gdMOtdHVsbyBwYXJhIG8gcGFuZWwgZGEgZGlyZWN0aXZlLlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvblNlYXJjaENlcFN0YXJ0IEF0cmlidXRvIG9wY2lvbmFsIHF1ZSBpcsOhIGNvbnRlciBvIG5vbWUgZGUgdW1hIGZ1bsOnw6NvIHF1ZSBzZXLDoSBleGVjdXRhZGEgcXVhbmRvIGEgYnVzY2EgcGVsbyBDRVAgY29tZcOnYXIuXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IG9uU2VhcmNoQ2VwU3VjY2VzcyBBdHJpYnV0byBvcGNpb25hbCBxdWUgaXLDoSBjb250ZXIgbyBub21lIGRlIHVtYSBmdW7Dp8OjbyBxdWUgc2Vyw6EgZXhlY3V0YWRhIHF1YW5kbyBhIGJ1c2NhIHBlbG8gQ0VQIHJldG9ybmFyIHN1Y2Vzc28uXG4gICAgICAgKiAgUG9kZSBzZXIgY2hhbWFkYSBjb20gdW0gYXRyaWJ1dG8gY29tIG9zIHZhbG9yZXMgYG9uLXNlYXJjaC1jZXAtc3VjY2Vzcz1cImRvU29tZXRoaW5nKCR2YWx1ZSlcImBcblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gb25TZWFyY2hDZXBFcnJvciBBdHJpYnV0byBvcGNpb25hbCBxdWUgaXLDoSBjb250ZXIgbyBub21lIGRlIHVtYSBmdW7Dp8OjbyBxdWUgc2Vyw6EgZXhlY3V0YWRhIHF1YW5kbyBhIGJ1c2NhIHBlbG8gQ0VQIHJldG9ybmFyIGVycm8uXG4gICAgICAgKiAgUG9kZSBzZXIgY2hhbWFkYSBjb20gdW0gYXRyaWJ1dG8gY29tIG9zIHZhbG9yZXMgYG9uLXNlYXJjaC1jZXAtZXJyb3I9XCJkb1NvbWV0aGluZygkdmFsdWUpXCJgXG4gICAgICAqL1xuXHRBZGRyZXNzRGlyZWN0aXZlLiRpbmplY3QgPSBbXCJHdW1nYUFkZHJlc3NTZXJ2aWNlXCIsIFwiJGh0dHBcIl07XG4gICAgICBmdW5jdGlvbiBBZGRyZXNzRGlyZWN0aXZlKEd1bWdhQWRkcmVzc1NlcnZpY2UsJGh0dHApe1xuICAgICAgXHR2YXIgdGVtcGxhdGUgPSBbXG4gICAgICBcdCc8ZGl2IGNsYXNzPVwiYWRkcmVzc1wiIHN0eWxlPVwicGFkZGluZy1sZWZ0OiAwXCI+JyxcbiAgICAgIFx0JyAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTggY29sLXNtLTEyIGNvbC14cy0xMlwiIHN0eWxlPVwicGFkZGluZy1sZWZ0OiAwXCI+JyxcbiAgICAgIFx0JyAgICAgICAgICA8YWNjb3JkaW9uPicsXG4gICAgICBcdCcgICAgICAgICAgICAgICAgPGFjY29yZGlvbi1ncm91cCBzdHlsZT1cIm1hcmdpbi10b3A6IDElXCIgaXMtb3Blbj1cInRydWVcIiBoZWFkaW5nPVwie3s6OnRpdGxlfX1cIj4nLFxuICAgICAgXHQnICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTJcIj4nLFxuICAgICAgXHQnICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJpbnB1dHt7OjppZH19XCI+Q0VQPC9sYWJlbD4nLFxuICAgICAgXHQnICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cFwiPicsXG4gICAgICBcdCcgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBuZy1tb2RlbD1cInZhbHVlLnppcENvZGVcIiBpZD1cImlucHV0e3s6OmlkfX1cIiBuZy1rZXlwcmVzcz1cImN1c3RvbSgkZXZlbnQsdmFsdWUuemlwQ29kZSlcIj4nLFxuICAgICAgXHQnICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaW5wdXQtZ3JvdXAtYnRuXCI+JyxcbiAgICAgIFx0JyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgdHlwZT1cImJ1dHRvblwiIG5nLWNsaWNrPVwic2VhcmNoQ2VwKHZhbHVlLnppcENvZGUpXCIgbmctZGlzYWJsZWQ9XCJsb2FkZXJ7ezo6aWR9fVwiIGlkPVwiYnV0dG9uU2VhcmNoe3s6OmlkfX1cIj5TZWFyY2ggPGkgY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLXNlYXJjaFwiPjwvaT48L2J1dHRvbj4nLFxuICAgICAgXHQnICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4nLFxuICAgICAgXHQnICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PicsXG4gICAgICBcdCcgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+JyxcbiAgICAgIFx0JyAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTRcIj4nLFxuICAgICAgXHQnICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJ0aXBvTG9ncmFkb3Vyb1wiPjxzbWFsbD5UaXBvIExvZ3JhZG91cm88L3NtYWxsPjwvbGFiZWw+JyxcbiAgICAgIFx0JyAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJ2YWx1ZS5wcmVtaXNzZVR5cGVcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIG5nLW9wdGlvbnM9XCJsb2cgZm9yIGxvZyBpbiBmYWN0b3J5RGF0YS5sb2dzXCI+PC9zZWxlY3Q+JyxcbiAgICAgIFx0JyAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4nLFxuICAgICAgXHQnICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtNVwiIHN0eWxlPVwicGFkZGluZy1sZWZ0OiAwOyBwYWRkaW5nLXJpZ2h0OiAwXCI+JyxcbiAgICAgIFx0JyAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVwiTG9ncmFkb3Vyb1wiPjxzbWFsbD5Mb2dyYWRvdXJvPC9zbWFsbD48L2xhYmVsPicsXG4gICAgICBcdCcgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJ2YWx1ZS5wcmVtaXNzZVwiIGNsYXNzPVwiZm9ybS1jb250cm9sIGlkPVwib2lcIi8+JyxcbiAgICAgIFx0JyAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4nLFxuICAgICAgXHQnICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtM1wiPicsXG4gICAgICBcdCcgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cIk7Dum1lcm9cIj48c21hbGw+IE7Dum1lcm8gPC9zbWFsbD48L2xhYmVsPicsXG4gICAgICBcdCcgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJ2YWx1ZS5udW1iZXJcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIGlkPVwibnVtYmVySW5wdXR7ezo6aWR9fVwiLz4nLFxuICAgICAgXHQnICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PicsXG4gICAgICBcdCcgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMlwiPicsXG4gICAgICBcdCcgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cIkNvbXBsZW1lbnRvXCI+PHNtYWxsPkNvbXBsZW1lbnRvPC9zbWFsbD48L2xhYmVsPicsXG4gICAgICBcdCcgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJ2YWx1ZS5pbmZvcm1hdGlvblwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIvPicsXG4gICAgICBcdCcgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+JyxcbiAgICAgIFx0JyAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTdcIj4nLFxuICAgICAgXHQnICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJCYWlycm9cIj48c21hbGw+IEJhaXJybyA8L3NtYWxsPjwvbGFiZWw+JyxcbiAgICAgIFx0JyAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cInZhbHVlLm5laWdoYm91cmhvb2RcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiLz4nLFxuICAgICAgXHQnICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PicsXG4gICAgICBcdCcgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1tZC01XCI+JyxcbiAgICAgIFx0JyAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVwiTG9jYWxpZGFkZVwiPjxzbWFsbD4gTG9jYWxpZGFkZSA8L3NtYWxsPjwvbGFiZWw+JyxcbiAgICAgIFx0JyAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cInZhbHVlLmxvY2FsaXphdGlvblwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIvPicsXG4gICAgICBcdCcgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+JyxcbiAgICAgIFx0JyAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTRcIj4nLFxuICAgICAgXHQnICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJVRlwiPjxzbWFsbD4gVUYgPC9zbWFsbD48L2xhYmVsPicsXG4gICAgICBcdCcgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBuZy1tb2RlbD1cInZhbHVlLnN0YXRlXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBuZy1vcHRpb25zPVwidWYgZm9yIHVmIGluIGZhY3RvcnlEYXRhLnVmc1wiPjwvc2VsZWN0PicsXG4gICAgICBcdCcgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+JyxcbiAgICAgIFx0JyAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTRcIj4nLFxuICAgICAgXHQnICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJQYcOtc1wiPjxzbWFsbD4gUGHDrXMgPC9zbWFsbD48L2xhYmVsPicsXG4gICAgICBcdCcgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBuZy1tb2RlbD1cInZhbHVlLmNvdW50cnlcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIG5nLW9wdGlvbnM9XCJwYWlzIGZvciBwYWlzIGluIGZhY3RvcnlEYXRhLmF2YWlsYWJsZUNvdW50cmllc1wiPjwvc2VsZWN0PicsXG4gICAgICBcdCcgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+JyxcbiAgICAgIFx0JyAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTRcIiBzdHlsZT1cInBhZGRpbmctdG9wOiAyJVwiPicsXG4gICAgICBcdCcgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJidG4gYnRuLWRlZmF1bHQgcHVsbC1yaWdodFwiIG5nLWhyZWY9XCJ7e3JldHVybkxpbmsodmFsdWUpfX1cIiB0YXJnZXQ9XCJfYmxhbmtcIj5NYXBzIDxpIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1nbG9iZVwiPjwvaT48L2E+JyxcbiAgICAgIFx0JyAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4nLFxuICAgICAgXHQnICAgICAgICAgICAgICAgIDwvYWNjb3JkaW9uLWdyb3VwPicsXG4gICAgICBcdCcgICAgICAgICAgPC9hY2NvcmRpb24+JyxcbiAgICAgIFx0JyAgICA8L2Rpdj4nLFxuICAgICAgXHQnPC9kaXY+J107XG4gICAgICBcdHJldHVybiB7XG4gICAgICBcdFx0cmVzdHJpY3Q6ICdFJyxcbiAgICAgIFx0XHRzY29wZToge1xuICAgICAgXHRcdFx0dmFsdWU6ICc9JyxcbiAgICAgIFx0XHRcdG9uU2VhcmNoQ2VwU3RhcnQ6ICcmPycsXG4gICAgICBcdFx0XHRvblNlYXJjaENlcFN1Y2Nlc3M6ICcmPycsXG4gICAgICBcdFx0XHRvblNlYXJjaENlcEVycm9yOiAnJj8nXG4gICAgICBcdFx0fSxcbiAgICAgIFx0XHR0ZW1wbGF0ZTogdGVtcGxhdGUuam9pbignXFxuJyksXG4gICAgICBcdFx0bGluazogZnVuY3Rpb24gKHNjb3BlLCBlbG0sIGF0dHJzLCBjdHJsKSB7XG5cdFx0XHRcdFx0XHRmdW5jdGlvbiBpc0VtcHR5KG9iail7XG4gICAgXHRcdFx0XHRcdGZvcih2YXIga2V5IGluIG9iaikgaWYob2JqLmhhc093blByb3BlcnR5KGtleSkpe1xuICAgICAgICBcdFx0XHRcdHJldHVybiBmYWxzZTtcbiAgICBcdFx0XHRcdFx0fVxuICAgIFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0ICAgICAgICAgIGlmKGlzRW1wdHkoc2NvcGUudmFsdWUpKSBzY29wZS52YWx1ZSA9IEd1bWdhQWRkcmVzc1NlcnZpY2UucmV0dXJuRm9ybWF0dGVkT2JqZWN0KCk7XG5cdCAgICAgICAgICBpZighYXR0cnMubmFtZSkgdGhyb3cgXCLDiSBuZWNlc3PDoXJpbyBwYXNzYXIgdW0gcGFyw6JtZXRybyAnbmFtZScgY29tbyBpZGVudGlmaWNhZG9yIHBhcmEgR3VtZ2FBZGRyZXNzXCI7XG4gICAgICBcdFx0XHRzY29wZS50aXRsZSA9IGF0dHJzLnRpdGxlIHx8ICdFbmRlcmXDp28nO1xuICAgICAgXHRcdFx0c2NvcGUuaWQgPSBhdHRycy5uYW1lO1xuICAgICAgXHRcdFx0c2NvcGVbJ2xvYWRlcicgKyBzY29wZS5pZF0gPSBmYWxzZTtcbiAgICAgICAgICAgIHNjb3BlLmZhY3RvcnlEYXRhID0ge1xuICAgICAgICAgICAgICAgIHVmczogR3VtZ2FBZGRyZXNzU2VydmljZS5ldmVyeVVmLFxuICAgICAgICAgICAgICAgIGxvZ3M6IEd1bWdhQWRkcmVzc1NlcnZpY2UuZXZlcnlMb2dyYWRvdXJvLFxuICAgICAgICAgICAgICAgIGF2YWlsYWJsZUNvdW50cmllczogR3VtZ2FBZGRyZXNzU2VydmljZS5hdmFpbGFibGVDb3VudHJpZXNcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgZXZlbnRIYW5kbGVyID0ge1xuICAgICAgICAgICAgICAgICAgc2VhcmNoQ2VwU3RhcnQ6IChhdHRycy5vblNlYXJjaENlcFN0YXJ0ID8gc2NvcGUub25TZWFyY2hDZXBTdGFydCA6IGFuZ3VsYXIubm9vcCksXG4gICAgICAgICAgICAgICAgICBzZWFyY2hDZXBTdWNjZXNzOiAoYXR0cnMub25TZWFyY2hDZXBTdWNjZXNzID8gc2NvcGUub25TZWFyY2hDZXBTdWNjZXNzIDogYW5ndWxhci5ub29wKSxcbiAgICAgICAgICAgICAgICAgIHNlYXJjaENlcEVycm9yOiAoYXR0cnMub25TZWFyY2hDZXBFcnJvciA/IHNjb3BlLm9uU2VhcmNoQ2VwRXJyb3I6IGFuZ3VsYXIubm9vcClcbiAgICAgICAgICAgIH07XG4gICAgICBcdFx0XHRzY29wZS5jdXN0b20gPSBmdW5jdGlvbiAoJGV2ZW50LCBjZXApIHtcbiAgICAgICAgICAgICAgJGV2ZW50LmNoYXJDb2RlID09IDEzPyBzY29wZS5zZWFyY2hDZXAoY2VwKSA6IGFuZ3VsYXIubm9vcDtcbiAgICAgIFx0XHRcdH07XG5cbiAgICAgIFx0XHRcdHNjb3BlLnJldHVybkxpbmsgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIFx0XHRcdFx0aWYgKCF2YWx1ZS5udW1iZXIpIHtcbiAgICAgIFx0XHRcdFx0XHR2YWx1ZS5udW1iZXIgPSAnJztcbiAgICAgIFx0XHRcdFx0fVxuICAgICAgXHRcdFx0XHRyZXR1cm4gJ2h0dHBzOi8vd3d3Lmdvb2dsZS5jb20uYnIvbWFwcy9wbGFjZS8nICsgdmFsdWUucHJlbWlzc2VUeXBlICsgJyAnICsgdmFsdWUucHJlbWlzc2UgKyAnLCcgKyB2YWx1ZS5udW1iZXIrICcsJyArIHZhbHVlLmxvY2FsaXphdGlvbjtcbiAgICAgIFx0XHRcdH07XG4gICAgICBcdFx0XHRzY29wZS5zZWFyY2hDZXAgPSBmdW5jdGlvbiAoY2VwKSB7XG4gICAgICBcdFx0XHRcdHNjb3BlWydsb2FkZXInICsgc2NvcGUuaWRdID0gdHJ1ZTtcbiAgICAgIFx0XHRcdFx0ZXZlbnRIYW5kbGVyLnNlYXJjaENlcFN0YXJ0KCk7XG4gICAgICBcdFx0XHRcdCRodHRwLmdldCgnaHR0cDovL3d3dy5ndW1nYS5jb20uYnIvc2VydmljZXMtYXBpL3B1YmxpYy9jZXAvJytjZXApXG4gICAgICBcdFx0XHRcdC5zdWNjZXNzKGZ1bmN0aW9uICh2YWx1ZXMpIHtcbiAgICAgIFx0XHRcdFx0XHRldmVudEhhbmRsZXIuc2VhcmNoQ2VwU3VjY2Vzcyh7JHZhbHVlOiB2YWx1ZXN9KTtcbiAgICAgIFx0XHRcdFx0XHRzY29wZVsnbG9hZGVyJyArIHNjb3BlLmlkXSA9IGZhbHNlO1xuICAgICAgXHRcdFx0XHRcdGlmIChwYXJzZUludCh2YWx1ZXMucmVzdWx0YWRvKSA9PSAxKSB7XG4gICAgICBcdFx0XHRcdFx0XHRzY29wZS52YWx1ZS5wcmVtaXNzZVR5cGUgPSB2YWx1ZXMudGlwb19sb2dyYWRvdXJvO1xuICAgICAgXHRcdFx0XHRcdFx0c2NvcGUudmFsdWUucHJlbWlzc2UgPSB2YWx1ZXMubG9ncmFkb3VybztcbiAgICAgIFx0XHRcdFx0XHRcdHNjb3BlLnZhbHVlLmxvY2FsaXphdGlvbiA9IHZhbHVlcy5jaWRhZGU7XG4gICAgICBcdFx0XHRcdFx0XHRzY29wZS52YWx1ZS5uZWlnaGJvdXJob29kID0gdmFsdWVzLmJhaXJybztcbiAgICAgIFx0XHRcdFx0XHRcdHNjb3BlLnZhbHVlLnN0YXRlID0gdmFsdWVzLnVmO1xuICAgICAgXHRcdFx0XHRcdFx0c2NvcGUudmFsdWUuY291bnRyeSA9ICdCcmFzaWwnO1xuICAgICAgXHRcdFx0XHRcdH1cblxuICAgICAgXHRcdFx0XHR9KVxuICAgICAgXHRcdFx0XHQuZXJyb3IoZnVuY3Rpb24oZGF0YSl7XG4gICAgICBcdFx0XHRcdFx0ZXZlbnRIYW5kbGVyLnNlYXJjaENlcEVycm9yKHskdmFsdWU6IGRhdGF9KTtcbiAgICAgIFx0XHRcdFx0fSlcbiAgICAgIFx0XHRcdH07XG4gICAgICBcdFx0XHRpZiAoc2NvcGUudmFsdWUuemlwQ29kZSkge1xuICAgICAgXHRcdFx0XHRzY29wZS5zZWFyY2hDZXAoc2NvcGUudmFsdWUuemlwQ29kZSk7XG4gICAgICBcdFx0XHR9XG4gICAgICBcdFx0fVxuICAgICAgXHR9O1xuICAgICAgfVxuICAgICAgYW5ndWxhci5tb2R1bGUoJ2d1bWdhLmRpcmVjdGl2ZXMuYWRkcmVzcycsWydndW1nYS5zZXJ2aWNlcy5hZGRyZXNzJ10pXG4gICAgICAuZGlyZWN0aXZlKCdndW1nYUFkZHJlc3MnLEFkZHJlc3NEaXJlY3RpdmUpO1xuICAgIH0pKCk7XG4iLCIoZnVuY3Rpb24oKXtcblx0J3VzZSBzdHJpY3QnO1xuXHQvKipcblx0ICogQG5nZG9jIGRpcmVjdGl2ZVxuXHQgKiBAbmFtZSBndW1nYS5jb3JlOmd1bWdhQWxlcnRcblx0ICogQHJlc3RyaWN0IEVBXG5cdCAqIEBlbGVtZW50IEFOWVxuXHQgKiBAZGVzY3JpcHRpb24gTyBjb21wb25lbnRlIGd1bWdhQWxlcnQgc2VydmUgcGFyYSBjcmlhciBub3RpZmljYcOnw7VlcyBncm93bC1saWtlIGUgw6kgYmFzZWFkYSBlbSBldmVudG9zLlxuXHQgKiBQYXJhIG8gZnVuY2lvbmFtZW50byBkYSBkaXJlY3RpdmUsIMOpIG5lY2Vzc8OhcmlvIGluY2x1w60tbGEgYXBlbmFzIHVtYSB2ZXogbm8gc2V1IGPDs2RpZ28gaHRtbCAoZGUgcHJlZmVyw6puY2lhIG5vIGluZGV4Lmh0bWwpLFxuXHQgKiBwYXJhIHF1ZSBvcyBsaXN0ZW5lcnMgc2VqYW0gYWRpY2lvbmFkb3MoQXR1YWxtZW50ZSwgbmEgbm92YSB2ZXJzw6NvIGlzdG8gbsOjbyDDqSBtYWlzIG5lY2Vzc8OhcmlvLCB2ZXIge0BsaW5rIGd1bWdhLmNvcmU6R3VtZ2FBbGVydH0pLiBcblx0ICpcblx0ICogQGV4YW1wbGVcblx0ICogIyMgUGFyYSBxdWUgbyBhbGVydGEgc2VqYSByZWFsaXphZG8sIHV0aWxpemUgdW0gZG9zIGV2ZW50b3M6XG5cdCAqIDxwcmU+XG5cdCAqIFx0JHNjb3BlLiRlbWl0KCdkYW5nZXJNZXNzYWdlJyx7dGl0bGU6ICdFcnJvcicgLG1lc3NhZ2U6ICdFcnJvciA0MDQnfSk7XG5cdCAqIFx0JHNjb3BlLiRlbWl0KCdzdWNjZXNzTWVzc2FnZScse3RpdGxlOiAnUGFyYWLDqW5zIScgLG1lc3NhZ2U6ICdTdWEgc29saWNpdGHDp8OjbyBmb2kgYWNlaXRhIGNvbSBzdWNlc3NvISd9KTtcblx0ICogICRzY29wZS4kZW1pdCgnd2FybmluZ01lc3NhZ2UnLHt0aXRsZTogJ0N1aWRhZG8hJyAsbWVzc2FnZTogJ0Egw6FyZWEgcXVlIHZvY8OqIGVzdMOhIGVudHJhbmRvIMOpIHJlc3RyaXRhLid9KTtcbiAgICogXHQkc2NvcGUuJGVtaXQoJ2luZm9NZXNzYWdlJyx7dGl0bGU6ICdTYWx2YXInICxtZXNzYWdlOiAnUGFyYSBzYWx2YXIsIGVudHJlIGVtIGNvbnRhdG8gY29tIG8gYWRtaW5pc3RyYWRvci4nfSk7XG5cdCAqIDwvcHJlPlxuXHQgKiAgUGFyYSB2ZXIgdW0gZXhlbXBsbyBlbSBmdW5jaW9uYW1lbnRvLCBjbGlxdWUgW2FxdWldKGh0dHA6Ly9lbWJlZC5wbG5rci5jby93ZGxJN1U0blFmOWtOaEdseUNmVS8pXG5cdCAqL1xuXHRBbGVydC4kaW5qZWN0ID0gW1wiJHJvb3RTY29wZVwiXTtcblx0ZnVuY3Rpb24gQWxlcnQoJHJvb3RTY29wZSl7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHJlc3RyaWN0OiAnRUEnLFxuXHRcdFx0c2NvcGU6IGZhbHNlLFxuXHRcdFx0Y29tcGlsZTogZnVuY3Rpb24oKXtcblx0XHRcdFx0ZnVuY3Rpb24gbm90aWZ5KGljb24sIHRpdGxlLCBtZXNzYWdlLCB0eXBlKSB7XG5cdFx0XHRcdFx0JC5ub3RpZnkoe1xuXHRcdFx0XHRcdFx0aWNvbjogaWNvbixcblx0XHRcdFx0XHRcdHRpdGxlOiB0aXRsZSxcblx0XHRcdFx0XHRcdG1lc3NhZ2U6IG1lc3NhZ2Vcblx0XHRcdFx0XHR9LCB7XG5cdFx0XHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRcdFx0b2Zmc2V0OiA1MCxcblx0XHRcdFx0XHRcdHRpbWVyOiAxMDAsXG5cdFx0XHRcdFx0XHRkZWxheTogMzUwMCxcblx0XHRcdFx0XHRcdG9uU2hvdzogJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdvbk5vdGlmaWNhdGlvblNob3cnKSxcblx0XHRcdFx0XHRcdG9uQ2xvc2U6ICRyb290U2NvcGUuJGJyb2FkY2FzdCgnb25Ob3RpZmljYXRpb25DbG9zZScpLFxuXHRcdFx0XHRcdFx0YWxsb3dfZGlzbWlzczogdHJ1ZSxcblx0XHRcdFx0XHRcdGFuaW1hdGU6IHtcblx0XHRcdFx0XHRcdFx0ZW50ZXI6ICdhbmltYXRlZCBib3VuY2VJblJpZ2h0Jyxcblx0XHRcdFx0XHRcdFx0ZXhpdDogJ2FuaW1hdGVkIGJvdW5jZU91dFJpZ2h0J1xuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdHRlbXBsYXRlOiAnPGRpdiBkYXRhLW5vdGlmeT1cImNvbnRhaW5lclwiIGNsYXNzPVwiY29sLXhzLTkgY29sLXNtLTMgYWxlcnQgYWxlcnQtezB9XCIgcm9sZT1cImFsZXJ0XCI+JyArXG5cdFx0XHRcdFx0XHQnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCIgY2xhc3M9XCJjbG9zZVwiIGRhdGEtbm90aWZ5PVwiZGlzbWlzc1wiPsOXPC9idXR0b24+JyArXG5cdFx0XHRcdFx0XHQnPHNwYW4gZGF0YS1ub3RpZnk9XCJpY29uXCI+PC9zcGFuPiAnICtcblx0XHRcdFx0XHRcdCc8c3BhbiBkYXRhLW5vdGlmeT1cInRpdGxlXCI+PGI+ezF9PC9iPjwvc3Bhbj48YnI+ICcgK1xuXHRcdFx0XHRcdFx0JzxzcGFuIGRhdGEtbm90aWZ5PVwibWVzc2FnZVwiPnsyfTwvc3Bhbj4nICtcblx0XHRcdFx0XHRcdCc8L2Rpdj4nXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQkcm9vdFNjb3BlLiRvbignZGFuZ2VyTWVzc2FnZScsIGZ1bmN0aW9uIChldiwgZGF0YSkge1xuXHRcdFx0XHRcdG5vdGlmeSgnZ2x5cGhpY29uIGdseXBoaWNvbi1leGNsYW1hdGlvbi1zaWduJywgZGF0YS50aXRsZSwgZGF0YS5tZXNzYWdlLCAnZGFuZ2VyJyk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHQkcm9vdFNjb3BlLiRvbignc3VjY2Vzc01lc3NhZ2UnLCBmdW5jdGlvbiAoZXYsIGRhdGEpIHtcblx0XHRcdFx0XHRub3RpZnkoJ2dseXBoaWNvbiBnbHlwaGljb24tb2snLCBkYXRhLnRpdGxlLCBkYXRhLm1lc3NhZ2UsICdzdWNjZXNzJyk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHQkcm9vdFNjb3BlLiRvbignd2FybmluZ01lc3NhZ2UnLCBmdW5jdGlvbiAoZXYsIGRhdGEpIHtcblx0XHRcdFx0XHRub3RpZnkoJ2dseXBoaWNvbiBnbHlwaGljb24td2FybmluZy1zaWduJywgZGF0YS50aXRsZSwgZGF0YS5tZXNzYWdlLCAnd2FybmluZycpO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0JHJvb3RTY29wZS4kb24oJ2luZm9NZXNzYWdlJywgZnVuY3Rpb24gKGV2LCBkYXRhKSB7XG5cdFx0XHRcdFx0bm90aWZ5KCdnbHlwaGljb24gZ2x5cGhpY29uLWluZm8tc2lnbicsIGRhdGEudGl0bGUsIGRhdGEubWVzc2FnZSwgJ2luZm8nKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdGFuZ3VsYXIubW9kdWxlKCdndW1nYS5kaXJlY3RpdmVzLmFsZXJ0JyxbXSlcblx0LmRpcmVjdGl2ZSgnZ3VtZ2FBbGVydCcsQWxlcnQpO1xufSkoKTsiLCIoZnVuY3Rpb24oKXtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdEJyZWFkY3J1bWIuJGluamVjdCA9IFtcIiRyb290U2NvcGVcIl07XG5cdC8qKlxuXHQgKiBAbmdkb2MgZGlyZWN0aXZlXG5cdCAqIEBuYW1lIGd1bWdhLmNvcmU6Z3VtZ2FCcmVhZGNydW1iXG5cdCAqIEByZXN0cmljdCBFXG5cdCAqIEBkZXNjcmlwdGlvbiBPIGNvbXBvbmVudGUgR3VtZ2FCcmVhZGNydW1iIHNlcnZlIHBhcmEgbW9zdHJhciBhbyB1c3XDoXJpbyBhIGxpc3RhIGRhcyBww6FnaW5hcyB2aXNpdGFkYXMuIEVzdGUgY29tcG9uZW50ZSBhdHVhbWVudGVcblx0ICogZnVuY2lvbmEgY2FzbyBleGlzdGEgZGVwZW5kw6puY2lhIGRvIFt1aS1yb3V0ZXJdKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyLXVpL3VpLXJvdXRlcikuXG5cdCAqIFxuXHQgKiBPIGNvbXBvbmVudGUgR3VtZ2FCcmVhZGNydW1iIG91dmUgYW8gZXZlbnRvIGBicmVhZENoYW5nZWRgLCBxdWUgcmVjZWJlIG9zIHN0YXRlcyBxdWUgZXN0w6NvIHNlbmRvIHZpc2l0YWRvcy4gVW1hIGRhcyBpbXBsZW1lbnRhw6fDtWVzIHBvc3PDrXZlaXMgcGFyYSBlc3NlXG5cdCAqIGV2ZW50byBicmVhZENoYW5nZWQgw6kgYSBzZWd1aW50ZTpcblx0ICogPHByZT5cblx0ICogJHJvb3RTY29wZS5icmVhZGNydW1icyA9IFtdO1xuICAgICAgJHJvb3RTY29wZS4kb24oJyRzdGF0ZUNoYW5nZVN1Y2Nlc3MnLCBmdW5jdGlvbiAoZXZlbnQsIHRvU3RhdGUpIHtcbiAgICAgICAgdXBkYXRlQnJlYWRjcnVtYih0b1N0YXRlLm5hbWUsIHRvU3RhdGUuZGF0YS5pZCk7XG4gICAgICB9KTtcbiAgICAgIGZ1bmN0aW9uIHVwZGF0ZUJyZWFkY3J1bWIoc3RhdGUsIGlkKSB7XG4gICAgICAgICAgZnVuY3Rpb24gZ2V0KGlkKSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSAkcm9vdFNjb3BlLmJyZWFkY3J1bWJzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoJHJvb3RTY29wZS5icmVhZGNydW1ic1tpXS5pZCA9PT0gaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaWQgJiYgZ2V0KGlkKSA+PSAwKSB7XG4gICAgICAgICAgICAgICRyb290U2NvcGUuYnJlYWRjcnVtYnMuc3BsaWNlKGdldChpZCksICRyb290U2NvcGUuYnJlYWRjcnVtYnMubGVuZ3RoIC0gZ2V0KGlkKSwge3N0YXRlOiBzdGF0ZSwgaWQ6IGlkfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgJHJvb3RTY29wZS5icmVhZGNydW1icy5wdXNoKHtzdGF0ZTogc3RhdGUsIGlkOiBpZH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICAhaWQgPyAkcm9vdFNjb3BlLmJyZWFkY3J1bWJzID0gW10gOiBhbmd1bGFyLm5vb3A7XG4gICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdicmVhZENoYW5nZWQnKTtcbiAgICAgIH1cblx0ICogPC9wcmU+IFxuXHQgKiBFc3RlIGPDs2RpZ28gZm9pIGNvbG9jYWRvIGRlbnRybyBkbyBgcnVuYCBkbyBtw7NkdWxvIHByaW5jaXBhbCBkYSBhcGxpY2HDp8Ojby5cblx0ICovXG5cblx0ZnVuY3Rpb24gQnJlYWRjcnVtYigkcm9vdFNjb3BlKXtcblx0XHR2YXIgdGVtcGxhdGUgPSBbXG5cdFx0JzxvbCBjbGFzcz1cImJyZWFkY3J1bWJcIj4nLFxuXHRcdCc8bGkgbmctcmVwZWF0PVwiYnJlYWQgaW4gYnJlYWRjcnVtYnNcIiA+PGEgdWktc3JlZj1cInt7OjpicmVhZC5zdGF0ZX19XCI+e3s6OmJyZWFkLnN0YXRlfX08L2E+PC9saT4nLFxuXHRcdCc8L29sPidcblx0XHRdO1xuXHRcdHJldHVybiB7XG5cdFx0XHRyZXN0cmljdDogJ0UnLFxuXHRcdFx0dGVtcGxhdGU6IHRlbXBsYXRlLmpvaW4oJ1xcbicpLFxuXHRcdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRcdGxpbms6IGZ1bmN0aW9uKCRzY29wZSwgJGVsbSwgJGF0dHJzKXtcblx0XHRcdFx0JHNjb3BlLiRvbignYnJlYWRDaGFuZ2VkJyxmdW5jdGlvbigpe1xuXHRcdFx0XHRcdCRzY29wZS5icmVhZGNydW1icyA9ICRyb290U2NvcGUuYnJlYWRjcnVtYnMuZmlsdGVyKGZ1bmN0aW9uKGUpe1xuXHRcdFx0XHRcdFx0cmV0dXJuIGUuc3RhdGUuc3BsaXQoJy4nKS5sZW5ndGggPj0yIDtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXHRhbmd1bGFyLm1vZHVsZSgnZ3VtZ2EuZGlyZWN0aXZlcy5icmVhZGNydW1iJyxbXSlcblx0LmRpcmVjdGl2ZSgnZ3VtZ2FCcmVhZGNydW1iJyxCcmVhZGNydW1iKTtcbn0pKCk7IiwiLy8gZGVmaW5lID0gUmVxdWlyZS5qc1xuKGZ1bmN0aW9uKCl7XG4gICd1c2Ugc3RyaWN0JztcblxuICAgIENvdW50ZXIuJGluamVjdCA9IFtcIiRjb21waWxlXCJdO1xuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgZGlyZWN0aXZlXG4gICAgICAgKiBAbmFtZSBndW1nYS5jb3JlOmd1bWdhQ291bnRlclxuICAgICAgICogQGVsZW1lbnQgaW5wdXRcbiAgICAgICAqIEBkZXNjcmlwdGlvbiBPIGNvbXBvbmVudGUgZ3VtZ2FDb3VudGVyIHBlcm1pdGUgZXNjb2xoZXIgdW0gdGFtYW5obyBtw6F4aW1vIHBlcm1pdGlkbyBubyBjYW1wbywgdGFtYsOpbSBjcmlhIHVtIGNvbnRhZG9yIGRlIGNhcmFjdGVyZXMgaW5kaWNhbmRvIHNlIG9zIGNhcmFjdGVyZXNcbiAgICAgICAqIHBhc3NhcmFtIGRvIGxpbWl0ZSBvdSBuw6NvLiBcbiAgICAgICAqIFxuICAgICAgICogQ2FzbyB1bSB2YWxvciBzZWphIHBhc3NhZG8gcGFyYSBhIGRpcmVjdGl2ZSwgZWxhIGF0dWFsaXphcsOhIG8gY29udGFkb3IgYmFzZWFkbyBuZXNzZSBuw7ptZXJvLiBDYXNvIG7Do28sIGVsYSBwZWdhcsOhIG8gdmFsb3JcbiAgICAgICAqIHBhc3NhZG8gcGFyYSBhIGRpcmVjdGl2ZSB7QGxpbmsgZ3VtZ2EuY29yZTpndW1nYU1heExlbmd0aH1cbiAgICAgICAqIFxuICAgICAgICogQGV4YW1wbGVcbiAgICAgICAqICBVbSBleGVtcGxvIGRhIGRpcmVjdGl2ZSBndW1nYUNvdW50ZXIgZnVuY2lvbmFuZG8gcG9kZSBzZXIgZW5jb250cmFkbyBbYXF1aV0oaHR0cDovL2VtYmVkLnBsbmtyLmNvLzZ4SnVVdWlJNDU2a3FiWE4zUTZmLykuXG4gICAgICAgKiA8cHJlPlxuICAgICAgICogPGlucHV0IG5hbWU9XCJleGFtcGxlXCIgbmctbW9kZWw9XCJleGFtcGxlXCIgZ3VtZ2EtY291bnRlcj1cIjE1XCIgLz5cbiAgICAgICAqIDwvcHJlPlxuICAgICAgKi9cblxuICAgICAgZnVuY3Rpb24gQ291bnRlcigkY29tcGlsZSl7XG4gICAgICAgICAgICByZXR1cm57XG4gICAgICAgICAgICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgICAgICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW0sIGF0dHJzKSB7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLl9tYXggPSBwYXJzZUludChhdHRycy5ndW1nYU1heExlbmd0aFRleHQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKHBhcnNlSW50KGF0dHJzLmd1bWdhQ291bnRlcikpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5fbWF4ID0gcGFyc2VJbnQoYXR0cnMuZ3VtZ2FDb3VudGVyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgdGVtcGxhdGUgPSAnPHAgY2xhc3M9XCJ7e19tYXggPD0gdGVzdGUubGVuZ3RoID8gXFwndGV4dC1kYW5nZXJcXCcgOiBcXCd0ZXh0LW11dGVkXFwnfX1cIj57e19tYXggPD0gJysgYXR0cnMubmdNb2RlbCArJy5sZW5ndGggPyBcIlZvY8OqIHBhc3NvdSBvIGxpbWl0ZSBkZSAnK3Njb3BlLl9tYXgrJyBjYXJhY3RlcmVzXCIgOiBfbWF4IC0gJysgYXR0cnMubmdNb2RlbCArJy5sZW5ndGggKyBcIiBjYXJhY3RlcmVzIHJlc3RhbnRlc1wiIH19PC9wPic7XG4gICAgICAgICAgICAgICAgICAgIGVsZW0uYWZ0ZXIoJGNvbXBpbGUodGVtcGxhdGUpKHNjb3BlKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgYW5ndWxhci5tb2R1bGUoJ2d1bWdhLmRpcmVjdGl2ZXMuY291bnRlcicsIFtdKVxuICAgICAgICAuZGlyZWN0aXZlKCdndW1nYUNvdW50ZXInLCBDb3VudGVyKTtcblxuXG59KSgpO1xuIiwiKGZ1bmN0aW9uICgpIHtcblxuXG4gIGFuZ3VsYXIubW9kdWxlKCdndW1nYS5kaXJlY3RpdmVzLmZvcm0nLFtcbiAgICAnZ3VtZ2EuZGlyZWN0aXZlcy5mb3JtLmZvcm0nLFxuICAgICdndW1nYS5kaXJlY3RpdmVzLmZvcm0ubWF4LmRhdGUnLFxuICAgICdndW1nYS5kaXJlY3RpdmVzLmZvcm0ubWF4Lmxlbmd0aCcsXG4gICAgJ2d1bWdhLmRpcmVjdGl2ZXMuZm9ybS5tYXgubnVtYmVyJyxcbiAgICAnZ3VtZ2EuZGlyZWN0aXZlcy5mb3JtLm1pbi5kYXRlJyxcbiAgICAnZ3VtZ2EuZGlyZWN0aXZlcy5mb3JtLm1pbi5sZW5ndGgnLFxuICAgICdndW1nYS5kaXJlY3RpdmVzLmZvcm0ubWluLm51bWJlcicsXG4gICAgJ2d1bWdhLmRpcmVjdGl2ZXMuZm9ybS5wYXR0ZXJuJyxcbiAgICAnZ3VtZ2EuZGlyZWN0aXZlcy5mb3JtLnJhbmdlLmRhdGUnLFxuICAgICdndW1nYS5kaXJlY3RpdmVzLmZvcm0ucmFuZ2UubnVtYmVyJyxcbiAgICAnZ3VtZ2EuZGlyZWN0aXZlcy5mb3JtLnJlcXVpcmVkJyxcbiAgXSlcblxuXG59KSgpO1xuIiwiKGZ1bmN0aW9uKCl7XG5cdCd1c2Ugc3RyaWN0JztcbiAgICAvKipcbiAgICAgKiBAbmdkb2MgZGlyZWN0aXZlXG4gICAgICogQG5hbWUgZ3VtZ2EuY29yZTpndW1nYUZvcm1CdXR0b25zXG4gICAgICogQHJlc3RyaWN0IEVcbiAgICAgKiBAZGVzY3JpcHRpb24gTyBjb21wb25lbnRlIGd1bWdhRm9ybUJ1dHRvbnMgcG9kZSBzZXIgdXRpbGl6YWRvIHBhcmEgcXVhbmRvIG5lY2Vzc2l0ZSBkZSBib3TDtWVzIHBhcmEgbyBmb3JtdWzDoXJpbyxcbiAgICAgKiB0YW50byBkZSBjb250aW51YXIgaW5zZXJpbmRvLCBkZSBzYWx2YXIgZSByZXRyb2NlZGVyLlxuICAgICAqXG4gICAgICogIEBwYXJhbSB7RnVuY3Rpb259IHN1Ym1pdCBQYXLDom1ldHJvIG9icmlnYXTDs3JpbyBxdWUgY29udMOpbSB1bWEgZnVuw6fDo28gcXVlIHNlcsOhIGV4ZWN1dGFkYSBxdWFuZG8gbyBib3TDo28gZGUgY29udGludWFyIGZvciBjbGljYWRvLlxuICAgICAqICBAcGFyYW0ge2Jvb2xlYW59IHZhbGlkIFBhcsOibWV0cm8gb2JyaWdhdMOzcmlvIHF1ZSBpcsOhIGNvbnRlciB1bSB2YWxvciBib29sZWFubyBwYXJhIHZhbGlkYXIgY2FzbyBvIGZvcm11bMOhcmlvIMOpIHbDoWxpZG8gcGFyYSBsaWJlcmFyIG8gYm90w6NvIGRlIHNhbHZhci5cbiAgICAgKiAgQHBhcmFtIHtPYmplY3R9IGNvbnRpbnVlIE9iamVjdCBxdWUgZGV2ZXLDoSBjb250ZXIgdW0gYXRyaWJ1dG8gYm9vbGVhbm8gY2hhbWFkbyBgdmFsdWVgLCBwYXJhIGNvbnRyb2xhciBjYXNvIGNvbnRpbnVhcsOhIGluc2VyaW5kbyBvdSBuw6NvLiBFc3NhIFxuICAgICAqICBvcMOnw6NvIGFwYXJlY2Vyw6EgYXBlbmFzIHF1YW5kbyBvIG9iamV0byAkc3RhdGVQYXJhbXMocGVydGVuY2VudGUgYW8gdWktcm91dGVyKSBuw6NvIHBvc3N1aXIgdW0gaWQsIG91IHNlamEsIGNhc28gZXN0ZWphIG51bWEgdGVsYSBkZSBpbnNlcsOnw6NvLlxuICAgICAqICBAcGFyYW0ge2Jvb2xlYW59IGNvbmZpcm0tZGlydHkgUGFyw6JtZXRybyBuw6NvIG9icmlnYXTDs3JpbyBxdWUgaXLDoSBjb250ZXIgdW0gYm9vbGVhbm8gcGFyYSBpbmRpY2FyIGNhc28gZGVzZWplIHRlciB1bWEgY29uZmlybWHDp8OjbyBkZSBzYcOtZGEgZG8gZm9ybXVsw6FyaW9cbiAgICAgKiAgcXVhbmRvIGVzdGUgZm9pIGFsdGVyYWRvIGFsZ3VtYSB2ZXouXG4gICAgICovXG5cdEZvcm1CdXR0b25zLiRpbmplY3QgPSBbXCIkc3RhdGVcIiwgXCIkc3RhdGVQYXJhbXNcIiwgXCIkbW9kYWxcIiwgXCIkcm9vdFNjb3BlXCJdO1xuICAgIGZ1bmN0aW9uIEZvcm1CdXR0b25zKCRzdGF0ZSwgJHN0YXRlUGFyYW1zLCRtb2RhbCwkcm9vdFNjb3BlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgICAgICBkbzogJyZzdWJtaXQnLFxuICAgICAgICAgICAgICAgIHZhbGlkOiAnPScsXG4gICAgICAgICAgICAgICAgY29udGludWU6ICc9PycsXG4gICAgICAgICAgICAgICAgY29uZmlybURpcnR5OiAnPT8nXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGVtcGxhdGU6XG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cImZ1bGwtd2lkdGgtd2l0aG91dC1tYXJnaW5cIj4nK1xuICAgICAgICAgICAgJyAgIDxzY29wZT48L3Njb3BlPicrXG4gICAgICAgICAgICAnICAgPGRpdiBuZy1jbGFzcz1cImdldFBvc2l0aW9uKClcIj4nICtcbiAgICAgICAgICAgICcgICAgICAgPGxhYmVsIGlkPVwiY29udGludWFySW5zZXJpbmRvXCIgbmctaWY9XCJjb250aW51ZVwiID4nK1xuICAgICAgICAgICAgJyAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5hbWU9XCJjb250aW51YXJcIiBuZy1tb2RlbD1cImNvbnRpbnVlLnZhbHVlXCIvPicgK1xuICAgICAgICAgICAgJyAgICAgICAgICAgPHNwYW4+Q29udGludWFyIEluc2VyaW5kbzwvc3Bhbj4nK1xuICAgICAgICAgICAgJyAgICAgICA8L2xhYmVsPicgK1xuICAgICAgICAgICAgJyAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi13YXJuaW5nXCIgc3R5bGU9XCJtYXJnaW4tcmlnaHQ6IDAuOGVtXCIgbmctY2xpY2s9XCJiYWNrKClcIiB0eXBlPVwiYnV0dG9uXCI+PGkgY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLWZsb3BweS1yZW1vdmVcIj48L2k+IEJhY2s8L2J1dHRvbj4nICtcbiAgICAgICAgICAgICcgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIHN0eWxlPVwibWFyZ2luLXJpZ2h0OiAwXCIgbmctY2xpY2s9XCJkbygpXCIgbmctZGlzYWJsZWQ9XCIhdmFsaWRcIiB0eXBlPVwiYnV0dG9uXCI+PGkgY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLWZsb3BweS1zYXZlZFwiPjwvaT4gU2F2ZTwvYnV0dG9uPicgK1xuICAgICAgICAgICAgJyAgIDwvZGl2PicrXG4gICAgICAgICAgICAnPGRpdj4nLFxuICAgICAgICAgICAgcmVxdWlyZTogJ15mb3JtJyxcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxtLCBhdHRycywgY3RybCkge1xuICAgICAgICAgICAgICAgIGlmKCFhdHRycy5jb25maXJEaXJ0eSkgc2NvcGUuY29uZmlybURpcnR5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBpZighJHN0YXRlUGFyYW1zLmlkKSBzY29wZS5pbk5ldyA9IHRydWU7XG4gICAgICAgICAgICAgICAgaWYoIWF0dHJzLmNvbnRpbnVlKSBzY29wZS5jb250aW51ZSA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgc2NvcGUuZ2V0UG9zaXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhdHRycy5wb3NpdGlvbiA9PSAnbGVmdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAncHVsbC1sZWZ0JztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3B1bGwtcmlnaHQnO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBzY29wZS5iYWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZihzY29wZS5jb25maXJtRGlydHkgJiYgY3RybC4kZGlydHkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1vZGFsID0gJG1vZGFsLm9wZW4oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2PicrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgIDxzZWN0aW9uIGNsYXNzPVwibW9kYWwtYm9keVwiPicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgICAgICAgPGg0PkRlc2VqYSBzYWlyIHNlbSBzYWx2YXIgYXMgYWx0ZXJhw6fDtWVzPzwvaDQ+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgIDwvc2VjdGlvbj4nK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgICA8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+JytcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLWRlZmF1bHRcIiBuZy1jbGljaz1cImhhbmRsZUNsb3NlKGZhbHNlKVwiPk7Do288L2J1dHRvbj4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLWRlZmF1bHRcIiBuZy1jbGljaz1cImhhbmRsZUNsb3NlKHRydWUpXCI+U2ltPC9idXR0b24+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgIDwvZGl2PicrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzwvZGl2PicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2Ryb3A6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleWJvYXJkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFtcIiRzY29wZVwiLCBcIiRtb2RhbEluc3RhbmNlXCIsIFwiJHN0YXRlXCIsIFwiJHJvb3RTY29wZVwiLCBmdW5jdGlvbigkc2NvcGUsJG1vZGFsSW5zdGFuY2UsJHN0YXRlLCRyb290U2NvcGUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaGFuZGxlQ2xvc2UgPSBmdW5jdGlvbihfYm9vbGVhbil7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYm9vbGVhbiA/ICRtb2RhbEluc3RhbmNlLmNsb3NlKHRydWUpIDogJG1vZGFsSW5zdGFuY2UuY2xvc2UoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OyAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRzdGF0ZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY3VycmVudFN0YXRlID0kc3RhdGUuY3VycmVudC5uYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kb24oJyRzdGF0ZUNoYW5nZVN0YXJ0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbihldmVudCwgdG9TdGF0ZSwgdG9QYXJhbXMsIGZyb21TdGF0ZSwgZnJvbVBhcmFtcyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRtb2RhbEluc3RhbmNlLmRpc21pc3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfV1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWwucmVzdWx0LnRoZW4oZnVuY3Rpb24oc2hvdWxkSUdvKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihzaG91bGRJR28pe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3RhdGUuZ28oYXR0cnMuYmFjayk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzdGF0ZS5nbyhhdHRycy5iYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gXG4gICAgfVxuXG5hbmd1bGFyLm1vZHVsZSgnZ3VtZ2EuZGlyZWN0aXZlcy5mb3JtYnV0dG9ucycsWyd1aS5ib290c3RyYXAnLCd1aS5yb3V0ZXInXSlcbi5kaXJlY3RpdmUoJ2d1bWdhRm9ybUJ1dHRvbnMnLEZvcm1CdXR0b25zKTtcblxufSkoKTsiLCIiLCIoZnVuY3Rpb24oKXtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdE1hbnlNYW55LiRpbmplY3QgPSBbXCIkbW9kYWxcIiwgXCIkY29tcGlsZVwiLCBcIiR0aW1lb3V0XCJdO1xuXHQvKipcblx0ICogQG5nZG9jIGRpcmVjdGl2ZVxuXHQgKiBAbmFtZSBndW1nYS5jb3JlOmd1bWdhTWFueVRvTWFueVxuXHQgKiBAcmVzdHJpY3QgRVxuXHQgKiBAZGVzY3JpcHRpb24gXG5cdCAqIFx0TyBjb21wb25lbnRlIGd1bWdhTWFueVRvTWFueSDDqSB1bSBjb21wb25lbnRlIHF1ZSDDqSB1dGlsaXphZG8gcGFyYSBtb3N0cmFyIGR1YXMgbGlzdGFzIGxhZG8gYSBsYWRvLCBlIHBlcm1pdGlyIHF1ZSB1bSByZWdpc3RybyBzZWphIHRyb2NhZG8gZGUgdW1hIGxpc3RhIHBhcmEgb3V0cmEsXG5cdCAqIFx0YXNzaW0gY29tbyB0YW1iw6ltIHZpc3VhbGl6YWRvIG9zIHNldXMgdmFsb3JlcyhjYXNvIHNlamEgdW0gb2JqZXRvKS4gVW0gZXhlbXBsbyBkbyBjb21wb25lbnRlIHBvZGUgc2VyIGVuY29udHJhZG8gW2FxdWldKGh0dHA6Ly9lbWJlZC5wbG5rci5jby9neXJxQUtRUUd1RUh3cDJucHY4Ry8pLlxuXHQgKlxuXHQgKiAtLS1cblx0ICogIyMgQ29uZmlndXJhw6fDo28gZGUgY29tbyBzZXLDoSBtb3N0cmFkbyBvIHZhbG9yIG5hIGxpc3RhXG5cdCAqXG5cdCAqUGFyYSBxdWUgbyBwcm9ncmFtYWRvciBwb3NzYSBlc2NvbGhlciBjb21vIG9zIHZhbG9yZXMgc2Vyw6NvIGRlbW9uc3RyYWRvcywgZm9yw6NvIGRlc2Vudm9sdmlkYXMgZHVhcyB0YWdzIHF1ZSBkZXZlbSBlc3RhciBkZW50cm8gZG8gY29tcG9uZW50ZSBtYW55VG9NYW55LlxuXHQgKiBcdFx0PHByZT4gPGxlZnQtZmllbGQ+e3skdmFsdWV9fTwvbGVmdC1maWVsZD5cblx0ICogXHRcdDxsZWZ0LWZpZWxkPnt7JHZhbHVlfX08L2xlZnQtZmllbGQ+PC9wcmU+XG5cdCAqIFxuXHQgKiBAcGFyYW0ge0FycmF5fSBsZWZ0LWxpc3QgUGFyw6JtZXRybyBvYnJpZ2F0w7NyaW8gcXVlIGlyw6EgY29udGVyIHVtYSB2YXJpw6F2ZWwgcXVlIHBvc3N1aXLDoSB1bSBhcnJheSwgcGFyYSBzZXIgbW9zdHJhZG8gbmEgbGlzdGEgZGEgZXNxdWVyZGEuXG5cdCAqICAqQSBsaXN0YSBkYSBlc3F1ZXJkYSBzZXLDoSBmaWx0cmFkYSBlIG7Do28gY29udGVyw6EgcmVzdWx0YWRvcyBpZ3VhaXMgYSBkYSBsaXN0YSBkYSBkaXJlaXRhLipcblx0ICogQHBhcmFtIHtBcnJheX0gcmlnaHQtbGlzdCBQYXLDom1ldHJvIG9icmlnYXTDs3JpbyBxdWUgaXLDoSBjb250ZXIgdW1hIHZhcmnDoXZlbCBxdWUgcG9zc3VpcsOhIHVtIGFycmF5LCBwYXJhIHNlciBtb3N0cmFkbyBuYSBsaXN0YSBkYSBkaXJlaXRhLlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsZWZ0LXNlYXJjaCBQYXLDom1ldHJvIG9icmlnYXTDs3JpbyBxdWUgaXLDoSBjb250ZXIgdW1hIHZhcmnDoXZlbCBxdWUgcG9zc3VpcsOhIHVtYSBmdW7Dp8OjbyBxdWUgaXLDoSBzZXIgZXhlY3V0YWRhIHRvZGEgdmV6XG5cdCAqIHF1ZSBvIHVzdcOhcmlvIGRpZ2l0YXIgYWxnbyBubyBpbnB1dCBhY2ltYSBkYSBsaXN0YS4gRXNzYSBmdW7Dp8OjbyB0ZXLDoSBvIHZhbG9yIGRvIGlucHV0IGNvbW8gcGFyw6JtZXRyby4gTyBwYXLDom1ldHJvIGRldmVyw6Egc2VyIGVzdGU6IGBsZWZ0LXNlYXJjaD1cImRvU2VhcmNoKHRleHQpXCJgXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IHJpZ2h0LXNlYXJjaCBQYXLDom1ldHJvIG9icmlnYXTDs3JpbyBxdWUgaXLDoSBjb250ZXIgdW1hIHZhcmnDoXZlbCBxdWUgcG9zc3VpcsOhIHVtYSBmdW7Dp8OjbyBxdWUgaXLDoSBzZXIgZXhlY3V0YWRhIHRvZGEgdmV6XG5cdCAqIHF1ZSBvIHVzdcOhcmlvIGRpZ2l0YXIgYWxnbyBubyBpbnB1dCBhY2ltYSBkYSBsaXN0YS4gRXNzYSBmdW7Dp8OjbyB0ZXLDoSBvIHZhbG9yIGRvIGlucHV0IGNvbW8gcGFyw6JtZXRyby4gTyBwYXLDom1ldHJvIGRldmVyw6Egc2VyIGVzdGU6IGBsZWZ0LXNlYXJjaD1cImRvU2VhcmNoKHRleHQpXCJgXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IHBvc3QtbWV0aG9kIFBhcsOibWV0cm8gbsOjbyBvYnJpZ2F0w7NyaW8gcXVlIGlyw6EgY29udGVyIHVtYSB2YXJpw6F2ZWwgcXVlIHBvc3N1aXLDoSB1bWEgZnVuw6fDo28gcXVlIGlyw6Egc2VyIGV4ZWN1dGFkYSBxdWFuZG8gbyB1c3XDoXJpbyBkZXNlamFyIGFkaWNpb25hciB1bSB2YWxvciBcblx0ICogY2FzbyBzdWEgYnVzY2EgbsOjbyB0ZW5oYSB0cmF6aWRvIHJlc3VsdGFkb3MuXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IG9uLWxpc3QtY2hhbmdlIFBhcsOibWV0cm8gbsOjbyBvYnJpZ2F0w7NyaW8gcXVlIGlyw6EgY29udGVyIHVtYSB2YXJpw6F2ZWwgcXVlIHBvc3N1aXLDoSB1bWEgZnVuw6fDo28gcXVlIGlyw6Egc2VyIGV4ZWN1dGFkYSBxdWFuZG8gbyB1c3XDoXJpbyB0aXZlciBjbGljYWRvIGVtIHVtIHJlZ2lzdHJvXG5cdCAqIGUgbyBtZXNtbyB0aXZlciB0cm9jYWRvIGRlIGxpc3RhLlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvbi12YWx1ZS12aXN1YWxpemF0aW9uLW9wZW5lZCBQYXLDom1ldHJvIG7Do28gb2JyaWdhdMOzcmlvIHF1ZSBpcsOhIGNvbnRlciB1bWEgdmFyacOhdmVsIHF1ZSBwb3NzdWlyw6EgdW1hIGZ1bsOnw6NvIHF1ZSBpcsOhIHNlciBleGVjdXRhZGEgcXVhbmRvIG8gdXN1w6FyaW8gdGl2ZXIgYWJlcnRvIG8gbW9kYWxcblx0ICogcGFyYSB2aXN1YWxpemHDp8OjbyBkZSBkYWRvc1xuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvbi12YWx1ZS12aXN1YWxpemF0aW9uLWNsb3NlZCBQYXLDom1ldHJvIG7Do28gb2JyaWdhdMOzcmlvIHF1ZSBpcsOhIGNvbnRlciB1bWEgdmFyacOhdmVsIHF1ZSBwb3NzdWlyw6EgdW1hIGZ1bsOnw6NvIHF1ZSBpcsOhIHNlciBleGVjdXRhZGEgcXVhbmRvIG8gdXN1w6FyaW8gdGl2ZXIgZmVjaGFkbyBvIG1vZGFsXG5cdCAqIHBhcmEgdmlzdWFsaXphw6fDo28gZGUgZGFkb3Ncblx0ICogQHBhcmFtIHtCb29sZWFufSBhdXRob3JpemUtYWRkIFBhcsOibWV0cm8gbsOjbyBvYnJpZ2F0w7NyaW8gcXVlIGlyw6EgY29udGVyIHVtYSB2YXJpw6F2ZWwgcXVlIHBvc3N1aXLDoSB1bSBib29sZWFubyBxdWUgaXLDoSBmYXplciBvIGNvbnRyb2xlIHBhcmEgbW9zdHJhciBvIGJvdMOjbyBkZSBhZGljaW9uYXIgdW0gcmVnaXN0cm8gY2FzbyBhIGJ1c2NhIG7Do29cblx0ICogdGVuaGEgcmV0b3JuYWRvIG5lbmh1bSByZWdpc3Ryb1xuXHQgKiBAcGFyYW0ge1N0cmluZ30gbGVmdC1sYWJlbCBQYXLDom1ldHJvIG7Do28gb2JyaWdhdMOzcmlvIHF1ZSBpcsOhIGNvbnRlciB1bWEgU3RyaW5nIHF1ZSBpcsOhIGFwYXJlY2VyIGFjaW1hIGRvIGlucHV0IGUgZGEgbGlzdGEuXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSByaWdodC1sYWJlbCBQYXLDom1ldHJvIG7Do28gb2JyaWdhdMOzcmlvIHF1ZSBpcsOhIGNvbnRlciB1bWEgU3RyaW5nIHF1ZSBpcsOhIGFwYXJlY2VyIGFjaW1hIGRvIGlucHV0IGUgZGEgbGlzdGEuXG5cdCAqXG5cblx0ICovXG5cdGZ1bmN0aW9uIE1hbnlNYW55KCRtb2RhbCwkY29tcGlsZSwkdGltZW91dCl7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0cmVzdHJpY3Q6ICdFJyxcblx0XHRcdHNjb3BlOiB7XG5cdFx0XHRcdGxlZnQ6ICc9bGVmdExpc3QnLFxuXHRcdFx0XHRyaWdodDogJz1yaWdodExpc3QnLFxuXHRcdFx0XHRsZWZ0Rm46ICcmbGVmdFNlYXJjaCcsXG5cdFx0XHRcdHJpZ2h0Rm46ICcmcmlnaHRTZWFyY2gnLFxuXHRcdFx0XHRwb3N0TWV0aG9kOiAnJicsXG5cdFx0XHRcdG9uTGlzdENoYW5nZTogJyY/Jyxcblx0XHRcdFx0b25OZXdWYWx1ZUFkZGVkOiAnJj8nLFxuXHRcdFx0XHRvblZhbHVlVmlzdWFsaXphdGlvbk9wZW5lZDogJyY/Jyxcblx0XHRcdFx0b25WYWx1ZVZpc3VhbGl6YXRpb25DbG9zZWQ6ICcmPycsXG5cdFx0XHRcdGF1dGhvcml6ZUFkZDogJz0/J1xuXHRcdFx0fSxcblx0XHRcdHRyYW5zY2x1ZGU6IHRydWUsXG5cdFx0XHRsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsbSwgYXR0cnMsIGN0cmwsIHRyYW5zY2x1ZGVGbikge1xuXHRcdFx0XHRpZiAoIWF0dHJzLmF1dGhvcml6ZUFkZCkgc2NvcGUuYXV0aG9yaXplQWRkID0gdHJ1ZTtcblx0XHRcdFx0dmFyIG1vY2tPYmplY3QgPSB7fTtcblx0XHRcdFx0c2NvcGUudGV4dHMgPSB7bGVmdDogJycscmlnaHQ6ICcnfTtcblx0XHRcdFx0c2NvcGUudGVtcGxhdGUgPSAnJztcblx0XHRcdFx0c2NvcGUubGFiZWxzID0ge2xlZnQ6IGF0dHJzLmxlZnRMYWJlbCxyaWdodDogYXR0cnMucmlnaHRMYWJlbH07XG5cdFx0XHRcdHZhciBldmVudEhhbmRsZXIgPSB7XG5cdFx0XHRcdFx0bGlzdENoYW5nZTogKGF0dHJzLm9uTGlzdENoYW5nZT8gc2NvcGUub25MaXN0Q2hhbmdlIDogYW5ndWxhci5ub29wKSxcblx0XHRcdFx0XHRuZXdWYWx1ZUFkZGVkOiAoYXR0cnMub25OZXdWYWx1ZUFkZGVkID8gc2NvcGUub25OZXdWYWx1ZUFkZGVkIDogYW5ndWxhci5ub29wKSxcblx0XHRcdFx0XHR2YWx1ZVZpc3VhbGl6YXRpb25PcGVuZWQ6IChhdHRycy5vblZhbHVlVmlzdWFsaXphdGlvbk9wZW5lZCA/IHNjb3BlLm9uVmFsdWVWaXN1YWxpemF0aW9uT3BlbmVkIDphbmd1bGFyLm5vb3ApLFxuXHRcdFx0XHRcdHZhbHVlVmlzdWFsaXphdGlvbkNsb3NlZDogKGF0dHJzLm9uVmFsdWVWaXN1YWxpemF0aW9uQ2xvc2VkID8gc2NvcGUub25WYWx1ZVZpc3VhbGl6YXRpb25DbG9zZWQgOmFuZ3VsYXIubm9vcClcblx0XHRcdFx0fTtcblx0XHRcdFx0dHJhbnNjbHVkZUZuKHNjb3BlLGZ1bmN0aW9uKGNsb25lRWwpe1xuXHRcdFx0XHRcdGFuZ3VsYXIuZm9yRWFjaChjbG9uZUVsLGZ1bmN0aW9uKGNsKXtcblx0XHRcdFx0XHRcdHZhciBlbGVtZW50ID0gYW5ndWxhci5lbGVtZW50KGNsKVswXTtcblx0XHRcdFx0XHRcdHN3aXRjaChlbGVtZW50Lm5vZGVOYW1lKXtcblx0XHRcdFx0XHRcdFx0Y2FzZSAnTEVGVC1GSUVMRCc6XG5cdFx0XHRcdFx0XHRcdHNjb3BlLnRleHRzLmxlZnQgPSBlbGVtZW50LmlubmVySFRNTDtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdGNhc2UgJ1JJR0hULUZJRUxEJzpcblx0XHRcdFx0XHRcdFx0c2NvcGUudGV4dHMucmlnaHQgPSBlbGVtZW50LmlubmVySFRNTDtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0Y2hlY2tFcnJvcnMoKTtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdG1vdW50UmVuZGVyZWRDb250ZW50KCk7XG5cdFx0XHRcdHNjb3BlLiR3YXRjaCgnbGVmdCcsZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRjaGVja0Vycm9ycygpO1xuXHRcdFx0XHRcdGNvcHlPYmplY3Qoc2NvcGUubGVmdFswXSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRmdW5jdGlvbiBjb3B5T2JqZWN0KG9iaikge1xuXHRcdFx0XHRcdGZvciAodmFyIGtleSBpbiBvYmopIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xuXHRcdFx0XHRcdFx0bW9ja09iamVjdFtrZXldID0gbnVsbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0ZnVuY3Rpb24gY2hlY2tFcnJvcnMoKXtcblx0XHRcdFx0XHR2YXIgZXJyb3JUZXh0cyA9IFtdO1xuXHRcdFx0XHRcdGlmKCFzY29wZS5sZWZ0IHx8ICFzY29wZS5yaWdodCl7XG5cdFx0XHRcdFx0XHRlcnJvclRleHRzLnB1c2goJ1lvdSBoYXZlblxcJ3QgcHJvdmlkZWQgYSBsaXN0IHRvIEd1bWdhTWFueVRvTWFueSBkaXJlY3RpdmUnKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYoIXNjb3BlLnRleHRzLmxlZnQgfHwgIXNjb3BlLnRleHRzLnJpZ2h0KXtcblx0XHRcdFx0XHRcdGVycm9yVGV4dHMucHVzaCgnWW91IGhhdmVcXCdudCBwcm92aWRlZCB0aGUgY29udGVudCB0byBHdW1nYU1hbnlUb01hbnkgZGlyZWN0aXZlJyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGVycm9yVGV4dHMuZm9yRWFjaChmdW5jdGlvbih0eHQpe1xuXHRcdFx0XHRcdFx0dGhyb3cgdHh0O1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdHJlbW92ZUR1cGxpY2F0ZXMoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRmdW5jdGlvbiByZW1vdmVEdXBsaWNhdGVzKCl7XG5cdFx0XHRcdFx0ZnVuY3Rpb24gZmlsdGVyT25SaWdodCh0ZXh0KXtcblx0XHRcdFx0XHRcdHJldHVybiBzY29wZS5yaWdodC5maWx0ZXIoZnVuY3Rpb24oJGVsbSl7XG5cdFx0XHRcdFx0XHRcdHJldHVybiAkZWxtW2F0dHJzLmZpbHRlclBhcmFtZXRlcl0gPT0gdGV4dDtcblx0XHRcdFx0XHRcdH0pLmxlbmd0aFxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRzY29wZS5sZWZ0QXV4ID0gc2NvcGUubGVmdC5maWx0ZXIoZnVuY3Rpb24oZWxtKXtcblx0XHRcdFx0XHRcdGlmKGZpbHRlck9uUmlnaHQoZWxtW2F0dHJzLmZpbHRlclBhcmFtZXRlcl0pID09IDApe1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZWxtO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGZ1bmN0aW9uIG1vdW50UmVuZGVyZWRDb250ZW50KCl7XG5cdFx0XHRcdFx0dmFyIHRleHQgPVxuXHRcdFx0XHRcdCc8ZGl2IGNsYXNzPVwiZnVsbC13aWR0aC13aXRob3V0LXBhZGRpbmdcIj5cXG4nK1xuXHRcdFx0XHRcdCcgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTZcIiBzdHlsZT1cInBhZGRpbmctbGVmdDogMFwiPlxcbicrXG5cdFx0XHRcdFx0JyAgICAgICA8c3Ryb25nPjxzbWFsbD57ezo6bGFiZWxzLmxlZnR9fTwvc21hbGw+PC9zdHJvbmc+XFxuJyArXG5cdFx0XHRcdFx0JyAgICAgICA8ZGl2IGNsYXNzPVwie3tzaG93Q2xhc3MoKX19XCI+Jytcblx0XHRcdFx0XHQnICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwibWFueW1hbnlsZWZ0XCIgbmctbW9kZWw9XCJsZWZ0RmlsdGVyXCIgbm92YWxpZGF0ZSBjbGFzcz1cImZvcm0tY29udHJvbFwiJyArIGRvZXNJdEhhdmVGdW5jdGlvbignbGVmdCcsMCkgKyAnIG5nLWNoYW5nZT1cImxlZnRGbih7cGFyYW06IGxlZnRGaWx0ZXJ9KVwiIG5nLW1vZGVsLW9wdGlvbnM9XCJ7IHVwZGF0ZU9uOiBcXCdkZWZhdWx0IGJsdXJcXCcsIGRlYm91bmNlOiB7XFwnZGVmYXVsdFxcJzogMzAwLCBcXCdibHVyXFwnOiAwfSB9XCIvPlxcbicgK1xuXHRcdFx0XHRcdCcgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaW5wdXQtZ3JvdXAtYWRkb25cIiBuZy1zaG93PVwic2hvd1BsdXMobGVmdEZpbHRlcilcIj4gJyArXG5cdFx0XHRcdFx0JyAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIHN0eWxlPVwiYm9yZGVyOiAwO2JhY2tncm91bmQtY29sb3I6ICNFRUVcIiBuZy1jbGljaz1cImFkZE5ldyhsZWZ0RmlsdGVyKVwiPjxpIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1wbHVzXCI+PC9pPjwvYnV0dG9uPicgK1xuXHRcdFx0XHRcdCcgICAgICAgICAgIDwvc3Bhbj4nICtcblx0XHRcdFx0XHQnICAgICAgIDwvZGl2PicgK1xuXHRcdFx0XHRcdCcgICAgICAgPHVsIGNsYXNzPVwibGlzdC1ncm91cFwiIHN0eWxlPVwibWF4LWhlaWdodDogMjAwcHg7b3ZlcmZsb3c6IGF1dG87XCI+XFxuJyArXG5cdFx0XHRcdFx0JyAgICAgICAgICAgPGxpIGNsYXNzPVwibGlzdC1ncm91cC1pdGVtXCIgc3R5bGU9XCJkaXNwbGF5OmZsZXg7cGFkZGluZzogN3B4IDE1cHg7XCIgbmctcmVwZWF0PVwiJHZhbHVlIGluIGxlZnRBdXggJyArIGRvZXNJdEhhdmVGdW5jdGlvbignbGVmdCcsMSkgKyAnXCI+JyArXG5cdFx0XHRcdFx0JyAgICAgICAgICAgICAgIDxhIGNsYXNzPVwiaW5zaWRlLWxpc3QtYW5jaG9yXCIgbmctY2xpY2s9XCJyZW1vdmVGcm9tQW5kQWRkVG8obGVmdEF1eCxyaWdodCwkdmFsdWUpXCI+JyArIHNjb3BlLnRleHRzLmxlZnQgKyAnPC9hPicgK1xuXHRcdFx0XHRcdCcgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJiYWRnZVwiIHN0eWxlPVwiYmFja2dyb3VuZC1jb2xvcjogIzgxQUVEQTtjdXJzb3I6IHBvaW50ZXI7Ym9yZGVyOiAwXCIgbmctY2xpY2s9XCJoYWxwKCR2YWx1ZSlcIj48aSBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tcmVzaXplLWZ1bGxcIj48L2k+PC9idXR0b24+JyArXG5cdFx0XHRcdFx0JyAgICAgICAgICAgPC9saT5cXG4nK1xuXHRcdFx0XHRcdCcgICAgICAgPC91bD4nK1xuXHRcdFx0XHRcdCcgICA8L2Rpdj5cXG4nK1xuXHRcdFx0XHRcdCcgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTZcIiBzdHlsZT1cInBhZGRpbmctcmlnaHQ6IDBcIj5cXG4nK1xuXHRcdFx0XHRcdCcgICAgICAgPHN0cm9uZz48c21hbGw+e3s6OmxhYmVscy5yaWdodH19PC9zbWFsbD48L3N0cm9uZz5cXG4nK1xuXHRcdFx0XHRcdCcgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cIm1hbnltYW55bGVmdFwiIG5nLW1vZGVsPVwicmlnaHRGaWx0ZXJcIiBub3ZhbGlkYXRlIGNsYXNzPVwiZm9ybS1jb250cm9sXCInICsgZG9lc0l0SGF2ZUZ1bmN0aW9uKCdyaWdodCcsMCkgKyAnLz5cXG4nK1xuXHRcdFx0XHRcdCcgICAgICAgPHVsIGNsYXNzPVwibGlzdC1ncm91cFwiIHN0eWxlPVwibWF4LWhlaWdodDogMjAwcHg7b3ZlcmZsb3c6IGF1dG87XCI+XFxuJyArXG5cdFx0XHRcdFx0JyAgICAgICAgICAgPGxpIGNsYXNzPVwibGlzdC1ncm91cC1pdGVtXCIgc3R5bGU9XCJkaXNwbGF5OmZsZXg7cGFkZGluZzogN3B4IDE1cHg7XCIgbmctcmVwZWF0PVwiJHZhbHVlIGluIHJpZ2h0ICcgKyBkb2VzSXRIYXZlRnVuY3Rpb24oJ3JpZ2h0JywxKSArICdcIj4nICtcblx0XHRcdFx0XHQnICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJpbnNpZGUtbGlzdC1hbmNob3JcIiBuZy1jbGljaz1cInJlbW92ZUZyb21BbmRBZGRUbyhyaWdodCxsZWZ0QXV4LCR2YWx1ZSlcIj4nICsgc2NvcGUudGV4dHMucmlnaHQgKyAnPC9hPicgK1xuXHRcdFx0XHRcdCcgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJiYWRnZSBiYWRnZS1oZWxwZXJcIiBuZy1jbGljaz1cImhhbHAoJHZhbHVlKVwiPjxpIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1yZXNpemUtZnVsbFwiPjwvaT48L2J1dHRvbj4nICtcblx0XHRcdFx0XHQnICAgICAgICAgICA8L2xpPlxcbicrXG5cdFx0XHRcdFx0JyAgICAgICA8L3VsPlxcbicrXG5cdFx0XHRcdFx0JyAgIDwvZGl2PlxcbicrXG5cdFx0XHRcdFx0JzwvZGl2Plxcbic7XG5cdFx0XHRcdFx0ZWxtLmFwcGVuZCgkY29tcGlsZSh0ZXh0KShzY29wZSkpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHNjb3BlLnJlbW92ZUZyb21BbmRBZGRUbyA9IGZ1bmN0aW9uKHJlbW92ZUZyb20sYWRkVG8sdmFsdWUpe1xuXHRcdFx0XHRcdHJlbW92ZUZyb20uc3BsaWNlKHJlbW92ZUZyb20uaW5kZXhPZih2YWx1ZSksMSk7XG5cdFx0XHRcdFx0ZXZlbnRIYW5kbGVyLmxpc3RDaGFuZ2UoeyR2YWx1ZTp2YWx1ZX0pO1xuXHRcdFx0XHRcdGFkZFRvLnB1c2godmFsdWUpO1xuXHRcdFx0XHR9O1xuXHRcdFx0XHRzY29wZS5hZGROZXcgPSBmdW5jdGlvbih0ZXh0KXtcblx0XHRcdFx0XHRzY29wZS5sZWZ0RmlsdGVyID0gJyc7XG5cdFx0XHRcdFx0c2NvcGUucG9zdE1ldGhvZCh7dmFsdWU6IHRleHQgfSk7XG5cdFx0XHRcdFx0ZXZlbnRIYW5kbGVyLm5ld1ZhbHVlQWRkZWQoKTtcblx0XHRcdFx0fTtcblx0XHRcdFx0c2NvcGUuc2hvd0NsYXNzID0gZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRpZihzY29wZS5zaG93UGx1cygpKXtcblx0XHRcdFx0XHRcdHJldHVybiAnaW5wdXQtZ3JvdXAnO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gJyc7XG5cdFx0XHRcdH07XG5cdFx0XHRcdHNjb3BlLmhhbHAgPSBmdW5jdGlvbihvYmope1xuXHRcdFx0XHRcdHNjb3BlLnRlbXBsYXRlID1cblx0XHRcdFx0XHQnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj5cXG4nO1xuXHRcdFx0XHRcdGZvciAodmFyIGtleSBpbiBvYmopIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSAmJiBrZXkgIT0gJyQkaGFzaEtleScgJiYga2V5ICE9ICdvaScgJiYga2V5ICE9ICd2ZXJzaW9uJykge1xuXHRcdFx0XHRcdFx0c2NvcGUudGVtcGxhdGUgKz0gJyAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XFxuJztcblx0XHRcdFx0XHRcdHNjb3BlLnRlbXBsYXRlICs9ICcgICAgICAgPGxhYmVsPjxzbWFsbD4nKyBrZXkgKyc8L3NtYWxsPjwvbGFiZWw+XFxuJztcblx0XHRcdFx0XHRcdHNjb3BlLnRlbXBsYXRlICs9ICcgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCIkdmFsdWUuJyArIGtleSArJ1wiIGRpc2FibGVkIGNsYXNzPVwiZm9ybS1jb250cm9sXCIvPlxcbic7XG5cdFx0XHRcdFx0XHRzY29wZS50ZW1wbGF0ZSArPSAnICAgPC9kaXY+XFxuJztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0c2NvcGUudGVtcGxhdGUgKz0gJyAgIDxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj5cXG4nO1xuXHRcdFx0XHRcdHNjb3BlLnRlbXBsYXRlICs9ICcgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXdhcm5pbmdcIiBuZy1jbGljaz1cImJhY2soKVwiPkJhY2s8L2J1dHRvbj5cXG4nO1xuXHRcdFx0XHRcdHNjb3BlLnRlbXBsYXRlICs9ICcgICA8L2Rpdj5cXG4nO1xuXHRcdFx0XHRcdHNjb3BlLnRlbXBsYXRlICs9ICc8L2Rpdj5cXG4nO1xuXHRcdFx0XHRcdGV2ZW50SGFuZGxlci52YWx1ZVZpc3VhbGl6YXRpb25PcGVuZWQoKTtcblx0XHRcdFx0XHR2YXIgbWkgPSAkbW9kYWwub3Blbih7XG5cdFx0XHRcdFx0XHR0ZW1wbGF0ZTogc2NvcGUudGVtcGxhdGUsXG5cdFx0XHRcdFx0XHRzaXplOiAnc20nLFxuXHRcdFx0XHRcdFx0Y29udHJvbGxlcjogW1wiJHNjb3BlXCIsIFwiJHZhbHVlXCIsIFwiJG1vZGFsSW5zdGFuY2VcIiwgZnVuY3Rpb24oJHNjb3BlLCR2YWx1ZSwkbW9kYWxJbnN0YW5jZSl7XG5cdFx0XHRcdFx0XHRcdCRzY29wZS4kdmFsdWUgPSAkdmFsdWU7XG5cdFx0XHRcdFx0XHRcdCRzY29wZS5iYWNrID0gZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRcdFx0XHQkbW9kYWxJbnN0YW5jZS5kaXNtaXNzKCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1dLFxuXHRcdFx0XHRcdFx0cmVzb2x2ZToge1xuXHRcdFx0XHRcdFx0XHQkdmFsdWU6IGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIG9iajtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXG5cdFx0XHRcdFx0bWkucmVzdWx0LnRoZW4oZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRcdGV2ZW50SGFuZGxlci52YWx1ZVZpc3VhbGl6YXRpb25DbG9zZWQoKTtcblx0XHRcdFx0XHR9KVxuXHRcdFx0XHR9O1xuXHRcdFx0XHRzY29wZS5zaG93UGx1cyA9IGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0ZnVuY3Rpb24gZmlsdGVyTGVmdCgpe1xuXHRcdFx0XHRcdFx0cmV0dXJuIHNjb3BlLmxlZnRBdXguZmlsdGVyKGZ1bmN0aW9uKGVsKXtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGVsW2F0dHJzLmZpbHRlclBhcmFtZXRlcl0gPT0gc2NvcGUubGVmdEZpbHRlcjtcblx0XHRcdFx0XHRcdH0pLmxlbmd0aCA8IDE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGZ1bmN0aW9uIGZpbHRlclJpZ2h0KCl7XG5cdFx0XHRcdFx0XHRyZXR1cm4gc2NvcGUucmlnaHQuZmlsdGVyKGZ1bmN0aW9uKGVsKXtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGVsW2F0dHJzLmZpbHRlclBhcmFtZXRlcl0gPT0gc2NvcGUubGVmdEZpbHRlcjtcblx0XHRcdFx0XHRcdH0pLmxlbmd0aCA8IDE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmKHNjb3BlLmF1dGhvcml6ZUFkZCA9PSB0cnVlKXtcblx0XHRcdFx0XHRcdHJldHVybiBmaWx0ZXJMZWZ0KCkgJiYgZmlsdGVyUmlnaHQoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdHNjb3BlLmRvZXNJdEhhdmVDbGFzcyA9IGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0aWYoc2NvcGUubGVmdC5sZW5ndGggPiAwKXtcblx0XHRcdFx0XHRcdHJldHVybiAnJztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuICdpbnB1dC1ncm91cCc7XG5cdFx0XHRcdH07XG5cdFx0XHRcdGZ1bmN0aW9uIGRvZXNJdEhhdmVGdW5jdGlvbihmaWVsZCxwbGFjZSl7XG5cdFx0XHRcdFx0aWYocGxhY2UgPT0gMCl7XG5cdFx0XHRcdFx0XHRpZihmaWVsZCA9PSAnbGVmdCcgJiYgYXR0cnMubGVmdEZuKXtcblx0XHRcdFx0XHRcdFx0cmV0dXJuICAnbmctY2hhbmdlPSBcIicgKyBhdHRycy5sZWZ0Rm4gICsnKHt0ZXh0OiBsZWZ0RmlsdGVyfSlcIiAnO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYoZmllbGQgPT0gJ3JpZ2h0JyAmJiBhdHRycy5yaWdodEZuKXtcblx0XHRcdFx0XHRcdFx0cmV0dXJuICAnbmctY2hhbmdlPSBcIicgKyBhdHRycy5sZWZ0Rm4gICsnKHt0ZXh0OiByaWdodEZpbHRlcn0pXCIgJztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHJldHVybiAnJztcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0aWYoZmllbGQgPT0gJ2xlZnQnICYmICFhdHRycy5sZWZ0Rm4pe1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gJyB8IGZpbHRlcjogbGVmdEZpbHRlcic7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZihmaWVsZCA9PSAncmlnaHQnICYmICFhdHRycy5yaWdodEZuKXtcblx0XHRcdFx0XHRcdFx0cmV0dXJuICcgfCBmaWx0ZXI6IHJpZ2h0RmlsdGVyJ1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0cmV0dXJuICcnO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdFx0YW5ndWxhci5tb2R1bGUoJ2d1bWdhLmRpcmVjdGl2ZXMubWFueXRvbWFueScsWyd1aS5ib290c3RyYXAnXSlcblx0XHQuZGlyZWN0aXZlKCdndW1nYU1hbnlUb01hbnknLE1hbnlNYW55KVxuXHR9KSgpOyIsIihmdW5jdGlvbigpe1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIE1hbnlUb09uZS4kaW5qZWN0ID0gW1wiJHRlbXBsYXRlQ2FjaGVcIiwgXCJHdW1nYUtleWJvYXJkXCIsIFwiJG1vZGFsXCJdO1xuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAgICAgKiBAbmFtZSBndW1nYS5jb3JlOmd1bWdhTWFueVRvT25lXG4gICAgICogQHJlc3RyaWN0IEVcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiAgQSBkaXJlY3RpdmUgZ3VtZ2FNYW55VG9PbmUgcG9kZSBzZXIgdXNhZGEgcGFyYSBxdWFuZG8gbyBwcm9ncmFtYWRvciBwcmVjaXNlIGRlIHVtIHNlbGVjdCBxdWUgZmlsdHJlIHVtYSBsaXN0YSBhc3PDrW5jcm9uYW1lbnRlLlxuICAgICAqICBFbGEgdGFtYsOpbSBwZXJtaXRlIGFkaWNpb25hciB1bSByZWdpc3RybyBjYXNvIGEgYnVzY2EgcmV0b3JuZSB1bWEgbGlzdGEgdmF6aWEgZSBwZXJtaXRlIHRhbWLDqW0gdmlzdWFsaXphciBvcyBhdHJpYnV0b3MgZG8gcmVnaXN0cm8gc2VsZWNpb25hZG8uXG4gICAgICogIC0tLVxuICAgICAqICAjRXhlbXBsbyBiw6FzaWNvIGRlIHV0aWxpemHDp8OjbyBkbyBHdW1nYU1hbnlUb09uZVxuICAgICAqICBPIGV4ZW1wbG8gZGVzc2UgY29tcG9uZW50ZSBwb2RlIHNlciBlbmNvbnRyYWRvIFthcXVpXShodHRwOi8vZW1iZWQucGxua3IuY28vTllMM2dJdFZzV0xGY0d4dDVpdHovKS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZSBQYXLDom1ldHJvIG9icmlnYXTDs3JpbyBxdWUgaXLDoSBjb250ZXIgdW1hIHZhcmnDoXZlbCBxdWUgc2Vyw6EgbyByZWdpc3RybyBlc2NvbGhpZG8gbmEgbGlzdGEuXG4gICAgICogQHBhcmFtIHtBcnJheX0gbGlzdCBQYXLDom1ldHJvIG9icmlnYXTDs3JpbyBxdWUgaXLDoSBjb250ZXIgdW1hIGxpc3RhIGRvcyByZWdpc3Ryb3MgcXVlIGZvcmFtIGJ1c2NhZG9zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNlYXJjaC1tZXRob2QgUGFyw6JtZXRybyBvYnJpZ2F0w7NyaW8gcXVlIGlyw6EgY29udGVyIHVtYSBmdW7Dp8OjbyBxdWUgZmFyw6EgYSBidXNjYSBuYSBsaXN0YSBhc3PDrW5jcm9uYW1lbnRlLiBgc2VhcmNoLW1ldGhvZD1cImdldFNlYXJjaChwYXJhbSlcImBcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwb3N0LW1ldGhvZCBQYXLDom1ldHJvIG9icmlnYXTDs3JpbyBxdWUgaXLDoSBjb250ZXIgdW1hIGZ1bsOnw6NvIHF1ZSBkZXBlbmRlbmRvIGRvIHBhcsOibWV0cm8gYGFzeW5jYCwgY2hhbWFyw6EgYSBmdW7Dp8OjbyBhc3luYyBjb20gbyBwYXLDom1ldHJvXG4gICAgICogYHBvc3QtbWV0aG9kPVwicG9zdCh2YWx1ZSlcImAgZSBjYXNvIG8gcGFyw6JtZXRybyBhc3luYyBuw6NvIGVzdGVqYSBwcmVzZW50ZSBvdSBzZWphIGZhbHNvLCBmYXLDoSB1bSBwdXNoIG5hIGxpc3RhLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBmaWVsZCBQYXLDom1ldHJvIG9icmlnYXTDs3JpbyBxdWUgaXLDoSBjb250ZXIgbyBhdHJpYnV0byBkbyByZWdpc3RybyBxdWUgZXN0w6Egc2VuZG8gcHJvY3VyYWRvIGUgbyBxdWUgZXN0YXLDoSBuYSBsaXN0YS5cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGF1dGhvcml6ZS1hZGQgUGFyw6JtZXRybyBuw6NvIG9icmlnYXTDs3JpbyBxdWUgaXLDoSBjb250ZXIgdW1hIHZhcmnDoXZlbCBxdWUgcG9zc3VpcsOhIHVtIGJvb2xlYW5vIHF1ZSBpcsOhIGZhemVyIG8gY29udHJvbGUgcGFyYSBtb3N0cmFyIG8gYm90w6NvIGRlIGFkaWNpb25hciB1bSByZWdpc3RybyBjYXNvIGEgYnVzY2EgbsOjb1xuICAgICAqIHRlbmhhIHJldG9ybmFkbyBuZW5odW0gcmVnaXN0cm9cbiAgICAgKiBAcGFyYW0ge0J0YXZhIHZlb29sZWFufSBhc3luYyBQYXLDom1ldHJvIG7Do28gb2JyaWdhdMOzcmlvIHF1ZSBpcsOhIGRpemVyIGNhc28gY29tcG9uZW50ZSBmYXLDoSB1bSBwb3N0IGNoYW1hbmRvIGEgZnVuw6fDo28gcGFzc2FkYSBvdSB1bSBwdXNoIG5hIGxpc3RhLiBQb3IgZGVmYXVsdCwgbyB2YWxvciDDqVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG9uLW5ldy12YWx1ZS1hZGRlZCBQYXLDom1ldHJvIG7Do28gb2JyaWdhdMOzcmlvIHF1ZSBpcsOhIGNvbnRlciB1bWEgdmFyacOhdmVsIHF1ZSBwb3NzdWlyw6EgdW1hIGZ1bsOnw6NvIHF1ZSBpcsOhIHNlciBleGVjdXRhZGEgcXVhbmRvIG8gdXN1w6FyaW8gYWRpY2lvbmFyIHVtIG5vdm8gdmFsb3IuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gb24tdmFsdWUtdmlzdWFsaXphdGlvbi1vcGVuZWQgUGFyw6JtZXRybyBuw6NvIG9icmlnYXTDs3JpbyBxdWUgaXLDoSBjb250ZXIgdW1hIHZhcmnDoXZlbCBxdWUgcG9zc3VpcsOhIHVtYSBmdW7Dp8OjbyBxdWUgaXLDoSBzZXIgZXhlY3V0YWRhIHF1YW5kbyBvIHVzdcOhcmlvIHRpdmVyIGFiZXJ0byBvIG1vZGFsXG4gICAgICogcGFyYSB2aXN1YWxpemHDp8OjbyBkZSBkYWRvc1xuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG9uLXZhbHVlLXZpc3VhbGl6YXRpb24tY2xvc2VkIFBhcsOibWV0cm8gbsOjbyBvYnJpZ2F0w7NyaW8gcXVlIGlyw6EgY29udGVyIHVtYSB2YXJpw6F2ZWwgcXVlIHBvc3N1aXLDoSB1bWEgZnVuw6fDo28gcXVlIGlyw6Egc2VyIGV4ZWN1dGFkYSBxdWFuZG8gbyB1c3XDoXJpbyB0aXZlciBmZWNoYWRvIG8gbW9kYWxcbiAgICAgKiBwYXJhIHZpc3VhbGl6YcOnw6NvIGRlIGRhZG9zXG4gICAgICovXG5cblxuXG4gICAgZnVuY3Rpb24gTWFueVRvT25lKCR0ZW1wbGF0ZUNhY2hlLEd1bWdhS2V5Ym9hcmQsJG1vZGFsKXtcbiAgICAgICAgJHRlbXBsYXRlQ2FjaGUucHV0KCdtdG9JdGVtLmh0bWwnLFxuICAgICAgICAgICAgJzxzcGFuIGJpbmQtaHRtbC11bnNhZmU9XCJtYXRjaC5sYWJlbCB8IHR5cGVhaGVhZEhpZ2hsaWdodDpxdWVyeVwiIHN0eWxlPVwiY3Vyc29yOiBwb2ludGVyO1wiPjwvc3Bhbj4nKTtcbiAgICAgICAgdmFyIHRlbXBsYXRlID0nPGRpdiBjbGFzcz1cImZ1bGwtd2lkdGgtd2l0aG91dC1wYWRkaW5nXCI+JztcbiAgICAgICAgdGVtcGxhdGUgKz0gJyAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+JztcbiAgICAgICAgdGVtcGxhdGUgKz0gJyAgICAgICA8ZGl2IG5nLWNsYXNzPVwic2hvd0Z1bGxWaWV3KCkgfHwgYXV0aG9yaXplQWRkID8gXFwnaW5wdXQtZ3JvdXBcXCcgOiBcXCdcXCdcIj4nO1xuICAgICAgICB0ZW1wbGF0ZSArPSAnICAgICAgICAgICA8aW5wdXQgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiAgbmctbW9kZWw9XCJtb2RlbFwiIHR5cGU9XCJ0ZXh0XCIgdHlwZWFoZWFkPVwiJHZhbHVlIGFzICR2YWx1ZVtmaWVsZF0gZm9yICR2YWx1ZSBpbiBwcm94eVNlYXJjaE1ldGhvZCgpXCI+JztcbiAgICAgICAgdGVtcGxhdGUgKz0gJyAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC1hZGRvblwiIHN0eWxlPVwiYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7IHBhZGRpbmc6IDNweCAxMnB4O2JvcmRlci1sZWZ0OjBcIiBuZy1zaG93PVwic2hvd0Z1bGxWaWV3KClcIj4gJztcbiAgICAgICAgdGVtcGxhdGUgKz0gJyAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJiYWRnZVwiIHN0eWxlPVwiYmFja2dyb3VuZC1jb2xvcjogIzZFQ0ZGRjtib3JkZXI6IDBcIiBuZy1jbGljaz1cImhhbHAobW9kZWwpXCIgPjxpIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1yZXNpemUtZnVsbFwiPjwvaT48L2J1dHRvbj4nO1xuICAgICAgICB0ZW1wbGF0ZSArPSAnICAgICAgICAgICA8L3NwYW4+JztcbiAgICAgICAgdGVtcGxhdGUgKz0gJyAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC1hZGRvblwiIHN0eWxlPVwicGFkZGluZzogMCAwLjI1JVwiIG5nLXNob3c9XCJhdXRob3JpemVBZGRcIj4gJztcbiAgICAgICAgdGVtcGxhdGUgKz0gJyAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIHN0eWxlPVwiYm9yZGVyOiAwO2JhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50XCIgbmctY2xpY2s9XCJhZGROZXcobW9kZWwpXCIgPjxpIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1wbHVzXCI+PC9pPjwvYnV0dG9uPic7XG4gICAgICAgIHRlbXBsYXRlICs9ICcgICAgICAgICAgIDwvc3Bhbj4nO1xuICAgICAgICB0ZW1wbGF0ZSArPSAnICAgICAgIDwvZGl2Pic7XG4gICAgICAgIHRlbXBsYXRlICs9ICcgICA8L2Rpdj4nO1xuICAgICAgICB0ZW1wbGF0ZSArPSAnPC9kaXY+JztcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0IDogJ0UnLFxuICAgICAgICAgICAgdGVtcGxhdGU6IHRlbXBsYXRlLFxuICAgICAgICAgICAgcmVxdWlyZTogJ15mb3JtJyxcbiAgICAgICAgICAgIHNjb3BlIDoge1xuICAgICAgICAgICAgICAgIG1vZGVsOic9dmFsdWUnLFxuICAgICAgICAgICAgICAgIGxpc3Q6ICc9JyxcbiAgICAgICAgICAgICAgICBzZWFyY2hNZXRob2Q6ICcmJyxcbiAgICAgICAgICAgICAgICBwb3N0TWV0aG9kOiAnJmFkZE1ldGhvZCcsXG4gICAgICAgICAgICAgICAgZmllbGQ6ICdAJyxcbiAgICAgICAgICAgICAgICBvbk5ld1ZhbHVlQWRkZWQ6ICcmPycsXG4gICAgICAgICAgICAgICAgb25WYWx1ZVZpc3VhbGl6YXRpb25PcGVuZWQ6ICcmPycsXG4gICAgICAgICAgICAgICAgb25WYWx1ZVZpc3VhbGl6YXRpb25DbG9zZWQ6ICcmPydcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxtLCBhdHRycyxjdHJsKXtcbiAgICAgICAgICAgICAgICBzY29wZS5mb3JtQ3RybCA9IGN0cmw7XG4gICAgICAgICAgICAgICAgdmFyIG5nTW9kZWxDdHJsID0gZWxtLmZpbmQoJ2lucHV0JykuY29udHJvbGxlcignbmdNb2RlbCcpLFxuICAgICAgICAgICAgICAgIGV2ZW50SGFuZGxlciA9IHtcbiAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWVBZGRlZDogKGF0dHJzLm9uTmV3VmFsdWVBZGRlZCA/IHNjb3BlLm9uTmV3VmFsdWVBZGRlZCA6IGFuZ3VsYXIubm9vcCksXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlVmlzdWFsaXphdGlvbk9wZW5lZDogKGF0dHJzLm9uVmFsdWVWaXN1YWxpemF0aW9uT3BlbmVkID8gc2NvcGUub25WYWx1ZVZpc3VhbGl6YXRpb25PcGVuZWQgOmFuZ3VsYXIubm9vcCksXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlVmlzdWFsaXphdGlvbkNsb3NlZDogKGF0dHJzLm9uVmFsdWVWaXN1YWxpemF0aW9uQ2xvc2VkID8gc2NvcGUub25WYWx1ZVZpc3VhbGl6YXRpb25DbG9zZWQgOmFuZ3VsYXIubm9vcClcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGFzeW5jO1xuICAgICAgICAgICAgICAgICFhdHRycy5hdXRob3JpemVBZGQgPyBzY29wZS5hdXRob3JpemVBZGQgPSB0cnVlIDogc2NvcGUuYXV0aG9yaXplQWRkID0gSlNPTi5wYXJzZShhdHRycy5hdXRob3JpemVBZGQpO1xuICAgICAgICAgICAgICAgICFhdHRycy5hc3luYyA/IGFzeW5jID0gdHJ1ZSA6IGFzeW5jID0gSlNPTi5wYXJzZShhdHRycy5hc3luYyk7XG4gICAgICAgICAgICAgICAgc2NvcGUubGlzdCA9IHNjb3BlLmxpc3QgfHwgW107XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gY2hlY2tJZkl0SXNTdHJpbmcoc3RyaW5nKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgodHlwZW9mIHN0cmluZykudG9VcHBlckNhc2UoKS50cmltKCkpID09PSAnc3RyaW5nJy50b1VwcGVyQ2FzZSgpLnRyaW0oKSAmJiBzdHJpbmcubGVuZ3RoID4gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2NvcGUuJHdhdGNoKCdtb2RlbCcsZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tJZkl0SXNTdHJpbmcoc2NvcGUubW9kZWwpID9cbiAgICAgICAgICAgICAgICAgICAgY3RybC4kc2V0VmFsaWRpdHkoJ0d1bWdhTWFueVRvT25lJyxmYWxzZSkgOiBjdHJsLiRzZXRWYWxpZGl0eSgnR3VtZ2FNYW55VG9PbmUnLHRydWUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIEd1bWdhS2V5Ym9hcmQuYmluZFRvRWxlbWVudChlbG0uZmluZCgnaW5wdXQnKVswXSwnZG93bicsZnVuY3Rpb24oKXtuZ01vZGVsQ3RybC4kc2V0Vmlld1ZhbHVlKCcgJyl9KTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoKGUpe1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc2NvcGUuc2hvd0Z1bGxWaWV3ID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgodHlwZW9mIHNjb3BlLm1vZGVsKS50b1VwcGVyQ2FzZSgpLnRyaW0oKSkgPT09ICdvYmplY3QnLnRvVXBwZXJDYXNlKCkudHJpbSgpICYmIHNjb3BlLm1vZGVsICE9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgc2NvcGUuc2hvd1BsdXMgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCgodHlwZW9mIHNjb3BlLm1vZGVsKS50b1VwcGVyQ2FzZSgpLnRyaW0oKSkgPT09ICdzdHJpbmcnLnRvVXBwZXJDYXNlKCkudHJpbSgpICYmIHNjb3BlLmF1dGhvcml6ZUFkZCA9PT0gdHJ1ZSkgO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBzY29wZS5wcm94eVNlYXJjaE1ldGhvZCA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gc2NvcGUuc2VhcmNoTWV0aG9kKHtwYXJhbTogbmdNb2RlbEN0cmwuJHZpZXdWYWx1ZX0pO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgc2NvcGUuYWRkTmV3ID0gZnVuY3Rpb24odGV4dCl7XG4gICAgICAgICAgICAgICAgICAgIGlmKGFzeW5jKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5wb3N0TWV0aG9kKHt2YWx1ZTogdGV4dH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbih2YWx1ZXMpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5tb2RlbCA9IHZhbHVlcy5kYXRhLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUubGlzdC5wdXNoKHRleHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBzY29wZS5oYWxwID0gZnVuY3Rpb24ob2JqKXtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRlbXBsYXRlID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlID1cbiAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+XFxuJztcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIG9iaikgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIGtleSAhPSAnJCRoYXNoS2V5JyAmJiBrZXkgIT0gJ29pJyAmJiBrZXkgIT0gJ3ZlcnNpb24nICYmIGtleSAhPSAncGFzc3dvcmQnICYmIHR5cGVvZiBvYmpba2V5XSAhPSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGUgKz0gJyAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XFxuJztcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlICs9ICcgICAgICAgPGxhYmVsPjxzbWFsbD4nKyBrZXkgKyc8L3NtYWxsPjwvbGFiZWw+XFxuJztcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlICs9ICcgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCIkdmFsdWUuJyArIGtleSArJ1wiIGRpc2FibGVkIGNsYXNzPVwiZm9ybS1jb250cm9sXCIvPlxcbic7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZSArPSAnICAgPC9kaXY+XFxuJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZSArPSAnICAgPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPlxcbic7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlICs9ICcgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXdhcm5pbmdcIiBuZy1jbGljaz1cImJhY2soKVwiPkJhY2s8L2J1dHRvbj5cXG4nO1xuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZSArPSAnICAgPC9kaXY+XFxuJztcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGUgKz0gJzwvZGl2Plxcbic7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50SGFuZGxlci52YWx1ZVZpc3VhbGl6YXRpb25PcGVuZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1pID0gJG1vZGFsLm9wZW4oe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6IHRlbXBsYXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFtcIiRzY29wZVwiLCBcIiR2YWx1ZVwiLCBcIiRtb2RhbEluc3RhbmNlXCIsIGZ1bmN0aW9uKCRzY29wZSwkdmFsdWUsJG1vZGFsSW5zdGFuY2Upe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS4kdmFsdWUgPSAkdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmJhY2sgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbW9kYWxJbnN0YW5jZS5kaXNtaXNzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHZhbHVlOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIG1pLnJlc3VsdC50aGVuKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudEhhbmRsZXIudmFsdWVWaXN1YWxpemF0aW9uQ2xvc2VkKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2d1bWdhLmRpcmVjdGl2ZXMubWFueXRvb25lJyxbJ3VpLmJvb3RzdHJhcCcsJ2d1bWdhLnNlcnZpY2VzLmtleWJvYXJkJ10pXG4gICAgICAgIC5kaXJlY3RpdmUoJ2d1bWdhTWFueVRvT25lJyxNYW55VG9PbmUpO1xuICAgIH0pKCk7XG4iLCIiLCIoZnVuY3Rpb24oKXtcblx0J3VzZSBzdHJpY3QnO1xuXHRNZW51LiRpbmplY3QgPSBbXCIkaHR0cFwiLCBcIiRjb21waWxlXCJdO1xuXHQvKipcblx0ICogQG5nZG9jIGRpcmVjdGl2ZVxuXHQgKiBAbmFtZSAgZ3VtZ2EuY29yZTpndW1nYU1lbnVcblx0ICogQHJlc3RyaWN0IEVcblx0ICogQGRlc2NyaXB0aW9uXG5cdCAqICBPIGNvbXBvbmVudGUgZ3VtZ2FNZW51IMOpIHVtYSBkaXJlY3RpdmUgcXVlIGNyaWEgdW0gbWVudSBuYSBsYXRlcmFsIGVzcXVlcmRhIGRhIHRlbGEgcGFyYSBmYWNpbGl0YXIgYSBuYXZlZ2HDp8OjbyBkbyB1c3XDoXJpbyBubyBzaXN0ZW1hLlxuXHQgKiAgU2V1cyBpdGVucyBzw6NvIGNhcnJlZ2Fkb3MgZGUgZm9ybWEgZGluw6JtaWNhIGF0cmF2w6lzIGRlIHVtIGFycXVpdm8gYGpzb25gIHF1ZSDDqSBjYXJyZWdhZG8gYXRyYXbDqXMgZGUgdW1hIHJlcXVpc2nDp8OjbyBIVFRQLiBBbMOpbSBkaXNzbyxcblx0ICogIGVsZSBmYXogdW0gZmlsdHJvIGRlIGFjb3JkbyBjb20gYXMga2V5cyBwYXNzYWRhcyBwYXJhIGVsZSB0YW1iw6ltIGF0cmF2w6lzIGRlIHVtIGFycXVpdm8gYGpzb25gLlxuXHQgKiAgIyMgRXhlbXBsb1xuICAgICAqICBWZWphIHVtIGV4ZW1wbG8gZW0gZnVuY2lvbmFtZW50byBbYXF1aV0oaHR0cDovL2VtYmVkLnBsbmtyLmNvL1VjTXRBb3I2c1VBNnMwb1puSml1L3ByZXZpZXcpLlxuXHQgKiAgQHBhcmFtIHtTdHJpbmd9IG1lbnUtdXJsIFBhcsOibWV0cm8gb2JyaWdhdMOzcmlvIHF1ZSBpcsOhIGNvbnRlciB1bWEgdmFyacOhdmVsIGNvbSBvIGVuZGVyZcOnbyBkbyBhcnF1aXZvIGBqc29uYCBwYXJhIHF1ZSBzZWphIGNhcnJlZ2FkYSBhcyBlbnRyYWRhcyBkbyBtZW51LlxuXHQgKiAgQHBhcmFtIHtTdHJpbmd9IGtleXMtdXJsIFBhcsOibWV0cm8gb2JyaWdhdMOzcmlvIHF1ZSBpcsOhIGNvbnRlciB1bWEgdmFyacOhdmVsIGNvbSBvIGVuZGVyZcOnbyBkbyBhcnF1aXZvIGBqc29uYCBwYXJhIHF1ZSBzZWphIGNhcnJlZ2FkYSBhcyBjaGF2ZXMgcXVlIGZhcsOjbyBvIGZpbHRybyBkbyBtZW51LlxuXHQgKiAgQHBhcmFtIHtTdHJpbmd9IGltYWdlIFBhcsOibWV0cm8gb2JyaWdhdMOzcmlvIHF1ZSBpcsOhIGNvbnRlciB1bWEgdmFyacOhdmVsIGNvbSBvIGVuZGVyZcOnbyBkYSBpbWFnZW0gcXVlIGZpY2Fyw6Egbm8gbWVudS5cblx0ICpcbiBcdCAqICMjIEV4YW1wbGVcblx0ICogXHQjIyNFeGVtcGxvIGRlIGpzb24gcGFyYSBvIG1lbnU6XG5cdCAqIDxwcmU+XG4gICAgW1xuICAgICAge1xuICAgICAgICBcImxhYmVsXCI6IFwiSG9tZVwiLFxuICAgICAgICBcIlVSTFwiOiBcIndlbGNvbWVcIixcbiAgICAgICAgXCJrZXlcIjogXCJDUlVELUJBU0VcIixcbiAgICAgICAgXCJpY29uXCI6IFwiZ2x5cGhpY29uIGdseXBoaWNvbi1ob21lXCIsXG4gICAgICAgIFwiaWNvbl9jb2xvclwiOiBcIlwiLFxuICAgICAgICBcImltYWdlVXJsXCI6IFwiXCIsXG4gICAgICAgIFwiaW1hZ2VXaWR0aFwiOiBcIlwiLFxuICAgICAgICBcImltYWdlSGVpZ2h0XCI6IFwiXCIsXG4gICAgICAgIFwiZmlsaG9zXCI6IFtdXG4gICAgICB9XG4gICAgXVxuXHQgKiBcdDwvcHJlPlxuXHQgKiBcdCMjI0V4ZW1wbG8gZGUganNvbiBwYXJhIGFzIGtleXM6XG5cdCAqIFx0PHByZT5cbiAgICBbXG4gICAgICBcIkNSVUQtQkFTRVwiLFxuICAgICAgXCJDUlVELVVzZXJcIlxuICAgIF1cblx0ICogXHQ8L3ByZT5cblx0ICpcblx0ICpcblx0ICogIEBwYXJhbSB7U3RyaW5nfSBtZW51LXVybCBQYXLDom1ldHJvIG9icmlnYXTDs3JpbyBxdWUgaXLDoSBjb250ZXIgdW1hIHZhcmnDoXZlbCBjb20gbyBlbmRlcmXDp28gZG8gYXJxdWl2byBganNvbmAgcGFyYSBxdWUgc2VqYSBjYXJyZWdhZGEgYXMgZW50cmFkYXMgZG8gbWVudS5cblx0ICogIEBwYXJhbSB7U3RyaW5nfSBrZXlzLXVybCBQYXLDom1ldHJvIG9icmlnYXTDs3JpbyBxdWUgaXLDoSBjb250ZXIgdW1hIHZhcmnDoXZlbCBjb20gbyBlbmRlcmXDp28gZG8gYXJxdWl2byBganNvbmAgcGFyYSBxdWUgc2VqYSBjYXJyZWdhZGEgYXMgY2hhdmVzIHF1ZSBmYXLDo28gbyBmaWx0cm8gZG8gbWVudS5cblx0ICogIEBwYXJhbSB7U3RyaW5nfSBpbWFnZSBQYXLDom1ldHJvIG9icmlnYXTDs3JpbyBxdWUgaXLDoSBjb250ZXIgdW1hIHZhcmnDoXZlbCBjb20gbyBlbmRlcmXDp28gZGEgaW1hZ2VtIHF1ZSBmaWNhcsOhIG5vIG1lbnUuXG5cdCAqXG5cblx0ICovXG5cdGZ1bmN0aW9uIE1lbnUoJGh0dHAsICRjb21waWxlKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHJlc3RyaWN0OiAnRScsXG5cdFx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdFx0c2NvcGU6IHt9LFxuXHRcdFx0bGluazogZnVuY3Rpb24gKHNjb3BlLCBlbCwgYXR0cnMpIHtcblx0XHRcdFx0c2NvcGUudiA9IFtdO1xuXHRcdFx0XHR2YXIgaW5kZXhzID0gW107XG5cdFx0XHRcdHZhciBjb3VudCA9IDA7XG5cblx0XHRcdFx0dmFyIG1lbnVPcGVuID0gZmFsc2U7XG5cblx0XHRcdFx0JGh0dHAuZ2V0KGF0dHJzLm1lbnVVcmwpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcblx0XHRcdFx0XHRzY29wZS5kYWRvcyA9IGRhdGEuZGF0YTtcblx0XHRcdFx0fSwgZnVuY3Rpb24gKGRhdGEpIHtcblx0XHRcdFx0XHR0aHJvdyAnRXJybzonICsgZGF0YTtcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0JGh0dHAuZ2V0KGF0dHJzLmtleXNVcmwpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcblx0XHRcdFx0XHRzY29wZS5rZXlzID0gZGF0YS5kYXRhO1xuXHRcdFx0XHR9LCBmdW5jdGlvbiAoZGF0YSkge1xuXHRcdFx0XHRcdHRocm93ICdFcnJvOicgKyBkYXRhO1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRzY29wZS4kd2F0Y2hHcm91cChbJ2RhZG9zJywgJ2tleXMnXSwgZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdGlmIChzY29wZS5kYWRvcyAmJiBzY29wZS5rZXlzKSB7XG5cdFx0XHRcdFx0XHRnZXJhdGVNZW51cygpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0dmFyIGdlcmF0ZU1lbnVzID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdHZhciB0ZW1wbGF0ZSA9IFsnPGRpdj4nXTtcblx0XHRcdFx0XHR0ZW1wbGF0ZS5wdXNoKCc8YnV0dG9uIGlkPVwiYnRuLW1lbnVcIiBjbGFzcz1cImJ0biBidG4tbGlua1wiIG5nLWNsaWNrPVwibW9zdHJhck1lbnUoKVwiPjxpIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1hbGlnbi1qdXN0aWZ5XCI+PC9pPjwvYnV0dG9uPicpO1xuXHRcdFx0XHRcdHRlbXBsYXRlLnB1c2goJzxuYXYgaWQ9XCJtZW51XCIgY2xhc3M9XCJjb2wtc20tM1wiIG5hbWU9XCJtZW51XCI+Jyk7XG5cdFx0XHRcdFx0dGVtcGxhdGUucHVzaCgnPHVsIGNsYXNzPVwibWVudS1ob2xkZXJcIj4nKTtcblx0XHRcdFx0XHR0ZW1wbGF0ZS5wdXNoKCc8aW1nIG5nLXNyYz1cIicgKyBhdHRycy5pbWFnZSArICdcIiBhbHQ9XCJsb2dvXCIgd2lkdGg9XCI0MCVcIiBjbGFzcz1cImltZy1jZW50ZXJlZFwiPicpO1xuXHRcdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc2NvcGUuZGFkb3MubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRcdGlmIChrZXlJc1ZhbGlkKHNjb3BlLmRhZG9zW2ldLmtleSkpIHtcblx0XHRcdFx0XHRcdFx0dGVtcGxhdGUucHVzaChnZXJhck5hdlBpbGwoc2NvcGUuZGFkb3NbaV0sICdtZW51Jywge2NvdW50OiAtMSwgbGFiZWw6IG51bGx9KSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRlbXBsYXRlLnB1c2goJzwvdWw+Jyk7XG5cdFx0XHRcdFx0dGVtcGxhdGUucHVzaCgnPC9uYXY+Jyk7XG5cdFx0XHRcdFx0dGVtcGxhdGUucHVzaCgnPC9kaXY+Jyk7XG5cdFx0XHRcdFx0dGVtcGxhdGUgPSB0ZW1wbGF0ZS5qb2luKCdcXG4nKTtcblx0XHRcdFx0XHRlbC5hcHBlbmQoJGNvbXBpbGUodGVtcGxhdGUpKHNjb3BlKSk7XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0dmFyIGdlcmFyTmF2UGlsbCA9IGZ1bmN0aW9uIChwYXJhbSwgdHlwZSwgcGFyZW50KSB7XG5cblx0XHRcdFx0XHRzY29wZS52W2NvdW50XSA9IHtcblx0XHRcdFx0XHRcdGlzQWN0aXZlOiBmYWxzZSxcblx0XHRcdFx0XHRcdHBhcmVudDogcGFyZW50LmNvdW50XG5cdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdHZhciB1cmxTZWxlY3RlZCA9IGxvY2F0aW9uLmhhc2g7XG5cdFx0XHRcdFx0dmFyIHVybCA9IGFuZ3VsYXIuY29weShwYXJhbS5VUkwpO1xuXHRcdFx0XHRcdHVybCA9ICcjLycrdXJsLnJlcGxhY2UoJy4nLCcvJylcblx0XHRcdFx0XHRpZiAodXJsU2VsZWN0ZWQ9PXVybCkge1xuXHRcdFx0XHRcdFx0XHR2YXIgdGVtcGxhdGUgPSBbJzxsaSBjbGFzcz1cIicgKyB0eXBlICsgJy1vcHRpb25cIiBzdHlsZT1cImJhY2tncm91bmQ6ICM0Y2EwODlcIiA+J107XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0dmFyIHRlbXBsYXRlID0gWyc8bGkgY2xhc3M9XCInICsgdHlwZSArICctb3B0aW9uXCI+J107XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKHBhcmFtLmZpbGhvcy5sZW5ndGggPiAwICYmIHZlcmlmaWNhclBlcm1pY2FvRmlsaG8ocGFyYW0uZmlsaG9zKSkge1xuXHRcdFx0XHRcdFx0dGVtcGxhdGUucHVzaCgnPGkgIG5nLWNsYXNzPVwidlsnICsgY291bnQgKyAnXS5pc0FjdGl2ZSA/IFxcJyBnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tZG93biBcXCcgOiBcXCdnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tcmlnaHRcXCdcIiBjbGFzcz1cImZhICcgKyB0eXBlICsgJy1jb2xvclwiICBuZy1jbGljaz1cInJlc2V0YXJNZW51KCcgKyBjb3VudCArICcpXCI+PC9pPicpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRpZiAocGFyYW0uaWNvbikge1xuXHRcdFx0XHRcdFx0XHRpZiAocGFyYW0uaWNvbl9jb2xvcikge1xuXHRcdFx0XHRcdFx0XHRcdHRlbXBsYXRlLnB1c2goJzxpICBjbGFzcz1cIiAnICsgcGFyYW0uaWNvbiArICcgXCIgc3R5bGU9XCJjb2xvcjogJyArIHBhcmFtLmljb25fY29sb3IgKyAnXCIgbmctY2xpY2s9XCJyZXNldGFyTWVudSgnICsgY291bnQgKyAnKVwiPjwvaT4nKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHR0ZW1wbGF0ZS5wdXNoKCc8aSAgY2xhc3M9XCIgJyArIHBhcmFtLmljb24gKyAnIFwiIHN0eWxlPVwiY29sb3I6ICNmZmZcIiBuZy1jbGljaz1cInJlc2V0YXJNZW51KCcgKyBjb3VudCArICcpXCI+PC9pPicpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dGVtcGxhdGUucHVzaCgnPGEgdWktc3JlZj1cIicgKyBwYXJhbS5VUkwgKyAnXCIgbmctY2xhc3M9XCJ2WycgKyBjb3VudCArICddLmlzQWN0aXZlID8gXFwnaXMtYWN0aXZlXFwnIDogXFwnIFxcJ1wiJyk7XG5cdFx0XHRcdFx0aWYgKHBhcmVudC5sYWJlbCA9PT0gbnVsbCB8fCBwYXJhbS5maWxob3MubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRcdFx0dGVtcGxhdGUucHVzaCgnZ3VtZ2EtdHJhbnNsYXRlLXRhZz1cIicgKyBwYXJhbS5sYWJlbC50b0xvd2VyQ2FzZSgpICsgJy5tZW51TGFiZWxcIj4nKTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHBhcmFtLmZpbGhvcy5sZW5ndGggPT09IDApIHtcblx0XHRcdFx0XHRcdHRlbXBsYXRlLnB1c2goJ2d1bWdhLXRyYW5zbGF0ZS10YWc9XCInICsgcGFyZW50LmxhYmVsLnRvTG93ZXJDYXNlKCkgKyAnLicgKyBwYXJhbS5sYWJlbC50b0xvd2VyQ2FzZSgpICsgJ1wiPicpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0ZW1wbGF0ZS5wdXNoKHBhcmFtLmxhYmVsKTtcblx0XHRcdFx0XHR0ZW1wbGF0ZS5wdXNoKCc8L2E+Jyk7XG5cblx0XHRcdFx0XHRpZiAocGFyYW0uaW1hZ2VVcmwpIHtcblx0XHRcdFx0XHRcdGlmKHBhcmFtLmltYWdlV2lkdGggJiYgcGFyYW0uaW1hZ2VIZWlnaHQpe1xuXHRcdFx0XHRcdFx0XHR0ZW1wbGF0ZS5wdXNoKCc8YSB1aS1zcmVmPVwiJyArIHBhcmFtLlVSTCArICdcIj48aW1nICBzcmM9XCInICsgcGFyYW0uaW1hZ2VVcmwgKyAnXCIgc3R5bGU9XCJ3aWR0aDogJytwYXJhbS5pbWFnZVdpZHRoKyc7IGhlaWdodDogJytwYXJhbS5pbWFnZUhlaWdodCsnO1wiIG5nLWNsaWNrPVwicmVzZXRhck1lbnUoJyArIGNvdW50ICsgJylcIj48L2k+PC9hPicpO1xuXHRcdFx0XHRcdFx0fWVsc2Vcblx0XHRcdFx0XHRcdHRlbXBsYXRlLnB1c2goJzxhIHVpLXNyZWY9XCInICsgcGFyYW0uVVJMICsgJ1wiPjxpbWcgIHNyYz1cIicgKyBwYXJhbS5pbWFnZVVybCArICdcIiBzdHlsZT1cIndpZHRoOiAyMHB4OyBoZWlnaHQ6IDIwcHg7XCIgbmctY2xpY2s9XCJyZXNldGFyTWVudSgnICsgY291bnQgKyAnKVwiPjwvaT48L2E+Jyk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dmFyIGF1eCA9IGNvdW50O1xuXG5cdFx0XHRcdFx0Y291bnQrKztcblx0XHRcdFx0XHRpZiAocGFyYW0uZmlsaG9zLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0XHRcdHRlbXBsYXRlLnB1c2goJzx1bCBuZy1jbGFzcz1cInZbJyArIChjb3VudCAtIDEpICsgJ10uaXNBY3RpdmUgPyBcXCcgc3VibWVudS1ncm91cC1hdGl2b1xcJyA6IFxcJ3N1Ym1lbnUtZ3JvdXBcXCdcIiBjbGFzcz1cIm1lbnUtaG9sZGVyXCI+Jyk7XG5cdFx0XHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHBhcmFtLmZpbGhvcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdFx0XHRpZiAoa2V5SXNWYWxpZChwYXJhbS5maWxob3NbaV0ua2V5KSkge1xuXHRcdFx0XHRcdFx0XHRcdHRlbXBsYXRlLnB1c2goZ2VyYXJOYXZQaWxsKHBhcmFtLmZpbGhvc1tpXSwgJ3N1Ym1lbnUnLCB7Y291bnQ6IGF1eCwgbGFiZWw6IHBhcmFtLmxhYmVsfSkpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR0ZW1wbGF0ZS5wdXNoKCc8L3VsPicpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0ZW1wbGF0ZS5wdXNoKCc8L2xpPicpO1xuXHRcdFx0XHRcdHJldHVybiB0ZW1wbGF0ZS5qb2luKCdcXG4nKTtcblx0XHRcdFx0fTtcblxuXG5cdFx0XHRcdHNjb3BlLnJlc2V0YXJNZW51ID0gZnVuY3Rpb24gKGluZGV4KSB7XG5cdFx0XHRcdFx0dmFyIGk7XG5cdFx0XHRcdFx0aWYgKHNjb3BlLnZbaW5kZXhdLmlzQWN0aXZlKSB7XG5cdFx0XHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgc2NvcGUudi5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdFx0XHRzY29wZS52W2luZGV4XS5pc0FjdGl2ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0c2V0YXJUcnVlKHNjb3BlLnZbaW5kZXhdLnBhcmVudCk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IHNjb3BlLnYubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRcdFx0c2NvcGUudltpXS5pc0FjdGl2ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0c2V0YXJUcnVlKGluZGV4KTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fTtcblxuXHRcdFx0XHR2YXIga2V5SXNWYWxpZCA9IGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdFx0XHRyZXR1cm4gc2NvcGUua2V5cy5pbmRleE9mKGtleSkgIT0gLTE7XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0ZnVuY3Rpb24gc2V0YXJUcnVlKGluZGV4KSB7XG5cdFx0XHRcdFx0aWYgKGluZGV4ID49IDApIHtcblx0XHRcdFx0XHRcdHNjb3BlLnZbaW5kZXhdLmlzQWN0aXZlID0gdHJ1ZTtcblx0XHRcdFx0XHRcdHNldGFyVHJ1ZShzY29wZS52W2luZGV4XS5wYXJlbnQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHNjb3BlLm1vc3RyYXJNZW51ID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdG1lbnVPcGVuID0gIW1lbnVPcGVuO1xuXG5cdFx0XHRcdFx0dmFyIGVsbSA9IGVsLmZpbmQoJ25hdicpO1xuXHRcdFx0XHRcdGlmIChtZW51T3Blbikge1xuXHRcdFx0XHRcdFx0ZWxtLmFkZENsYXNzKCdvcGVuLW1lbnUnKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0ZWxtLnJlbW92ZUNsYXNzKCdvcGVuLW1lbnUnKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0ZnVuY3Rpb24gdmVyaWZpY2FyUGVybWljYW9GaWxobyhmaWxob3MpIHtcblx0XHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGZpbGhvcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBzY29wZS5rZXlzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdFx0XHRcdGlmIChmaWxob3NbaV0ua2V5ID09IHNjb3BlLmtleXNbal0pIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXHRcdH07XG5cdH1cblxuXHRhbmd1bGFyLm1vZHVsZSgnZ3VtZ2EuZGlyZWN0aXZlcy5tZW51JyxbXSlcblx0LmRpcmVjdGl2ZSgnZ3VtZ2FNZW51JyxNZW51KTtcblxufSkoKTtcbiIsIihmdW5jdGlvbigpe1xuXHQndXNlIHN0cmljdCc7XG5cblx0T25lVG9NYW55LiRpbmplY3QgPSBbXCIkbW9kYWxcIl07XG5cdC8qKlxuXHQgKiBAbmdkb2MgZGlyZWN0aXZlXG5cdCAqIEBuYW1lIGd1bWdhLmNvcmU6Z3VtZ2FPbmVUb01hbnlcblx0ICogQHJlc3RyaWN0IEVcblx0ICogQGRlc2NyaXB0aW9uXG5cdCAqIFx0QSBkaXJlY3RpdmUgZ3VtZ2FPbmVUb01hbnkgcG9kZSBzZXIgdXNhZGEgcXVhbmRvIMOpIG5lY2Vzc8OhcmlhIGEgY3JpYcOnw6NvIGRlIHVtYSBsaXN0YSBkZSBvYmpldG9zIGRlbnRybyBkbyBmb3JtdWzDoXJpbywgZXNwZWNpYWxtZW50ZSBxdWFuZG8gZXNzZXNcblx0ICogXHRvYmpldG9zIGFjZXNzYW0gb3V0cm9zIFNlcnZpY2VzLiBFbGEgbGFuw6dhIHVtIG1vZGFsIHBhcmEgYSBjcmlhw6fDo28gZGVzdGVzIG9iamV0b3MsIHF1ZSBwb2RlbSBzZXIgcmVjdXJzaXZvcy4gQWzDqW0gZGlzc28sIHBvc3N1aSBzdXBvcnRlIGEgZWRpw6fDo28gZSByZW1vw6fDo29cblx0ICogXHRkZXN0ZXMgcmVnaXN0cm9zLlxuXHQgKiBAcGFyYW0ge0FycmF5fSBjaGlsZHJlbiBQYXLDom1ldHJvIG9icmlnYXTDs3JpbyBxdWUgaXLDoSBjb250ZXIgdW0gQXJyYXkgcXVlIHNlcsOhIHV0aWxpemFkbyBwYXJhIGNvbnN0cnVpciBhIGxpc3RhLlxuXHQgKiBAcGFyYW0ge1N0cmluZ30gdGVtcGxhdGUtdXJsIFBhcsOibWV0cm8gb2JyaWdhdMOzcmlvIHF1ZSBpcsOhIGNvbnRlciB1bWEgc3RyaW5nIHJlZmVyZW5jaWFuZG8gYSB1cmwgbmEgcXVhbCBvIHRlbXBsYXRlIGRvIG1vZGFsIGVzdGFyw6EuXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eSBQYXLDom1ldHJvIG9icmlnYXTDs3JpbyBxdWUgaXLDoSBjb250ZXIgdW1hIHN0cmluZyBjb20gYSBwcm9wcmllZGFkZSBkbyBvYmpldG8gcXVlIHNlcsOhIG1vc3RyYWRhIG5hIGxpc3RhLlxuXHQgKiBAcGFyYW0ge1N0cmluZ30gbmFtZSAqVXRpbGl6YXIgbW9kYWwtdGl0bGUqLlxuXHQgKiBAcGFyYW0ge1N0cmluZ30gbW9kYWwtdGl0bGUgUGFyw6JtZXRybyBuw6NvIG9icmlnYXTDs3JpbyBxdWUgaXLDoSBjb250ZXIgdW1hIHN0cmluZyBjb20gbyB0w610dWxvIHF1ZSBzZXLDoSBwYXNzYWRvIHBhcmEgbyBjb250cm9sbGVyXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBjb250cm9sbGVyIFBhcsOibWV0cm8gb2JyaWdhdMOzcmlvIHF1ZSBpcsOhIGNvbnRlciB1bWEgU3RyaW5nIHF1ZSByZWZlcmVuY2lhcsOhIG8gbm9tZSBkbyBjb250cm9sbGVyIHF1ZSBzZXLDoSBhdHJpYnVpZG8gYW8gbW9kYWwuXG5cdCAqICpFc3RlIGNvbnRyb2xsZXIgbmVjZXNzaXRhIGluamV0YXIgYWzDqW0gZG8gJHNjb3BlLCBhcyBwcm9wcmllZGFkZXMgKiplbnRpdHkqKiBlICoqdGl0bGUqKiAqXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IG9uLWRlbGV0ZSBQYXLDom1ldHJvIG7Do28gb2JyaWdhdMOzcmlvIHF1ZSBpcsOhIGNvbnRlciB1bWEgdmFyacOhdmVsIHF1ZSBpcsOhIGNvbnRlciB1bWEgZnVuw6fDo28gcXVlIHNlcsOhIGNoYW1hZGEgcXVhbmRvIHVtIGVsZW1lbnRvIGRhIGxpc3RhIGZvciBkZWxldGFkby5cblx0ICogQSBmdW7Dp8OjbyBxdWUgZXN0w6Egbm8gb24tZGVsZXRlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG9uLXZhbHVlLXZpc3VhbGl6YXRpb24tb3BlbmVkIFBhcsOibWV0cm8gbsOjbyBvYnJpZ2F0w7NyaW8gcXVlIGlyw6EgY29udGVyIHVtYSB2YXJpw6F2ZWwgcXVlIHBvc3N1aXLDoSB1bWEgZnVuw6fDo28gcXVlIGlyw6Egc2VyIGV4ZWN1dGFkYSBxdWFuZG8gbyB1c3XDoXJpbyB0aXZlciBhYmVydG8gbyBtb2RhbFxuICAgKiBwYXJhIHZpc3VhbGl6YcOnw6NvIGRlIGRhZG9zXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG9uLXZhbHVlLXZpc3VhbGl6YXRpb24tY2xvc2VkIFBhcsOibWV0cm8gbsOjbyBvYnJpZ2F0w7NyaW8gcXVlIGlyw6EgY29udGVyIHVtYSB2YXJpw6F2ZWwgcXVlIHBvc3N1aXLDoSB1bWEgZnVuw6fDo28gcXVlIGlyw6Egc2VyIGV4ZWN1dGFkYSBxdWFuZG8gbyB1c3XDoXJpbyB0aXZlciBmZWNoYWRvIG8gbW9kYWxcbiAgICogcGFyYSB2aXN1YWxpemHDp8OjbyBkZSBkYWRvc1xuXHQgKlxuXHQgKi9cblx0ZnVuY3Rpb24gT25lVG9NYW55KCRtb2RhbCl7XG5cdFx0dmFyIHRlbXBsYXRlID0gW1xuXHRcdCc8ZGl2IGNsYXNzPVwiY29sLW1kLTEyXCIgc3R5bGU9XCJwYWRkaW5nLWxlZnQ6IDA7cGFkZGluZy1yaWdodDogMFwiPicsXG5cdFx0JyAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1kZWZhdWx0XCIgbmctY2xpY2s9XCJuZXdNb2RhbCgpXCI+TmV3PC9idXR0b24+Jyxcblx0XHQnICAgPHVsIGNsYXNzPVwibGlzdC1ncm91cFwiPicsXG5cdFx0JyAgICAgICA8bGkgbmctcmVwZWF0PVwiY2hpbGQgaW4gY2hpbGRyZW5cIiBjbGFzcz1cImxpc3QtZ3JvdXAtaXRlbVwiPicsXG5cdFx0JyAgICAgICAgICAge3s6OmNoaWxkW3Byb3BlcnR5XX19Jyxcblx0XHQnICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tZGVmYXVsdCBwdWxsLXJpZ2h0IGJ0bi1zbVwiIG5nLWNsaWNrPVwibmV3TW9kYWwoY2hpbGQpXCI+PGkgY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLXBlbmNpbFwiPjwvaT48L2J1dHRvbj4nLFxuXHRcdCcgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1kYW5nZXIgcHVsbC1yaWdodCBidG4tc21cIiBuZy1jbGljaz1cInJlbW92ZUZyb21MaXN0KGNoaWxkKVwiPjxpIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1yZW1vdmVcIj48L2k+PC9idXR0b24+Jyxcblx0XHQnICAgICAgIDxkaXYgY2xhc3M9XCJjbGVhcmZpeFwiPjwvZGl2PjwvbGk+Jyxcblx0XHQnICAgPHVsPicsXG5cdFx0JzwvZGl2PicsXG5cdFx0JzxkaXYgY2xhc3M9XCJjbGVhcmZpeFwiPjwvZGl2Pidcblx0XHRdO1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHJlc3RyaWN0OiAnRScsXG5cdFx0XHR0ZW1wbGF0ZTogdGVtcGxhdGUuam9pbignXFxuJyksXG5cdFx0XHRzY29wZToge1xuXHRcdFx0XHRjaGlsZHJlbjogJz0nLFxuXHRcdFx0XHR0ZW1wbGF0ZVVybDogJ0AnLFxuXHRcdFx0XHRwcm9wZXJ0eTogJ0BkaXNwbGF5YWJsZVByb3BlcnR5Jyxcblx0XHRcdFx0bmFtZTogJ0AnLFxuXHRcdFx0XHRjb250cm9sbGVyOiAnQCcsXG5cdFx0XHRcdG9uRGVsZXRlOiAnJj8nLFxuXHRcdFx0XHRvblZhbHVlVmlzdWFsaXphdGlvbk9wZW5lZDogJyY/Jyxcblx0XHRcdFx0b25WYWx1ZVZpc3VhbGl6YXRpb25DbG9zZWQ6ICcmPycsXG5cdFx0XHRcdG1vZGFsVGl0bGU6ICdAJ1xuXHRcdFx0fSxcblx0XHRcdGxpbms6IGZ1bmN0aW9uIChzY29wZSxlbG0sYXR0cnMpIHtcblx0XHRcdFx0dmFyIGV2ZW50SGFuZGxlciA9IHtcblx0XHRcdFx0XHR2YWx1ZVZpc3VhbGl6YXRpb25PcGVuZWQ6IChhdHRycy5vblZhbHVlVmlzdWFsaXphdGlvbk9wZW5lZCA/IHNjb3BlLm9uVmFsdWVWaXN1YWxpemF0aW9uT3BlbmVkIDphbmd1bGFyLm5vb3ApLFxuXHRcdFx0XHRcdHZhbHVlVmlzdWFsaXphdGlvbkNsb3NlZDogKGF0dHJzLm9uVmFsdWVWaXN1YWxpemF0aW9uQ2xvc2VkID8gc2NvcGUub25WYWx1ZVZpc3VhbGl6YXRpb25DbG9zZWQgOmFuZ3VsYXIubm9vcCksXG5cdFx0XHRcdFx0ZGVsZXRlOiAoYXR0cnMub25EZWxldGUgPyBzY29wZS5vbkRlbGV0ZSA6IGFuZ3VsYXIubm9vcClcblx0XHRcdFx0fTtcblx0XHRcdFx0c2NvcGUubmV3TW9kYWwgPSBuZXdNb2RhbDtcblx0XHRcdFx0c2NvcGUucmVtb3ZlRnJvbUxpc3QgPSByZW1vdmVGcm9tTGlzdDtcblx0XHRcdFx0c2NvcGUuZ2V0RnJvbU1vZGFsID0gZ2V0RnJvbU1vZGFsO1xuXHRcdFx0XHR2YXIgbmFtZSA9IGF0dHJzLm5hbWUgfHwgJ05ldyc7XG5cdFx0XHRcdGlmKCFzY29wZS5jaGlsZHJlbikgdGhyb3cgJ1lvdSBtdXN0IHByb3ZpZGUgYSBsaXN0IHRvIEd1bWdhT25lVG9NYW55Jztcblx0XHRcdFx0aWYoIXNjb3BlLnRlbXBsYXRlVXJsKSB0aHJvdyAnWW91IG11c3QgcHJvdmlkZSBhIHRlbXBsYXRlVXJsIGZvciB0aGUgbW9kYWwnO1xuXHRcdFx0XHRpZighc2NvcGUucHJvcGVydHkpIHRocm93ICdZb3UgbXVzdCBwcm92aWRlIGEgcHJvcGVydHkgdG8gZGlzcGxheSBpbiBHdW1nYU9uZVRvTWFueSc7XG5cdFx0XHRcdGlmKCFzY29wZS5jb250cm9sbGVyKSB0aHJvdyAnWW91IG11c3QgcHJvdmlkZSBhIGNvbnRyb2xsZXIgdG8gdGhlIG1vZGFsJztcblx0XHRcdFx0ZnVuY3Rpb24gZ2V0RnJvbU1vZGFsKHNlbGVjdGVkKXtcblx0XHRcdFx0XHRldmVudEhhbmRsZXIudmFsdWVWaXN1YWxpemF0aW9uQ2xvc2VkKCk7XG5cdFx0XHRcdFx0aWYoSlNPTi5zdHJpbmdpZnkoc2NvcGUuZXR0eSkgIT09ICd7fScpe1xuXHRcdFx0XHRcdFx0c2NvcGUuY2hpbGRyZW4uc3BsaWNlKHNjb3BlLmNoaWxkcmVuLmluZGV4T2Yoc2NvcGUuZXR0eSksMSxzZWxlY3RlZCk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHNjb3BlLmNoaWxkcmVuLnB1c2goc2VsZWN0ZWQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRmdW5jdGlvbiByZW1vdmVGcm9tTGlzdChvYmope1xuXHRcdFx0XHRcdGV2ZW50SGFuZGxlci5kZWxldGUoeyR2YWx1ZTogb2JqfSk7XG5cdFx0XHRcdFx0c2NvcGUuY2hpbGRyZW4uc3BsaWNlKHNjb3BlLmNoaWxkcmVuLmluZGV4T2Yob2JqKSwxKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRmdW5jdGlvbiBuZXdNb2RhbChvYmope1xuXHRcdFx0XHRcdHNjb3BlLmV0dHkgPSB7fTtcblx0XHRcdFx0XHRpZihvYmope1xuXHRcdFx0XHRcdFx0c2NvcGUuZXR0eT0gb2JqO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRldmVudEhhbmRsZXIudmFsdWVWaXN1YWxpemF0aW9uT3BlbmVkKCk7XG5cdFx0XHRcdFx0dmFyIG1vZGFsSW5zdGFuY2UgPSAkbW9kYWwub3Blbih7XG5cdFx0XHRcdFx0XHR0ZW1wbGF0ZVVybDogc2NvcGUudGVtcGxhdGVVcmwsXG5cdFx0XHRcdFx0XHRjb250cm9sbGVyOiBzY29wZS5jb250cm9sbGVyLFxuXHRcdFx0XHRcdFx0cmVzb2x2ZToge1xuXHRcdFx0XHRcdFx0XHRlbnRpdHk6IGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHNjb3BlLmV0dHk7XG5cdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdHRpdGxlOiBmdW5jdGlvbigpe1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBzY29wZS5uYW1lO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0bW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihnZXRGcm9tTW9kYWwpO1xuXHRcdFx0XHR9XG5cblxuXHRcdFx0fVxuXHRcdH07XG5cdH1cblxuXHRhbmd1bGFyLm1vZHVsZSgnZ3VtZ2EuZGlyZWN0aXZlcy5vbmV0b21hbnknLFtdKVxuXHRcdC5kaXJlY3RpdmUoJ2d1bWdhT25lVG9NYW55JyxPbmVUb01hbnkpXG5cblxufSkoKTtcbiIsIihmdW5jdGlvbigpe1xuXHQndXNlIHN0cmljdCc7XG5cdC8qKlxuXHQgKiBAbmdkb2MgZGlyZWN0aXZlXG5cdCAqIEBuYW1lIGd1bWdhLmNvcmU6Z3VtZ2FTZWFyY2hcblx0ICogQHJlc3RyaWN0IEVcblx0ICogQGRlc2NyaXB0aW9uIEEgZGlyZWN0aXZlIGd1bWdhU2VhcmNoIHBvZGUgc2VyIHV0aWxpemFkYSBwYXJhIGZhemVyIG1vbnRhciBxdWVyaWVzIGRlIGJ1c2NhLCBzZWphbSBlc3NhcyBidXNjYXMgbm9ybWFpcyBvdSBhdmFuw6dhZGFzLiDDiSBwb3Nzw612ZWwgZXNjb2xoZXJcblx0ICogcXVhaXMgY2FtcG9zIG5vIHF1YWwgYSBidXNjYSBzZXLDoSBmZWl0YSwgYXNzaW0gY29tbyBuYSBidXNjYSBhdmFuw6dhZGEuXG5cdCAqICMjIEV4ZW1wbG9cbiAgICAgKiBWZWphIHVtIGV4ZW1wbG8gZW0gZnVuY2lvbmFtZW50byBbYXF1aV0oaHR0cDovL2VtYmVkLnBsbmtyLmNvL2V6WklUaDNaZm13VmFvMFh6MXc2L3ByZXZpZXcpLiAgICBcblx0ICpcblx0ICogTyBjb21wb25lbnRlIHV0aWxpemEtc2UgZGUgdGFncyBxdWUgc8OzIGZ1bmNpb25hbSBkZW50cm8gZGFzIHRhZ3MgZG8gY29tcG9uZW50ZSwgcXVlIHPDo28gYXMgdGFncyBgPGFkdmFuY2VkLWZpZWxkPjwvYWR2YW5jZWQtZmllbGQ+YC4gQSB0YWcgZGUgYWR2YW5jZWQtZmllbGQgXG5cdCAqIFx0cmVjZWJlIGRvaXMgYXRyaWJ1dG9zIGNvbW8gcGFyw6JtZXRybzogYG5hbWVgIGUgYHR5cGVgIHF1ZSByZWNlYmVtICwgcmVzcGVjdGl2YW1lbnRlLCBvIG5vbWUgZG8gYXRyaWJ1dG8gYSBzZXIgcGVzcXVpc2FkbyBlIHF1YWwgc2V1IHRpcG8uXG5cdCAqIFx0PHByZT5cblx0ICogIFx0XHQ8YWR2YW5jZWQtZmllbGQgbmFtZT1cIm5vbWVcIiB0eXBlPVwic3RyaW5nXCI+PC9hZHZhbmNlZC1maWVsZD5cblx0ICogIFx0XHQ8YWR2YW5jZWQtZmllbGQgbmFtZT1cImlkYWRlXCIgdHlwZT1cIm51bWJlclwiPjwvYWR2YW5jZWQtZmllbGQ+XG5cdCAqICA8L3ByZT5cblx0ICogXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IGFkdmFuY2VkLW1ldGhvZCBQYXLDom1ldHJvIG9icmlnYXTDs3JpbyBxdWUgaXLDoSBjb250ZXIgdW1hIGZ1bsOnw6NvIHF1ZSBzZXLDoSB1dGlsaXphZGEgcGFyYSBmYXplciBhIGJ1c2NhIGF2YW7Dp2FkYS5cblx0ICogUGFyYSByZWNlYmVyIGEgcXVlcnkgYXZhbsOnYWRhLCBiYXN0YSBwYXNzYXIgdW0gcGFyw6JtZXRybyBgcGFyYW1gIHBhcmEgYSBmdW7Dp8Ojby4gYGFkdmFuY2VkLW1ldGhvZD1cImZ1bmN0aW9uKHBhcmFtKVwiYFxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZWFyY2gtbWV0aG9kIFBhcsOibWV0cm8gb2JyaWdhdMOzcmlvIHF1ZSBpcsOhIGNvbnRlciB1bWEgZnVuw6fDo28gcXVlIHNlcsOhIHV0aWxpemFkYSBwYXJhIGZhemVyIGEgYnVzY2Egc2ltcGxlcy5cblx0ICogUGFyYSByZWNlYmVyIG8gY2FtcG8gZSBhIHBlc3F1aXNhIHF1ZSBmb2kgZmVpdGEsIGJhc3RhIHBhc3NhciBvcyBwYXLDom1ldHJvcyBgZmllbGRgIGUgYHBhcmFtYCBwYXJhIGEgZnVuw6fDo28uIGBzZWFyY2gtbWV0aG9kPVwiZnVuY3Rpb24oZmllbGQscGFyYW0pXCJgLlxuXHQgKiBAcGFyYW0ge1N0cmluZ30gZmllbGRzIFBhcsOibWV0cm8gb2JyaWdhdMOzcmlvIHF1ZSBpcsOhIGNvbnRlciB1bWEgc2VxdcOqbmNpYSBkZSBjYW1wb3MgY29tIG8gcXVhbCBvIGNvbXBvbmVudGUgaXLDoSBjcmlhciBhIGxpc3RhIGRlIGF0cmlidXRvcyBxdWUgc2Vyw6NvIHBlc3F1aXPDoXZlaXMuXG5cdCAqIEV4ZW1wbG86IGBmaWVsZHM9XCJpZCxuYW1lLGNvbXBhbnksYWdlXCJgXG5cdCAqIEBwYXJhbSB7Qm9vbGVhbn0gYWR2YW5jZWQgUGFyw6JtZXRybyBuw6NvIG9icmlnYXTDs3JpbyBxdWUgaXLDoSBjb250ZXIgdW0gdmFsb3IgYm9vbGVhbm8gcGFyYSBjb250cm9sYXIgc2UgbyBjb21wb25lbnRlIGlyw6Egb3UgbsOjbyBmYXplciBidXNjYSBhdmFuw6dhZGFcblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gb24tc2VhcmNoIFBhcsOibWV0cm8gbsOjbyBvYnJpZ2F0w7NyaW8gcXVlIGlyw6EgY29udGVyIHVtYSBmdW7Dp8OjbyBxdWUgc2Vyw6EgY2hhbWFkYSBxdWFuZG8gdW1hIGJ1c2NhIHNpbXBsZXMgZm9yIGZlaXRhLiBcblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gb24tYWR2YW5jZWQtc2VhcmNoIFBhcsOibWV0cm8gbsOjbyBvYnJpZ2F0w7NyaW8gcXVlIGlyw6EgY29udGVyIHVtYSBmdW7Dp8OjbyBxdWUgc2Vyw6EgY2hhbWFkYSBxdWFuZG8gdW1hIGJ1c2NhIGF2YW7Dp2FkYSBmb3IgZmVpdGEuIFxuXHQgKlxuXHQgKiBcblx0ICovXG5cdGFuZ3VsYXIubW9kdWxlKCdndW1nYS5kaXJlY3RpdmVzLnNlYXJjaCcsXG5cdFx0W1xuXHRcdCdndW1nYS5kaXJlY3RpdmVzLnNlYXJjaC5zZWFyY2gnLFxuXHRcdCdndW1nYS5kaXJlY3RpdmVzLnNlYXJjaC5ub3JtYWxzZWFyY2gnLFxuXHRcdCdndW1nYS5kaXJlY3RpdmVzLnNlYXJjaC5hZHZhbmNlZHNlYXJjaCcsXG5cdFx0J2d1bWdhLmRpcmVjdGl2ZXMuc2VhcmNoLmFkdmFuY2VkbGFiZWwnLFxuXHRcdCdndW1nYS5kaXJlY3RpdmVzLnNlYXJjaC5zZWFyY2hoZWxwZXInLFxuXHRcdF0pO1xuXG59KSgpO1xuIiwiKGZ1bmN0aW9uKCl7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgICBOYXYuJGluamVjdCA9IFtcIiRzdGF0ZVwiLCBcIkd1bWdhV2ViU3RvcmFnZVwiLCBcIiRtb2RhbFwiLCBcIiRyb290U2NvcGVcIiwgXCIkdGltZW91dFwiXTtcbiAgICAgLyoqXG4gICAgICAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAgICAgICogQG5hbWUgIGd1bWdhLmNvcmU6Z3VtZ2FOYXZcbiAgICAgICogQHJlc3RyaWN0IEVcbiAgICAgICogQGRlc2NyaXB0aW9uIE8gY29tcG9uZW50ZSBndW1nYU5hdiDDqSB1bWEgZGlyZWN0aXZlIHF1ZSBjcmlhIHVtYSBiYXJyYSBkZSBuYXZlZ2HDp8OjbyBzdXBlcmlvciwgcGFyYSBhanVkYXIgbyB1c3XDoXJpby4gRGVudHJvIGRhIGJhcnJhIGRlIG5hdmVnYcOnw6NvLCBcbiAgICAgICogIHBvc3N1w61tb3MgdW1hIGJ1c2NhIHF1ZSwgcXVhbmRvIG8gYm90w6NvIEVOVEVSIMOpIHByZXNzaW9uYWRvLCBlbGUgcmVkaXJlY2lvbmEgcGFyYSBhIHDDoWdpbmEgZGUgQnVzY2EgTXVsdGktZW50aWRhZGVzLiBQb3NzdWkgdGFtYsOpbSBpbmZvcm1hw6fDtWVzIHNvYnJlIG8gdXN1w6FyaW8gcXVlIGVzdMOhIGxvZ2FkbyxcbiAgICAgICogIHVtYSBvcMOnw6NvIHBhcmEgZmF6ZXIgbyBsb2dvdXQgZSBvdXRyYSBwYXJhIGFsdGVyYXIgYSBzZW5oYS5cbiAgICAgICogICMjIEV4ZW1wbG9cbiAgICAgICogIFZlamEgdW0gZXhlbXBsbyBlbSBmdW5jaW9uYW1lbnRvIFthcXVpXShodHRwOi8vZW1iZWQucGxua3IuY28vUGVKSEFTNnZpdXR1ZWt3NjE0WkwvcHJldmlldykuICAgXG4gICAgICAqICBAcGFyYW0ge1N0cmluZ30gdGl0bGUgUGFyw6JtZXRybyBuw6NvIG9icmlnYXTDs3JpbyBxdWUgY29udMOpbSB1bWEgc3RyaW5nIHF1ZSBzZXLDoSBvIHTDrXR1bG8gcXVlIGFwYXJlY2Vyw6EgbmEgYmFycmEgZGUgbmF2ZWdhw6fDo28uIFxuICAgICAgKiAgQHBhcmFtIHtCb29sZWFufSBtdWx0aS1lbnRpdHkgUGFyw6JtZXRybyBuYW8gb2JyaWdhdMOzcmlvIHF1ZSBjb250w6ltIHVtIHZhbG9yIGJvb2xlYW5vIHBhcmEgY29tcGlsYXIgb3UgbsOjbyBhIGJ1c2NhIG11bHRpZW50aWRhZGUuIFBvciBwYWRyw6NvLCBvIHZhbG9yIMOpIHRydWUuXG4gICAgICAqICBAcGFyYW0ge1N0cmluZ30gcHV0LXVybCBQYXLDom1ldHJvIG7Do28gb2JyaWdhdMOzcmlvIHF1ZSBjb250w6ltIHVtYSBTdHJpbmcgb3UgdW1hIHZhcmnDoXZlbCBxdWUgZXN0YXLDoSBubyAkc2NvcGUgZGEgZGlyZWN0aXZlIHBhcmEgYXRyaWJ1aXIgdW1hIHVybCBwYXJhIGZhemVyIG8gcHV0IGRvIGFsdGVyYXIgYSBzZW5oYS5cbiAgICAgICogIEBwYXJhbSB7U3RyaW5nfSBzdGF0ZSBQYXLDom1ldHJvIG9icmlnYXTDs3JpbyBxdWUgY29udMOpbSB1bWEgU3RyaW5nIGNvbSBvICRzdGF0ZSBwYXJhIHF1YWwgc2Vyw6EgcmVkaXJlY2lvbmFkbyBxdWFuZG8gbyB1c3XDoXJpbyBjbGljYXIgZW0gTG9nb3V0LlxuICAgICAgKi9cbiAgICAgZnVuY3Rpb24gTmF2KCRzdGF0ZSwgR3VtZ2FXZWJTdG9yYWdlLCAkbW9kYWwsICRyb290U2NvcGUsICR0aW1lb3V0KSB7XG4gICAgICAgICAgICAgICAgIHZhciB0ZW1wbGF0ZSA9IFtcbiAgICAgICAgICAgICAgICAgICAgICc8bmF2IGlkPVwibmF2YmFyXCI+JyxcbiAgICAgICAgICAgICAgICAgICAgICcgICA8YSBocmVmPVwiI1wiIGNsYXNzPVwibmF2YmFyLWxvZ29cIiBzdHlsZT1cIiAgZmxvYXQ6IGxlZnQ7XCI+e3t0aXRsZSB8IHVwcGVyY2FzZX19PC9hPicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICAgPHNwYW4gc3R5bGU9XCJjb2xvcjogd2hpdGU7IGZvbnQtc2l6ZTogMS40ZW07bWFyZ2luLWxlZnQ6IDIlO2Zsb2F0OiBsZWZ0O1wiPjxzbWFsbD57e2luZm8ub3JnYW5pemF0aW9ufX08L3NtYWxsPjwvc3Bhbj4nLFxuICAgICAgICAgICAgICAgICAgICAgJyA8ZGl2IGNsYXNzPVwibmF2YmFyLWZvcm0gbmF2YmFyLWxlZnRcIiBuZy10cmFuc2NsdWRlPjwvZGl2PicsXG4gICAgICAgICAgICAgICAgICAgICAnICAgPGIgY2xhc3M9XCJwdWxsLXJpZ2h0XCI+PGltZyBuZy1zaG93PVwiaW5mby5waWN0dXJlXCIgY2xhc3M9XCJpbWctY2lyY2xlXCIgc3R5bGU9XCJ3aWR0aDogNDBweDtoZWlnaHQ6IDQwcHg7bWFyZ2luLXJpZ2h0OjEwcHg7XCIgc3JjPVwie3tpbmZvLnBpY3R1cmV9fVwiIC8+IDxhIGhyZWYgbmctYmx1cj1cImhpZGVQYW5lbCgpXCIgY2xhc3M9XCJzdGF0dXMtbmF2YmFyXCIgbmctY2xpY2s9XCJzaG93UGFuZWxOYXZCYXIoKVwiPjxzbWFsbCAgc3R5bGU9XCJmb250LXNpemU6IDg1JTtcIj57e2luZm8ubmFtZX19ICZuYnNwOyZuYnNwOyA8aSBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tdHJpYW5nbGUtYm90dG9tXCIgc3R5bGU9XCJtYXJnaW4tbGVmdDogMXB4XCI+PC9pPiA8L3NtYWxsPjwvYT48L2I+JyxcbiAgICAgICAgICAgICAgICAgICAgICcgICAgPHNwYW4gbmctaWY9XCJtdWx0aWVudGl0eVwiIG5nLWNsaWNrPVwidHJlYXRVcmwoKVwiICBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tc2VhcmNoIGJ0biAgcHVsbC1yaWdodFwiIHN0eWxlPVwiY29sb3I6I2ZmZjsgIHBhZGRpbmctdG9wOiAxJTttYXJnaW4tcmlnaHQ6IDUlO2hlaWdodDogMTAwJTtcIj48L3NwYW4+JyxcbiAgICAgICAgICAgICAgICAgICAgICcgICAgPGlucHV0IG5nLWlmPVwibXVsdGllbnRpdHlcIiB0eXBlPVwidGV4dFwiIGlkPVwiaW5wdXRTZWFyY2hcIiBuZy1ibHVyPVwiaW5wdXRWaXNpYmxlID0gZmFsc2VcIiBuZy1rZXl1cD1cInN1Ym1pdFNlYXJjaCgkZXZlbnQpXCIgc3R5bGU9XCIgIGJhY2tncm91bmQ6IG5vbmUgcmVwZWF0IHNjcm9sbCAwIDAgcmdiYSgyNDQsIDIxNCwgMjE0LCAwLjE1KTsgJyxcbiAgICAgICAgICAgICAgICAgICAgICcgICAgICAgICAgICBib3JkZXI6IGRvdWJsZTsgJyxcbiAgICAgICAgICAgICAgICAgICAgICcgICAgICAgICAgICBmb250LXNpemU6IDE0cHg7ICcsXG4gICAgICAgICAgICAgICAgICAgICAnICAgICAgICAgICAgb3V0bGluZTogMDsgJyxcbiAgICAgICAgICAgICAgICAgICAgICcgICAgICAgICAgICBjb2xvcjogI2ZmZjsgICcsXG4gICAgICAgICAgICAgICAgICAgICAnICAgICAgICAgICAgaGVpZ2h0OiAxMDAlOyAnLFxuICAgICAgICAgICAgICAgICAgICAgJyAgICAgICAgICAgIG1hcmdpbjogMDsgJyxcbiAgICAgICAgICAgICAgICAgICAgICcgICAgICAgICAgICBib3JkZXItY29sb3I6IHJnYmEoMCwgMCwgMCwgMCk7ICcsXG4gICAgICAgICAgICAgICAgICAgICAnei1pbmRleDogMjAwMDtcIiBuZy1tb2RlbD1cInNlYXJjaFwiIG5nLXNob3c9XCJpbnB1dFZpc2libGVcIiBjbGFzcz1cIm5hdmJhci1pbnB1dCBmbGlwLXJpZ2h0XCIgcGxhY2Vob2xkZXI9XCJTZWFyY2hcIj4nLFxuICAgICAgICAgICAgICAgICAgICAgJzwvbmF2PicsXG4gICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm5hdi1wYW5lbFwiIG5nLXNob3c9XCJzaG93UGFuZWxOYXZcIj4nLFxuICAgICAgICAgICAgICAgICAgICAgJyAgIDxkaXYgY2xhc3M9XCJwYW5lbC1ib2R5XCIgaWQ9XCJuYXZQYW5lbEJvZHlcIj4nLFxuICAgICAgICAgICAgICAgICAgICAgJyAgICAgICAgICAgPGJ1dHRvbiBuZy1yZXBlYXQ9XCJsaW5rIGluIG5hdmxpbmtzXCIgbmctY2xpY2s9XCJoYW5kbGUobGluaylcIiBjbGFzcz1cImJ0biBidG4tbGlua1wiIHN0eWxlPVwiZGlzcGxheTpibG9jazt3aWR0aDogMTAwJTtjb2xvcjogYmxhY2s7IGZvbnQtc2l6ZTogMC45ZW07XCI+PGkgY2xhc3M9XCJ7e2xpbmsuZ2x5cGhpY29ufX1cIj4gPC9pPnt7bGluay50ZXh0fX0gPC9idXR0b24+JyxcbiAgICAgICAgICAgICAgICAgICAgICcgICA8L2Rpdj4nLFxuICAgICAgICAgICAgICAgICAgICAgJzwvZGl2PidcbiAgICAgICAgICAgICAgICAgXTtcblxuICAgICAgICAgICAgICAgICB2YXIgbW9kYWxUZW1wbGF0ZSA9IFtcbiAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+Q2hhbmdlIFBhc3N3b3JkPC9kaXY+JyxcbiAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICAgPGZvcm0gbmFtZT1cIk1vZGFsRm9ybVwiIG5vdmFsaWRhdGU+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgICA8bGFiZWw+IDxzbWFsbD5PbGQgUGFzc3dvcmQ8L3NtYWxsPjwvbGFiZWw+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgICA8aW5wdXQgdHlwZT1cInBhc3N3b3JkXCIgbmcta2V5dXA9XCJ2YWxpZFBhc3N3b3JkKHVzZXIubmV3cGFzcywgdXNlci5vbGRwYXNzKVwiIG5nLWZvY3VzPVwib2xkUGFzc3dvcmRJbnZhbGlkPWZhbHNlXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBuZy1tb2RlbD1cInVzZXIub2xkcGFzc1wiIHJlcXVpcmVkLz4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgIDxsYWJlbCBjbGFzcz1cInRleHQtZGFuZ2VyXCIgc3R5bGU9XCJ3aWR0aDogMTAwJTtcIiAgbmctc2hvdz1cIm9sZFBhc3N3b3JkSW52YWxpZFwiPkVzdGEgbsOjbyDDqSBzdWEgc2VuaGEgYW50aWdhPC9sYWJlbD4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgIDxsYWJlbD48c21hbGw+IE5ldyBQYXNzd29yZDwvc21hbGw+PC9sYWJlbD4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgIDxpbnB1dCB0eXBlPVwicGFzc3dvcmRcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIG5nLWtleXVwPVwidmFsaWRQYXNzd29yZCh1c2VyLm5ld3Bhc3MsIHVzZXIub2xkcGFzcylcIiBuZy1tb2RlbD1cInVzZXIubmV3cGFzc1wiIHJlcXVpcmVkLz4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgIDxsYWJlbCBjbGFzcz1cInRleHQtZGFuZ2VyXCIgc3R5bGU9XCJ3aWR0aDogMTAwJTtcIiAgbmctc2hvdz1cIm5ld1Bhc3N3b3JkSW52YWxpZFwiPlBvciBmYXZvciBpbnNpcmEgdW1hIHNlbmhhIGRpZmVyZW50ZSBkYSBhbnRpZ2EuPC9sYWJlbD4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgIDxsYWJlbD48c21hbGw+IE5ldyBQYXNzd29yZCAoYWdhaW4pPC9zbWFsbD48L2xhYmVsPicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICAgPGlucHV0IHR5cGU9XCJwYXNzd29yZFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgbmcta2V5dXA9XCJ2YWxpZFBhc3N3b3JkQ29uZmlybSh1c2VyLm5ld3Bhc3MsdXNlci5uZXdwYXNzY2hlY2spXCIgbmctbW9kZWw9XCJ1c2VyLm5ld3Bhc3NjaGVja1wiIHJlcXVpcmVkLz4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgIDxsYWJlbCBjbGFzcz1cInRleHQtZGFuZ2VyXCIgc3R5bGU9XCJ3aWR0aDogMTAwJTtcIiAgbmctc2hvdz1cIm5ld1Bhc3N3b3JkQ29uZmlybVwiPlJlcGl0YSBhIG5vdmEgc2VuaGEgY29ycmV0YW1lbnRlLjwvbGFiZWw+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nLFxuICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1jbGljaz1cIm9rKHVzZXIpXCIgdHlwZT1cInN1Ym1pdFwiIG5nLWRpc2FibGVkPVwiTW9kYWxGb3JtLiRpbnZhbGlkIHx8ICFidG5FbmFibGVkXCI+IFNhdmU8L2J1dHRvbj4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLXdhcm5pbmdcIiBuZy1jbGljaz1cImNhbmNlbCgpXCIgdHlwZT1cImJ1dHRvblwiPiBDYW5jZWw8L2J1dHRvbj4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzwvZGl2PicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPC9mb3JtPiddO1xuICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgICAgICAgICAgIHNjb3BlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgIHRyYW5zY2x1ZGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogdGVtcGxhdGUuam9pbignXFxuJyksXG4gICAgICAgICAgICAgICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsLCBhdHRycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHB1dFVybCA9IGF0dHJzLnB1dFVybDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGF0dHJzLm11bHRpRW50aXR5ID09IFwidHJ1ZVwiIHx8ICFhdHRycy5tdWx0aUVudGl0eSkgc2NvcGUubXVsdGllbnRpdHkgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgKCFzY29wZVthdHRycy5wdXRVcmxdKSA/IHB1dFVybCA9IHNjb3BlW2F0dHJzLnB1dFVybF0gOiBhbmd1bGFyLm5vb3A7XG4gICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuaW5mbyA9IEd1bWdhV2ViU3RvcmFnZS5nZXRTZXNzaW9uU3RvcmFnZUl0ZW0oJ3VzZXInKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5uYXZsaW5rcyA9IFt7dGV4dDogJ0NoYW5nZSBQYXNzd29yZCcsIGdseXBoaWNvbjogJ2dseXBoaWNvbiBnbHlwaGljb24tdXNlcicsIHZhbHVlOiAncGFzcyd9LCB7dGV4dDogJ0xvZ291dCcsIGdseXBoaWNvbjogJ2dseXBoaWNvbiBnbHlwaGljb24tbG9nLW91dCcsIHZhbHVlOiAnbG9nb3V0J31dO1xuICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLmlucHV0VmlzaWJsZSA9IGZhbHNlOyAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS50aXRsZSA9IGF0dHJzLnRpdGxlIHx8ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLnRyZWF0VXJsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5pbnB1dFZpc2libGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5wdXRTZWFyY2gnKS5mb2N1cygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAyMDApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS4kb24oJ2Nsb3NlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5zaG93UGFuZWxOYXYgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5zaG93UGFuZWxOYXZCYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLnNob3dQYW5lbE5hdiA9ICFzY29wZS5zaG93UGFuZWxOYXY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2JqID0ge307XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5zdWJtaXRTZWFyY2ggPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGtleV9jb2RlID0gZXZlbnQua2V5Q29kZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtleV9jb2RlID09PSAxMylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnbXVsdGllbnRpdHknLCB7J3NlYXJjaCc6IHNjb3BlLnNlYXJjaH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuaGlkZVBhbmVsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5zaG93UGFuZWxOYXYgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMjAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuaGFuZGxlID0gZnVuY3Rpb24gKGxpbmspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuc2hvd1BhbmVsTmF2ID0gIXNjb3BlLnNob3dQYW5lbE5hdjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChsaW5rLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdwYXNzJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbW9kYWxJbnN0YW5jZSA9ICRtb2RhbC5vcGVuKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6IG1vZGFsVGVtcGxhdGUuam9pbignXFxuJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFtcIiRzY29wZVwiLCBcIiRtb2RhbEluc3RhbmNlXCIsIFwiJGh0dHBcIiwgXCJHdW1nYVdlYlN0b3JhZ2VcIiwgZnVuY3Rpb24gKCRzY29wZSwgJG1vZGFsSW5zdGFuY2UsICRodHRwLCBHdW1nYVdlYlN0b3JhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1c2VyU2Vzc2lvbiA9IEd1bWdhV2ViU3RvcmFnZS5nZXRTZXNzaW9uU3RvcmFnZUl0ZW0oJ3VzZXInKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5idG5FbmFibGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub2xkUGFzc3dvcmRJbnZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3UGFzc3dvcmRDb25maXJtID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3UGFzc3dvcmRJbnZhbGlkID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS52YWxpZFBhc3N3b3JkQ29uZmlybSA9IGZ1bmN0aW9uIChwYXNzd29yZCwgY29uZmltUGFzc3dvcmQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHBhc3N3b3JkICE9PSBjb25maW1QYXNzd29yZCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdQYXNzd29yZENvbmZpcm0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3UGFzc3dvcmRDb25maXJtID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lbmFibGVkQnRuKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS52YWxpZFBhc3N3b3JkID0gZnVuY3Rpb24gKHBhc3N3b3JkLCBvbGRQYXNzd29yZCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnVzZXIubmV3cGFzc2NoZWNrID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYocGFzc3dvcmQgPT0gb2xkUGFzc3dvcmQgJiYgcGFzc3dvcmQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3UGFzc3dvcmRJbnZhbGlkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld1Bhc3N3b3JkSW52YWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZW5hYmxlZEJ0bigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZW5hYmxlZEJ0biA9IGZ1bmN0aW9uICgpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCEkc2NvcGUubmV3UGFzc3dvcmRDb25maXJtICYmICEkc2NvcGUubmV3UGFzc3dvcmRJbnZhbGlkKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5idG5FbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5idG5FbmFibGVkPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAucHV0KGF0dHJzLnB1dFVybCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyOiB1c2VyU2Vzc2lvbi51c2VyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXNzd29yZDogdXNlci5vbGRwYXNzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdQYXNzd29yZDogdXNlci5uZXdwYXNzfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEucmVzcG9uc2UgPT0gJ0JBRF9QQVNTV09SRCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9sZFBhc3N3b3JkSW52YWxpZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhLnJlc3BvbnNlID09ICdPSycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdzdWNjZXNzTWVzc2FnZScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnU2VuaGEgYWx0ZXJhZGEnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ1N1YSBzZW5oYSBmb2kgYWx0ZXJhZGEgY29tIHN1Y2Vzc28uJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbW9kYWxJbnN0YW5jZS5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRtb2RhbEluc3RhbmNlLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbW9kYWxJbnN0YW5jZS5kaXNtaXNzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKHNlbGVjdGVkSXRlbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5zZWxlY3RlZCA9IHNlbGVjdGVkSXRlbTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2xvZ291dCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHN0YXRlLmdvKGF0dHJzLnN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgZWwuZmluZCgnaW5wdXQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm9uKCdrZXlwcmVzcycsIGZ1bmN0aW9uIChrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGsua2V5Q29kZSA9PSAxMylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUudHJlYXRVcmwoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgfVxuXG4gICAgYW5ndWxhci5tb2R1bGUoJ2d1bWdhLmRpcmVjdGl2ZXMubmF2JyxbJ3VpLmJvb3RzdHJhcCddKVxuICAgIC5kaXJlY3RpdmUoJ2d1bWdhTmF2JyxOYXYpXG59KSgpO1xuIiwiKGZ1bmN0aW9uKCl7XG4gICd1c2Ugc3RyaWN0JztcbiAgLyoqXG4gICAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAgICogQG5hbWUgZ3VtZ2EuY29yZTpndW1nYVRhYmxlXG4gICAqIEByZXN0cmljdCBFXG4gICAqIEBkZXNjcmlwdGlvbiBPIGNvbXBvbmVudGUgKipHdW1nYVRhYmxlKiogc2VydmUgcGFyYSBleHBvciBkYWRvcyBlbSBmb3JtYSBkZSB0YWJlbGEuXG4gICAqIE8gY29tcG9uZW50ZSBleHDDtWUgbm8gJHNjb3BlLnNlbGVjdGVkRW50aXRpZXMgdW0gYXJyYXkgY29udGVuZG8gb3Mgb2JqZXRvcyBkYXMgbGluaGFzIHNlbGVjaW9uYWRhcyBwYXJhIHF1ZSBvIGRlc2Vudm9sdmVkb3IgcG9zc2EgdXNhLWxvcyBlbSBhw6fDtWVzLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBVbSBleGVtcGxvIGRhIGRpcmVjdGl2ZSBndW1nYVRhYmxlIGZ1bmNpb25hbmRvIHBvZGUgc2VyIGVuY29udHJhZG8gW2FxdWldKGh0dHA6Ly9lbWJlZC5wbG5rci5jby9TQUxrcDViS1JaMWF5d3NycG1FWCkuXG4gICAqICA8cHJlPlxuICAgKiAgICA8Z3VtZ2EtdGFibGUgdmFsdWVzPVwibGlzdFwiIGNvbHVtbnM9XCJuYW1lLGFnZVwiPjwvZ3VtZ2EtdGFibGU+XG4gICAqICAgIDxzY3JpcHQ+XG4gICAqICAgICRzY29wZS5saXN0ID0gW3tuYW1lOiAnR3VpbGhlcm1lJywgYWdlOiAyOH0se25hbWU6ICdJZ29yJywgYWdlOiAxOX1dO1xuICAgKiAgICA8L3NjcmlwdD5cbiAgICogIDwvcHJlPlxuICAgKiBcbiAgICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlcyBBdHJpYnV0byBvYnJpZ2F0w7NyaW8uIERldmUgc2VyIG8gbm9tZSBkbyBhcnJheSBleHBvc3RvIG5vICRzY29wZSBwYXJhIHBvcHVsYXIgYSB0YWJlbGEuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBjb2x1bW5zIEF0cmlidXRvIG9icmlnYXTDs3Jpby4gQXMgcHJvcHJpZWRhZGVzIGRvIG9iamV0byBxdWUgc2Vyw6NvIGFwcmVzZW50YWRvcyBjb21vIGNvbHVuYXMgbmEgdGFiZWxhLCBcbiAgICogQHBhcmFtIHtTdHJpbmd9IHNpemUgUG9zc3VlbSAzIG9ww6fDtWVzIGRlIHRhbWFuaG9zLCAqKmxhcmdlKiosICoqbWVkaXVtKiogZSAqKnNtYWxsKiosIHF1ZSByZXNwZWN0aXZhbWVudGUgb2N1cGFtLCB0b2RvIG8gZXNwYcOnbyBkYSByb3csIGRvaXMgdGVyw6dvcyBlIFxuICAgKiB1bSB0ZXLDp28uIE8gdmFsb3IgcGFkcsOjbyDDqSBsYXJnZS5cbiAgICogQHBhcmFtIHtTdHJpbmd9IHRyYW5zbGF0ZS1lbnRpdHkgTm9tZSBkYSBlbnRpZGFkZS5cbiAgICogQHBhcmFtIHtBcnJheX0gcGFnZXMgRGV2ZSBjb250ZXIgb3MgdmFsb3JlcyBwYXJhIGFwcmVzZW50YXIgb3DDp8O1ZXMgZGUgcmVnaXN0cm9zIHBvciBww6FnaW5hLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gdGFibGUtY2xhc3MgUG9zc3VlbSAzIG9ww6fDtWVzLCAqKmJvcmRlcmVkKiosICoqc3RyaXBlZCoqIGUgKipjb25kZW5zZWQqKiwgcXVlIHJlc3BlY3RpdmFtZW50ZSwgYWRpY2lvbmEgYm9yZGFzIGEgdGFiZWxhLFxuICAgKiBhbHRlcm5hIGNvcmVzIGRhcyBsaW5oYXMgZSBkaW1pbnVpIG8gZXNwYcOnYW1lbnRvIGludGVybm8gZGFzIGxpbmhhcyBlIGNvbHVuYXMuIE8gdmFsb3IgcGFkcsOjbyDDqSBib3JkZXJlZC5cbiAgICogbyBjb21wb25lbnRlIHNlZ3VpcsOhIGEgb3JkZW0gZGUgY29sdW5hcyBhZGljaW9uYWRhIGFvIGF0cmlidXRvLlxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IG11bHRpLXNlbGVjdGlvbiDDiSB0cnVlIHBvciBwYWRyw6NvLCBkZXRlcm1pbmEgYSBwb3NzaWJpbGlkYWRlIGRhIHNlbGXDp8OjbyBkZSB2w6FyaWFzIGVudGlkYWRlcyBvdSBhcGVuYXNcbiAgICogdW1hIHBvciB2ZXouXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHNvcnQtZnVuY3Rpb24gTm9tZSBkYSBmdW7Dp8OjbyBhdHJpYnVpZGEgYW8gJHNjb3BlIHBhcmEgbWFuaXB1bGFyIGEgb3JkZW5hw6fDo28sIGEgZnVuw6fDo28gcmVjZWJlIGRvaXMgXG4gICAqIHBhcsOibWV0cm9zLCAqKmZpZWxkKiogZSAqKndheSoqIHF1ZSBzZXLDo28sIGEgY29sdW5hIGUgYSBkaXJlw6fDo28gZGEgb3JkZW5hw6fDo28gcmVzcGVjdGl2YW1lbnRlLCBleGlzdGVtIGR1YXMgZGlyZcOnw7VlcyxcbiAgICogKiphc2MqKiBvdSAqKmRlc2MqKi5cbiAgICogQHBhcmFtIHtTdHJpbmd9IHNvcnQtZGVmYXVsdCBEZXZlIGNvbnRlciBhICoqY29sdW5hKiogZSBhICoqZGlyZcOnw6NvKiogc2VwYXJhZG9zIHBvciB2aXJndWxhLCBzZXLDoSBhIG9yZGVuYcOnw6NvIHBhZHLDo28gbmEgcHJpbWVpcmEgZXhpYmnDp8OjbyBkYSB0YWJlbGEuXG4gICAqIEBwYXJhbSB7RXhwcmVzc2lvbn0gcm93LWNsYXNzIERldmUgY29udGVyIHVtYSBleHByZXNzw6NvIGNvbmRpY2lvbmFsIHBhcmEgbWFyY2FyIGRldGVybWluYWRhcyBsaW5oYXMgY29ycmVzcG9uZGVudGVzIGNvbW8gXG4gICAqIHZlcmRhZGVpcmFzIHBlcmFudGUgYSBleHByZXNzw6NvLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvblNlbGVjdCBOb21lIGRhIGZ1bsOnw6NvIHF1ZSBzZXLDoSBleGVjdXRhZGEgYW8gZXZlbnRvIGNsaWNrLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvblNvcnQgTm9tZSBkYSBmdW7Dp8OjbyBxdWUgc2Vyw6EgZXhlY3V0YWRhIGFvIGV2ZW50byBkZSBzb3J0LlxuICAgKi9cbiAgIFRhYmxlLiRpbmplY3QgPSBbXCJHdW1nYVV0aWxzXCIsIFwiJGNvbXBpbGVcIiwgXCIkcm9vdFNjb3BlXCIsIFwiJHN0YXRlXCIsIFwiR3VtZ2FLZXlib2FyZFwiLCBcIiR0aW1lb3V0XCJdO1xuICAgZnVuY3Rpb24gVGFibGUoR3VtZ2FVdGlscywgJGNvbXBpbGUsJHJvb3RTY29wZSwkc3RhdGUsR3VtZ2FLZXlib2FyZCwkdGltZW91dCkge1xuICAgIHJldHVybiB7XG4gICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgc2NvcGU6IHtcbiAgICAgICAgbXVsdGk6ICc9P211bHRpU2VsZWN0aW9uJyxcbiAgICAgICAgbGlzdDogJz12YWx1ZXMnLFxuICAgICAgICBwYWdlczogJz1wYWdlcycsXG4gICAgICAgIHNvcnQ6ICcmP3NvcnRGdW5jdGlvbicsXG4gICAgICAgIHJvd0NsYXNzOiAnPT8nLFxuICAgICAgICBvblNlbGVjdDogJyY/JyxcbiAgICAgICAgb25Tb3J0OiAnJj8nXG4gICAgICB9LFxuICAgICAgbGluazogTGlua0ZuLFxuICAgICAgdHJhbnNjbHVkZTogdHJ1ZVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBMaW5rRm4oc2NvcGUsIGVsbSwgYXR0cnMsIGN0cmwsIHRyYW5zY2x1ZGVGbikge1xuICAgICAgdmFyIGV2ZW50SGFuZGxlciA9IHtcbiAgICAgICAgc2VsZWN0OiAoYXR0cnMub25TZWxlY3QgPyBzY29wZS5vblNlbGVjdCA6IGFuZ3VsYXIubm9vcCksXG4gICAgICAgIHNvcnQ6IChhdHRycy5vblNvcnQgPyBzY29wZS5vblNvcnQ6IGFuZ3VsYXIubm9vcClcbiAgICAgIH07XG5cbiAgICAgIHNjb3BlLiRvbignX2NsZWFuJyxmdW5jdGlvbigpe1xuICAgICAgIHNjb3BlLmNsZWFuU2VhcmNoKCk7XG4gICAgIH0pO1xuXG4gICAgICB2YXIgQ29sdW1uT2JqZWN0ID0ge307XG4gICAgICBzY29wZS5pbmRleGVzID0gW107XG4gICAgICBzY29wZS50cnMgPSBbXTtcbiAgICAgIHNjb3BlLiRwYXJlbnQuc2VsZWN0ZWRFbnRpdGllcyA9IFtdO1xuICAgICAgc2NvcGUub2JqZWN0Q29sdW1uID0gW107XG4gICAgICBzY29wZS5jb25kaXRpb25hbENvbHVtbnMgPSBbXTtcbiAgICAgIHZhciByYXdUYWJsZUNvbmZpZyA9IHtcbiAgICAgICAgbXVsdGk6IHNjb3BlLm11bHRpLFxuICAgICAgICBsaXN0OiBbXSxcbiAgICAgICAgcGFnZXM6IHNjb3BlLnBhZ2VzIHx8IFsxMCwgMjUsIDUwXSxcbiAgICAgICAgc29ydEZuOiBhdHRycy5zb3J0PyBzY29wZS5zb3J0IDogYW5ndWxhci5ub29wLFxuICAgICAgICBzb3J0RGY6ICEhYXR0cnMuc29ydERlZmF1bHQ/IGF0dHJzLnNvcnREZWZhdWx0LnNwbGl0KCcsJykgOiBmYWxzZSxcbiAgICAgICAgc2l6ZTogYXR0cnMuc2l6ZSB8fCAnbGFyZ2UnLFxuICAgICAgICBjbGFzczogYXR0cnMudGFibGVDbGFzcyB8fCAnYm9yZGVyZWQnLFxuICAgICAgICBjb2x1bW5zOiBhdHRycy5jb2x1bW5zLnNwbGl0KCcsJyksXG4gICAgICAgIGhlYWRpbmdzOiBbXSxcbiAgICAgICAgdHJhbnNsYXRlOiBhdHRycy50cmFuc2xhdGVFbnRpdHksXG4gICAgICB9O1xuICAgICAgdmFyIGl0ZW1zUGVyUGFnZSA9IHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCdpdGVtc1BlclBhZ2UnKSB8fCByYXdUYWJsZUNvbmZpZy5wYWdlc1swXTtcbiAgICAgIHNjb3BlLml0ZW1zUGVyUGFnZSA9IGl0ZW1zUGVyUGFnZTtcbiAgICAgIHNjb3BlLiRwYXJlbnQuaXRlbXNQZXJQYWdlID0gaXRlbXNQZXJQYWdlO1xuXG4gICAgICBzY29wZS4kd2F0Y2goJ2xpc3QnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChzY29wZS5saXN0KSB7XG4gICAgICAgICAgc2NvcGUuJHBhcmVudC5zZWxlY3RlZEVudGl0aWVzID0gW107XG4gICAgICAgICAgc2NvcGUudGFibGVjb25maWcubGlzdCA9IHNjb3BlLmxpc3Q7XG4gICAgICAgICAgc2NvcGUuaW5kZXhlcyA9IFtdO1xuXG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBzZXRDb2x1bW5Db25maWcocmF3VGFibGVDb25maWcpO1xuXG4gICAgICBmdW5jdGlvbiBzZXRDb2x1bW5Db25maWcocmF3Q29uZmlnKSB7XG4gICAgICAgIHJhd0NvbmZpZy5jb2x1bW5zLmZvckVhY2goZnVuY3Rpb24gKGVsbSkge1xuICAgICAgICAgIHZhciBvYmogPSB7XG4gICAgICAgICAgICBsYWJlbDogR3VtZ2FVdGlscy5jYW1lbENhc2UoZWxtKSxcbiAgICAgICAgICAgIGZpZWxkOiBlbG1cbiAgICAgICAgICB9O1xuICAgICAgICAgIHJhd0NvbmZpZy5oZWFkaW5ncy5wdXNoKHtsYWJlbDogb2JqLmxhYmVsLCB3YXk6IG51bGx9KTtcbiAgICAgICAgICByYXdDb25maWcuY29sdW1ucy5zcGxpY2UocmF3Q29uZmlnLmNvbHVtbnMuaW5kZXhPZihlbG0pLCAxLCBvYmopO1xuICAgICAgICB9KTtcblxuICAgICAgICB0cmFuc2NsdWRlRm4oZnVuY3Rpb24gKGNsb25lKSB7XG4gICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGNsb25lLCBmdW5jdGlvbiAoY2xvbmVFbCkge1xuICAgICAgICAgICAgaWYgKGNsb25lRWwubm9kZU5hbWUgIT0gXCIjdGV4dFwiKSB7XG4gICAgICAgICAgICAgIHN3aXRjaCAoY2xvbmVFbC5ub2RlTmFtZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ0dVTUdBLUJPT0xFQU4tTUFTSyc6XG4gICAgICAgICAgICAgICAgcmF3Q29uZmlnLmNvbHVtbnMuZm9yRWFjaChmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICAgICAgICBpZiAob2JqLmZpZWxkID09IGNsb25lRWwuZ2V0QXR0cmlidXRlKCdjb2x1bW4nKSkge1xuICAgICAgICAgICAgICAgICAgICAkLmV4dGVuZChvYmosIHtcbiAgICAgICAgICAgICAgICAgICAgICB0cnVlVmFsdWU6IGNsb25lRWwuZ2V0QXR0cmlidXRlKCdib29sZWFuLXRydWUnKSxcbiAgICAgICAgICAgICAgICAgICAgICBmYWxzZVZhbHVlOiBjbG9uZUVsLmdldEF0dHJpYnV0ZSgnYm9vbGVhbi1mYWxzZScpXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ0JVVFRPTlMtQ09MVU1OJzpcbiAgICAgICAgICAgICAgICBzY29wZS5idXR0b25FbGVtZW50cyA9IGNsb25lRWwuY2hpbGRyZW47XG4gICAgICAgICAgICAgICAgcmF3Q29uZmlnLmhlYWRpbmdzLnB1c2goe2xhYmVsOiAnICcsIHdheTogbnVsbH0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ0VYVFJBLUNPTFVNTic6XG4gICAgICAgICAgICAgICAgc2NvcGUuZXh0cmFFbGVtZW50cyA9IGNsb25lRWwuY2hpbGRyZW47XG4gICAgICAgICAgICAgICAgcmF3Q29uZmlnLmhlYWRpbmdzLnB1c2goe2xhYmVsOiAnICcsIHdheTogbnVsbH0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ09CSkVDVC1DT0xVTU4nOlxuICAgICAgICAgICAgICAgIHNjb3BlLm9iamVjdENvbHVtbi5wdXNoKHtjb2x1bW46IGNsb25lRWwuZ2V0QXR0cmlidXRlKCdjb2x1bW4nKSx2YWx1ZTogY2xvbmVFbC5nZXRBdHRyaWJ1dGUoJ3Byb3BlcnR5Jyl9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdDT0xVTU4tQ0xBU1MnOlxuICAgICAgICAgICAgICAgIHNjb3BlLmNvbmRpdGlvbmFsQ29sdW1ucy5wdXNoKHtjb2x1bW46IGNsb25lRWwuZ2V0QXR0cmlidXRlKCdjb2x1bW4nKSxjb25kaXRpb25hbDogY2xvbmVFbC5nZXRBdHRyaWJ1dGUoJ2NvbmRpdGlvbmFsLWNsYXNzJyl9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG59KTtcbnNjb3BlLnRhYmxlY29uZmlnID0gcmF3Q29uZmlnO1xuZ2VuZXJhdGVUYWJsZShzY29wZS50YWJsZWNvbmZpZyk7XG59XG5mdW5jdGlvbiBnZXRDb25kaXRpb25zKCl7XG4gIHZhciBjb25kaXRpb25UZXh0ID0gYXR0cnMucm93Q2xhc3MgfHwgJyc7XG4gIHJldHVybiBjb25kaXRpb25UZXh0LnJlcGxhY2UoL3svLCcnKS5yZXBsYWNlKC99LywnJykuc3BsaXQoJywnKTtcbn1cbmZ1bmN0aW9uIGdlbmVyYXRlVGFibGUoY29uZmlnKSB7XG4gIHZhciB0ZW1wbGF0ZSA9IFtdO1xuICBpZiAoc2NvcGUucGFnZXMpIHtcbiAgICB2YXIgcGFnaW5hdGlvbiA9XG4gICAgJzxzZWxlY3QgbmctbW9kZWw9XCJpdGVtc1BlclBhZ2VcIiBuZy1jaGFuZ2U9XCJjaGFuZ2VJdGVtc1BlclBhZ2UoaXRlbXNQZXJQYWdlKVwiPicgK1xuICAgICc8b3B0aW9uIG5nLXJlcGVhdD1cInAgaW4gcGFnZXNcIiB2YWx1ZT1cInt7IHAgfX1cIiBuZy1zZWxlY3RlZD1cInAgPT0gaXRlbXNQZXJQYWdlXCI+e3sgcCB9fTwvb3B0aW9uPicgK1xuICAgICc8L3NlbGVjdD4nO1xuICAgIHRlbXBsYXRlLnB1c2gocGFnaW5hdGlvbik7XG4gIH1cbiAgc3dpdGNoIChjb25maWcuc2l6ZSkge1xuICAgIGNhc2UgJ2xhcmdlJzpcbiAgICB0ZW1wbGF0ZS5wdXNoKFxuICAgICAgJzxkaXYgY2xhc3M9XCJmdWxsLXdpZHRoLXdpdGhvdXQtcGFkZGluZ1wiIHN0eWxlPVwibWFyZ2luLXRvcDogMSVcIj4nICtcbiAgICAgICc8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi14c1wiIHN0eWxlPVwibWFyZ2luLWJvdHRvbTogMC4yNSVcIiBuZy1jbGljaz1cInNlbGVjdEFsbCgpXCI+U2VsZWNpb25hciB0b2RvczwvYnV0dG9uPicgK1xuICAgICAgJzxidXR0b24gY2xhc3M9XCJidG4gYnRuLWRlZmF1bHQgYnRuLXhzXCIgc3R5bGU9XCJtYXJnaW4tYm90dG9tOiAwLjI1JTttYXJnaW4tbGVmdDowLjI1JVwiIG5nLWNsaWNrPVwiY2xlYW5TZWFyY2goKVwiPiBMaW1wYXIgcGVzcXVpc2E8L2J1dHRvbj4nICtcbiAgICAgICc8dGFibGUgY2xhc3M9XCJ0YWJsZSB0YWJsZS0nICsgY29uZmlnLmNsYXNzICsgJyBcIj4nKTtcbiAgICBicmVhaztcbiAgICBjYXNlICdtZWRpdW0nOlxuICAgIHRlbXBsYXRlLnB1c2goXG4gICAgICAnPGRpdiBjbGFzcz1cImNvbC1tZC04XCIgc3R5bGU9XCJwYWRkaW5nLWxlZnQ6MDtwYWRkaW5nLXJpZ2h0OiAwO1wiPicgK1xuICAgICAgJzx0YWJsZSBjbGFzcz1cInRhYmxlIHRhYmxlLScgKyBjb25maWcuY2xhc3MgKyAnXCI+Jyk7XG4gICAgYnJlYWs7XG4gICAgY2FzZSAnc21hbGwnOlxuICAgIHRlbXBsYXRlLnB1c2goXG4gICAgICAnPGRpdiBjbGFzcz1cImNvbC1tZC00XCIgc3R5bGU9XCJwYWRkaW5nLWxlZnQ6MDtwYWRkaW5nLXJpZ2h0OiAwO1wiPicgK1xuICAgICAgJzx0YWJsZSBjbGFzcz1cInRhYmxlIHRhYmxlLScgKyBjb25maWcuY2xhc3MgKyAnXCI+Jyk7XG4gICAgYnJlYWs7XG4gIH1cbiAgdGVtcGxhdGUucHVzaCgnPHRoZWFkPicpO1xuICB0ZW1wbGF0ZS5wdXNoKCc8dHI+Jyk7XG4gIGlmIChhdHRycy5zb3J0RnVuY3Rpb24pIHtcbiAgICB0ZW1wbGF0ZS5wdXNoKCcgPHRkIG5nLXJlcGVhdD1cImhlYWQgaW4gdGFibGVjb25maWcuaGVhZGluZ3MgdHJhY2sgYnkgJGluZGV4XCIgbmctY2xpY2s9XCJoZWFkLmxhYmVsICE9PSBcXCcgXFwnID8gc29ydEF1eChoZWFkKSA6IFxcJ1xcJ1wiJyk7XG4gICAgdGVtcGxhdGUucHVzaCgnICAgICBuZy1jbGFzcz1cImhlYWQubGFiZWwgIT0gXFwnIFxcJyA/IFxcJ2NsaWNrYWJsZS10ZFxcJyA6IFxcJyBcXCcgXCI+Jyk7XG4gICAgdGVtcGxhdGUucHVzaCgnICAgICAgICAgPHNtYWxsPnt7OjpoZWFkLmxhYmVsfX08aSBuZy1jbGFzcz1cIihoZWFkLndheSAhPSBudWxsICYmIGhlYWQubGFiZWwgIT09IFxcJyBcXCcpID8gKGhlYWQud2F5ID09PSB0cnVlID8gXFwnZ2x5cGhpY29uIGdseXBoaWNvbi1tZW51LXVwXFwnIDogXFwnZ2x5cGhpY29uIGdseXBoaWNvbi1tZW51LWRvd25cXCcpIDogXFwnXFwnXCI+PC9pPjwvc21hbGw+PC90ZD4nKTtcbiAgfSBlbHNlIHtcbiAgICB0ZW1wbGF0ZS5wdXNoKCc8dGQgbmctcmVwZWF0PVwiaGVhZCBpbiB0YWJsZWNvbmZpZy5oZWFkaW5ncyB0cmFjayBieSAkaW5kZXhcIj57ezo6aGVhZC5sYWJlbH19Jyk7XG4gIH1cbiAgdGVtcGxhdGUucHVzaCgnIDwvdGQ+Jyk7XG4gIHRlbXBsYXRlLnB1c2goJzwvdHI+Jyk7XG4gIHRlbXBsYXRlLnB1c2goJzwvdGhlYWQ+Jyk7XG4gIHRlbXBsYXRlLnB1c2goJzx0Ym9keT4nKTtcbiAgaWYgKGNvbmZpZy5tdWx0aSA9PT0gZmFsc2UpIHtcbiAgICB0ZW1wbGF0ZS5wdXNoKCc8dHIgc3R5bGU9XCJ7ezo6Z2V0Q2xhc3NGcm9tQ29uZGl0aW9uYWxSb3coZW50aXR5KX19XCIgbmctY2xhc3M9XCJyZXR1cm5DbGFzcygkaW5kZXgpXCIgbmctcmVwZWF0PVwiZW50aXR5IGluIHRhYmxlY29uZmlnLmxpc3RcIiBjbGFzcz1cInVzZWRcIiBuZy1jbGljaz1cImhhbmRsZVNpbmdsZShlbnRpdHksJGluZGV4KVwiIG5nLWRibGNsaWNrPVwiZ29Ub0VkaXQoZW50aXR5LmlkKVwiPicgKyBnZW5lcmF0ZVRhYmxlQ2VsbChjb25maWcpICsgJzwvdHI+Jyk7XG4gIH0gZWxzZSB7XG4gICAgdGVtcGxhdGUucHVzaCgnPHRyIHN0eWxlPVwie3s6OmdldENsYXNzRnJvbUNvbmRpdGlvbmFsUm93KGVudGl0eSl9fVwiIG5nLWNsYXNzPVwicmV0dXJuQ2xhc3MoJGluZGV4KVwiIG5nLXJlcGVhdD1cImVudGl0eSBpbiB0YWJsZWNvbmZpZy5saXN0XCIgY2xhc3M9XCJ1c2VkXCIgbmctY2xpY2s9XCJoYW5kbGVNdWx0aXBsZShlbnRpdHksJGluZGV4KVwiIG5nLWRibGNsaWNrPVwiZ29Ub0VkaXQoZW50aXR5LmlkKVwiID4nICsgZ2VuZXJhdGVUYWJsZUNlbGwoY29uZmlnKSArICc8L3RyPicpO1xuICB9XG4gIHRlbXBsYXRlLnB1c2goJzwvdGJvZHk+Jyk7XG4gIHRlbXBsYXRlLnB1c2goJzwvdGFibGU+PC9kaXY+Jyk7XG4gIGVsbS5hcHBlbmQoJGNvbXBpbGUodGVtcGxhdGUuam9pbignXFxuJykpKHNjb3BlKSk7XG5cbn1cbnZhciBzZWxlY3RlZCA9IGZhbHNlO1xuXG5zY29wZS5nb1RvRWRpdCA9IGZ1bmN0aW9uKGluZGV4KXtcbiAgJHN0YXRlLmdvKHNjb3BlLnRhYmxlY29uZmlnLnRyYW5zbGF0ZSArICcuJyArICdlZGl0Jyx7aWQ6IGluZGV4fSk7XG59O1xuc2NvcGUuY2hhbmdlSXRlbXNQZXJQYWdlID0gZnVuY3Rpb24oaXRlbXNQZXJQYWdlKXtcbiAgd2luZG93LnNlc3Npb25TdG9yYWdlLnNldEl0ZW0oJ2l0ZW1zUGVyUGFnZScsIGl0ZW1zUGVyUGFnZSk7XG4gIHNjb3BlLiRwYXJlbnQuaXRlbXNQZXJQYWdlID0gaXRlbXNQZXJQYWdlO1xufTtcbnNjb3BlLnNlbGVjdEFsbCA9IGZ1bmN0aW9uKCl7XG4gIGlmKCFzZWxlY3RlZCl7XG4gICAgZm9yKHZhciBpID0gMCwgbGVuID0gc2NvcGUudGFibGVjb25maWcubGlzdC5sZW5ndGg7aSA8IGxlbjtpKyspe1xuICAgICAgc2NvcGUuaW5kZXhlcy5wdXNoKGkpO1xuICAgIH1cbiAgICBzY29wZS4kcGFyZW50LnNlbGVjdGVkRW50aXRpZXMgPSBzY29wZS50YWJsZWNvbmZpZy5saXN0O1xuICB9IGVsc2Uge1xuICAgIHNjb3BlLmluZGV4ZXMgPSBbXTtcbiAgICBzY29wZS4kcGFyZW50LnNlbGVjdGVkRW50aXRpZXMgPSBbXTtcbiAgfVxuICBzZWxlY3RlZCA9ICFzZWxlY3RlZDtcbn07XG5cblxuc2NvcGUuY2xlYW5TZWFyY2ggPSBmdW5jdGlvbigpe1xuICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ25vcm1hbCcse2ZpZWxkOnNjb3BlLnRhYmxlY29uZmlnLmNvbHVtbnNbMV0scGFyYW06ICcnfSk7XG4gIHNjb3BlLnRhYmxlY29uZmlnLmhlYWRpbmdzLmZvckVhY2goZnVuY3Rpb24oZWxtKXtcbiAgICBlbG0ud2F5ID0gbnVsbDtcbiAgfSlcbn07XG5cbnNjb3BlLmdldENsYXNzRnJvbUNvbmRpdGlvbmFsUm93ID0gZnVuY3Rpb24gKGVudGl0eSl7XG4gIHZhciBIZWxwZXJPYmplY3QgPSB7fTtcbiAgdmFyIGNvbmRpdGlvbnNGcm9tVGFnID0gZ2V0Q29uZGl0aW9ucygpO1xuICBjb25kaXRpb25zRnJvbVRhZy5mb3JFYWNoKGZ1bmN0aW9uKGVsbSl7XG4gICAgSGVscGVyT2JqZWN0W2VsbS5zcGxpdCgnOicpWzBdXSA9IGV2YWwoZWxtLnNwbGl0KCc6JylbMV0pO1xuICB9KTtcbiAgZm9yKHZhciBrZXkgaW4gSGVscGVyT2JqZWN0KSBpZihIZWxwZXJPYmplY3QuaGFzT3duUHJvcGVydHkoa2V5KSAmJiBIZWxwZXJPYmplY3Rba2V5XSA9PT0gdHJ1ZSl7XG4gICAgcmV0dXJuICdib3JkZXItbGVmdDogM3B4IHNvbGlkICcgKyBrZXkudHJpbSgpO1xuICB9XG4gIHJldHVybiAnJztcbn07XG5cbmZ1bmN0aW9uIGNoZWNrT2JqZWN0KGZpZWxkKXtcbiAgZm9yKHZhciBpID0gMDsgaSA8IHNjb3BlLm9iamVjdENvbHVtbi5sZW5ndGg7aSsrKXtcbiAgICBpZihzY29wZS5vYmplY3RDb2x1bW5baV0uY29sdW1uID09PSBmaWVsZCl7XG4gICAgICByZXR1cm4gJ3t7OjplbnRpdHkuJysgIHNjb3BlLm9iamVjdENvbHVtbltpXS52YWx1ZSArJ319JztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG5mdW5jdGlvbiBnZXRDbGFzc0Zyb21Db25kaXRpb25hbENlbGwoY29sdW1uLGVudGl0eSl7XG4gIHNjb3BlLmNvbmRpdGlvbmFsQ29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uKGVsbSl7XG4gICAgaWYoZWxtLmNvbHVtbi50b0xvd2VyQ2FzZSgpLnRyaW0oKSA9PT0gY29sdW1uLnRvTG93ZXJDYXNlKCkudHJpbSgpKXtcbiAgICAgIENvbHVtbk9iamVjdFtlbG0uY29sdW1uXSA9IHt9O1xuICAgICAgZWxtLmNvbmRpdGlvbmFsLnJlcGxhY2UoL3svLCcnKS5yZXBsYWNlKC99LywnJykuc3BsaXQoJywnKVxuICAgICAgLmZvckVhY2goZnVuY3Rpb24oYXJnKXtcbiAgICAgICAgdmFyIHggPSBhcmcuc3BsaXQoJzonKTtcbiAgICAgICAgQ29sdW1uT2JqZWN0W2VsbS5jb2x1bW5dW3hbMF0udHJpbSgpLnJlcGxhY2UoL1wiL2csJycpXSA9IHhbMV0udHJpbSgpO1xuICAgICAgfSlcbiAgICB9XG4gIH0pO1xufVxuXG5cbnNjb3BlLmdldFN0eWxlRnJvbUNlbGwgPSBmdW5jdGlvbihlbnRpdHksY29sdW1uKXtcbiAgaWYoQ29sdW1uT2JqZWN0W2NvbHVtbi50cmltKCkudG9Mb3dlckNhc2UoKV0pe1xuICAgIHZhciBhdXhPYmogPSBDb2x1bW5PYmplY3RbY29sdW1uLnRyaW0oKS50b0xvd2VyQ2FzZSgpXTtcbiAgICBmb3IodmFyIGtleSBpbiBhdXhPYmopIGlmKGF1eE9iai5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIGV2YWwoYXV4T2JqW2tleV0pID09PSB0cnVlKXtcbiAgICAgIHJldHVybiAnYm9yZGVyLWxlZnQ6IDNweCBzb2xpZCAnICsga2V5LnRyaW0oKTtcbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGdlbmVyYXRlVGFibGVDZWxsKGNvbmZpZykge1xuICB2YXIgdGVtcGxhdGUgPSBbXTtcbiAgY29uZmlnLmNvbHVtbnMuZm9yRWFjaChmdW5jdGlvbiAoZWxtKSB7XG4gICAgZ2V0Q2xhc3NGcm9tQ29uZGl0aW9uYWxDZWxsKGVsbS5maWVsZCk7XG4gICAgaWYgKGVsbS50cnVlVmFsdWUpIHtcbiAgICAgIHRlbXBsYXRlLnB1c2goJzx0ZCBzdHlsZT1cInt7OjpnZXRTdHlsZUZyb21DZWxsKGVudGl0eSxcXCcgJysgZWxtLmZpZWxkICsgJyBcXCcpfX1cIj57ezo6ZW50aXR5LicgKyBlbG0uZmllbGQgKyAnID09PSB0cnVlPyBcXCcnICsgZWxtLnRydWVWYWx1ZSArICdcXCcgOiBcXCcnICsgZWxtLmZhbHNlVmFsdWUgKyAnXFwnfX08L3RkPicpO1xuICAgIH0gZWxzZSBpZihjaGVja09iamVjdChlbG0uZmllbGQpICE9IC0xKXtcbiAgICAgIHRlbXBsYXRlLnB1c2goJzx0ZCBzdHlsZT1cInt7OjpnZXRTdHlsZUZyb21DZWxsKGVudGl0eSxcXCcgJysgZWxtLmZpZWxkICsgJyBcXCcpfX1cIj4nICsgY2hlY2tPYmplY3QoZWxtLmZpZWxkKSArJyA8L3RkPicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0ZW1wbGF0ZS5wdXNoKCc8dGQgc3R5bGU9XCJ7ezo6Z2V0U3R5bGVGcm9tQ2VsbChlbnRpdHksXFwnICcrIGVsbS5maWVsZCArICcgXFwnKX19XCI+e3s6OmVudGl0eS4nKyBlbG0uZmllbGQgKyAnfX0gPC90ZD4nKTtcbiAgICB9XG4gIH0pO1xuICBpZiAoc2NvcGUuYnV0dG9uRWxlbWVudHMpIHtcbiAgICB0ZW1wbGF0ZS5wdXNoKCc8dGQgc3R5bGU9XCJ7ezo6Z2V0U3R5bGVGcm9tQ2VsbChlbnRpdHksXFwnICcrIGVsbS5maWVsZCArICcgXFwnKX19XCI+JyArIGdldFNwZWNpYWwoc2NvcGUuYnV0dG9uRWxlbWVudHMpICsgJzwvdGQ+Jyk7XG4gIH1cbiAgaWYgKHNjb3BlLmV4dHJhRWxlbWVudHMpIHtcbiAgICB0ZW1wbGF0ZS5wdXNoKCc8dGQgc3R5bGU9XCJ7ezo6Z2V0U3R5bGVGcm9tQ2VsbChlbnRpdHksXFwnICcrIGVsbS5maWVsZCArICcgXFwnKX19XCI+JyArIGdldFNwZWNpYWwoc2NvcGUuZXh0cmFFbGVtZW50cykgKyAnPC90ZD4nKTtcbiAgfVxuICByZXR1cm4gdGVtcGxhdGUuam9pbignICcpO1xufVxuXG5cbmZ1bmN0aW9uIGdldFNwZWNpYWwoYXJyYXkpIHtcbiAgdmFyIHR4dCA9IFtdO1xuICBhbmd1bGFyLmZvckVhY2goYXJyYXksIGZ1bmN0aW9uIChlbG0pIHtcbiAgICB0eHQucHVzaChlbG0ub3V0ZXJIVE1MKTtcbiAgfSk7XG4gIHJldHVybiB0eHQuam9pbignICcpO1xufVxuXG4gICAgICAgICAgICAvLyBOZWdhw6fDo28gZHVwbGEgdHJhbnNmb3JtYSBlbSBib29sZWFuXG4gICAgICAgICAgICBpZiAoISFyYXdUYWJsZUNvbmZpZy5zb3J0RGYpIHtcbiAgICAgICAgICAgICAgLy8gU2UgaG91dmVyIG8gYXRyaWJ1dG8gc29ydC1kZWZhdWx0IG1vbnRhIG8gb2JqZXRvIGUgZGlzcGFyYSBvIGV2ZW50b1xuICAgICAgICAgICAgICB2YXIgb2JqU29ydERlZmF1bHQgPSB7XG4gICAgICAgICAgICAgICAgZmllbGQ6IHJhd1RhYmxlQ29uZmlnLnNvcnREZlswXSxcbiAgICAgICAgICAgICAgICB3YXk6IHJhd1RhYmxlQ29uZmlnLnNvcnREZlsxXVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICBldmVudEhhbmRsZXIuc29ydCh7ZmllbGQ6IG9ialNvcnREZWZhdWx0LmZpZWxkfSk7XG4gICAgICAgICAgICAgIHNjb3BlLnNvcnQob2JqU29ydERlZmF1bHQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzY29wZS5zb3J0QXV4ID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgICAgIC8vUXVhbmRvIGVsZSBjbGljYSwgZWxlIHZlcmlmaWNhIHNlIGrDoSBleGlzdGUgYWxndW1hIGNvbHVuYSBjb20gc29ydCwgc2UgasOhIGV4aXN0aXIsIHJldG9ybmEgZWxhIHBhcmEgbnVsbFxuICAgICAgICAgICAgICAgIHNjb3BlLnRhYmxlY29uZmlnLmhlYWRpbmdzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICAgICAgaWYgKGtleSAhPSBvYmopIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGtleS53YXkgPT09IHRydWUgfHwga2V5LndheSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICBrZXkud2F5ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIC8vIFBlZ2EgbyBpbmRleCBkbyBvYmpldG9cbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBzY29wZS50YWJsZWNvbmZpZy5oZWFkaW5ncy5pbmRleE9mKG9iaik7XG4gICAgICAgICAgICAgICAgLy9TZXRhIG8gc29ydCBkZWxlIHByYSBmYWxzZSBvdSB0cnVlXG4gICAgICAgICAgICAgICAgb2JqLndheSA9ICFvYmoud2F5O1xuICAgICAgICAgICAgICAgIC8vUmVtb3ZlIGRhIGxpc3RhIGFudGVyaW9yIG8gYW50aWdvIGUgY29sb2NhIG8gbm92b1xuICAgICAgICAgICAgICAgIHNjb3BlLnRhYmxlY29uZmlnLmhlYWRpbmdzLnNwbGljZShpbmRleCwgMSwgb2JqKTtcbiAgICAgICAgICAgICAgICB2YXIgYXV4O1xuICAgICAgICAgICAgICAgIC8vIFNlIGZvciB0cnVlLCDDqSBhc2NlbmRlbnRlXG4gICAgICAgICAgICAgICAgaWYgKG9iai53YXkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgIGF1eCA9ICdhc2MnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBhdXggPSAnZGVzYyc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIERpc3BhcmEgbyBldmVudG9cbiAgICAgICAgICAgICAgICBldmVudEhhbmRsZXIuc29ydCh7ZmllbGQ6IG9iai5sYWJlbC50b0xvd2VyQ2FzZSgpfSk7XG4gICAgICAgICAgICAgICAgc2NvcGUuc29ydCh7ZmllbGQ6IG9iai5sYWJlbC50b0xvd2VyQ2FzZSgpLCB3YXk6IGF1eH0pO1xuICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgIHNjb3BlLmhhbmRsZU11bHRpcGxlID0gZnVuY3Rpb24gKGVudGl0eSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICBpZiAoR3VtZ2FVdGlscy5hcmVOb3RFcXVhbEluQXJyYXkoc2NvcGUuaW5kZXhlcywgaW5kZXgpIHx8IHNjb3BlLmluZGV4ZXMubGVuZ3RoIDwgMSkge1xuICAgICAgICAgICAgICAgICAgc2NvcGUuaW5kZXhlcy5wdXNoKGluZGV4KTtcbiAgICAgICAgICAgICAgICAgIHNjb3BlLiRwYXJlbnQuc2VsZWN0ZWRFbnRpdGllcy5wdXNoKGVudGl0eSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHNjb3BlLmluZGV4ZXMuc3BsaWNlKHNjb3BlLmluZGV4ZXMuaW5kZXhPZihpbmRleCksIDEpO1xuICAgICAgICAgICAgICAgICAgc2NvcGUuJHBhcmVudC5zZWxlY3RlZEVudGl0aWVzLnNwbGljZShzY29wZS4kcGFyZW50LnNlbGVjdGVkRW50aXRpZXMuaW5kZXhPZihlbnRpdHkpLCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZXZlbnRIYW5kbGVyLnNlbGVjdCh7c2VsZWN0ZWQ6IHNjb3BlLiRwYXJlbnQuc2VsZWN0ZWRFbnRpdGllc30pO1xuICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgIHNjb3BlLmhhbmRsZVNpbmdsZSA9IGZ1bmN0aW9uIChlbnRpdHksIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgaWYgKHNjb3BlLmluZGV4ZXMubGVuZ3RoID49IDEpIHtcbiAgICAgICAgICAgICAgICAgIHNjb3BlLmluZGV4ZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgIHNjb3BlLiRwYXJlbnQuc2VsZWN0ZWRFbnRpdGllcyA9IFtdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzY29wZS5zZWxlY3RlZEluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgICAgICAgc2NvcGUuaW5kZXhlcy5wdXNoKGluZGV4KTtcbiAgICAgICAgICAgICAgICBzY29wZS4kcGFyZW50LnNlbGVjdGVkRW50aXRpZXMucHVzaChlbnRpdHkpO1xuICAgICAgICAgICAgICAgIGV2ZW50SGFuZGxlci5zZWxlY3Qoe3NlbGVjdGVkOiBzY29wZS4kcGFyZW50LnNlbGVjdGVkRW50aXRpZXN9KTtcbiAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICBzY29wZS5yZXR1cm5DbGFzcyA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICAgICAgICAgIGlmICghR3VtZ2FVdGlscy5hcmVOb3RFcXVhbEluQXJyYXkoc2NvcGUuaW5kZXhlcywgaW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gJ2luZm8nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2d1bWdhLmRpcmVjdGl2ZXMudGFibGUnLFtdKVxuICAgICAgICAgIC5kaXJlY3RpdmUoJ2d1bWdhVGFibGUnLFRhYmxlKTtcbiAgICAgICAgfSkoKTtcbiIsIiIsIihmdW5jdGlvbigpe1xuXHQndXNlIHN0cmljdCc7XG5cdFRyYW5zbGF0ZVRhZy4kaW5qZWN0ID0gW1wiR3VtZ2FUcmFuc2xhdGVIZWxwZXJcIiwgXCIkY29tcGlsZVwiXTtcblx0ZnVuY3Rpb24gVHJhbnNsYXRlVGFnKEd1bWdhVHJhbnNsYXRlSGVscGVyLCRjb21waWxlKXtcblx0XHR2YXIgY2hpbGQ7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHJlc3RyaWN0OiAnQScsXG5cdFx0XHRsaW5rOiBmdW5jdGlvbihzY29wZSxlbG0sYXR0cnMpe1xuXHRcdFx0XHRpZighYXR0cnMuZ3VtZ2FUcmFuc2xhdGVUYWcpIHRocm93ICdZb3UgbXVzdCBwYXNzIGEgdmFsaWQgdmFsdWUgdG8gZ3VtZ2FUcmFuc2xhdGVUYWcnO1xuXHRcdFx0XHRzY29wZS5fX3ZhbHVlVG9UcmFuc2xhdGUgPSBhdHRycy5ndW1nYVRyYW5zbGF0ZVRhZztcblx0XHRcdFx0aWYoR3VtZ2FUcmFuc2xhdGVIZWxwZXIuZ2V0VHJhbnNsYXRlKHNjb3BlLl9fdmFsdWVUb1RyYW5zbGF0ZSkpe1xuXHRcdFx0XHRcdGlmKGVsbVswXS5jaGlsZE5vZGVzLmxlbmd0aCA+IDApe1xuXHRcdFx0XHRcdFx0c2NvcGUuY2hpbGQgPSBlbG1bMF0uY2hpbGROb2Rlc1swXTtcblx0XHRcdFx0XHRcdGVsbVswXS5pbm5lckhUTUwgPSAgR3VtZ2FUcmFuc2xhdGVIZWxwZXIuZ2V0VHJhbnNsYXRlKHNjb3BlLl9fdmFsdWVUb1RyYW5zbGF0ZSk7XG5cdFx0XHRcdFx0XHRlbG0uYXBwZW5kKCRjb21waWxlKHNjb3BlLmNoaWxkKShzY29wZSkpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRlbG1bMF0uaW5uZXJIVE1MID0gR3VtZ2FUcmFuc2xhdGVIZWxwZXIuZ2V0VHJhbnNsYXRlKHNjb3BlLl9fdmFsdWVUb1RyYW5zbGF0ZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHR9O1xuXHR9XG5cblx0YW5ndWxhci5tb2R1bGUoJ2d1bWdhLmRpcmVjdGl2ZXMudHJhbnNsYXRldGFnJyxbJ2d1bWdhLnNlcnZpY2VzLnRyYW5zbGF0ZS5oZWxwZXInLCdndW1nYS5zZXJ2aWNlcy50cmFuc2xhdGUnXSlcblx0XHQuZGlyZWN0aXZlKCdndW1nYVRyYW5zbGF0ZVRhZycsVHJhbnNsYXRlVGFnKTtcbn0pKCk7IiwiKGZ1bmN0aW9uKCl7XG5cdCd1c2Ugc3RyaWN0Jztcblx0YW5ndWxhci5tb2R1bGUoJ2d1bWdhLmRpcmVjdGl2ZXMudHJhbnNsYXRlJyxcblx0XHRbXG5cdFx0XHQnZ3VtZ2EuZGlyZWN0aXZlcy50cmFuc2xhdGUudHJhbnNsYXRlaGVscGVyJyxcblx0XHRcdCdndW1nYS5kaXJlY3RpdmVzLnRyYW5zbGF0ZS50cmFuc2xhdGUnLFxuXHRcdFx0J2d1bWdhLmRpcmVjdGl2ZXMudHJhbnNsYXRlLnRyYW5zbGF0ZXRhZydcblx0XHRdKVxufSkoKTtcbiIsIihmdW5jdGlvbigpe1xuXHQndXNlIHN0cmljdCc7XG5cdFVwbG9hZC4kaW5qZWN0ID0gW1wiJGh0dHBcIiwgXCIkcGFyc2VcIiwgXCIkdGltZW91dFwiXTtcblx0LyoqXG5cdCAqIEBuZ2RvYyBkaXJlY3RpdmVcblx0ICogQG5hbWUgZ3VtZ2EuY29yZTpndW1nYVVwbG9hZFxuXHQgKiBAcmVzdHJpY3Rcblx0ICogQGRlc2NyaXB0aW9uIFxuXHQgKiBcdE8gY29tcG9uZW50ZSBndW1nYVVwbG9hZCBwb2RlIHNlciB1dGlsaXphZG8gcGFyYSBmYXplciB1cGxvYWQgZGUgaW1hZ2Vucy4gTyBmcmFtZXdvcmsgR1VNR0EgdXNhIHVtIG3DqXRvZG8gZGUgdXBsb2FkXG5cdCAqIFx0ZGUgaW1hZ2VucyBxdWUgZmF6IG8gdXBsb2FkIGRvIGFycXVpdm8gcGFyYSB1bWEgcGFzdGEgdGVtcG9yw6FyaWEgZSByZXRvcm5hIHVtIHRva2VuLiBRdWFuZG8gbyByZWdpc3RybyDDqSBzYWx2bywgbyBmcmFtZXdvcmsgZ3VtZ2EgXG5cdCAqIFx0ZmF6IG8gYmluZCBkYSBzdHJpbmcgcXVlIGVzdMOhIG5vIGF0cmlidXRvIGNvbSBvIGFycXVpdm8gdGVtcG9yw6FyaW8uXG5cdCAqIFx0QHBhcmFtIHtPYmpldH0gbW9kZWwgT2JqZXRvIHF1ZSBpcsOhIGNvbnRlciBhcyBpbmZvcm1hw6fDtWVzIGRhIGltYWdlbS5cblx0ICogXHRAcGFyYW0ge0Z1bmN0aW9ufSB1cGxvYWQtbWV0aG9kIEZ1bsOnw6NvIHF1ZSBzZXLDoSBleGVjdXRhZGEgcGFyYSBmYXplciBvIHVwbG9hZCBkYSBpbWFnZW0gcGFyYSBvIGFycXVpdm8gdGVtcG9yw6FyaW8uXG5cdCAqIFx0QHBhcmFtIHtGdW5jdGlvbn0gZGVsZXRlLW1ldGhvZCBGdW7Dp8OjbyBxdWUgc2Vyw6EgZXhlY3V0YWRhIHBhcmEgZGVsZXRhciBhIGltYWdlbSBkbyBlc3Bhw6dvIHRlbXBvcsOhcmlvLlxuXHQgKiBcdEBwYXJhbSB7U3RyaW5nfSB0b29sdGlwLXRleHQgTWVuc2FnZW0gcXVlIGlyw6EgYXBhcmVjZXIgbm8gdG9vbHRpcCBkYSBpbWFnZW0uXG5cdCAqL1xuXHRmdW5jdGlvbiBVcGxvYWQoJGh0dHAsJHBhcnNlLCR0aW1lb3V0KXsgIFxuXG5cdFx0dmFyIGltZyA9IFx0XG5cdFx0JzxkaXYgbmctY2xpY2s9XCJmaXJlQ2xpY2soKVwiIG5nLXNob3c9XCJmbGFnXCIgY2xhc3M9XCJjb2wtbWQtMVwiIHRvb2x0aXA9XCJ7ezo6dG9vbHRpcFRleHR9fVwiIHRvb2x0aXAtcGxhY2VtZW50PVwicmlnaHRcIj4nK1xuXHRcdCdcdDxzdmcgdmVyc2lvbj1cIjEuMVwiIGlkPVwiTGF5ZXJfMVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB4PVwiMHB4XCIgeT1cIjBweFwiIHdpZHRoPVwiMTI4cHhcIiBoZWlnaHQ9XCIxMjhweFwiIHZpZXdCb3g9XCIwIDAgNTEyIDUxMlwiIGVuYWJsZS1iYWNrZ3JvdW5kPVwibmV3IDAgMCA1MTIgNTEyXCIgeG1sOnNwYWNlPVwicHJlc2VydmVcIj4nK1xuXHRcdCdcdFx0PHBhdGggaWQ9XCJhdmF0YXJcIiBmaWxsPVwiI2NjY2NjY1wiIGQ9XCJNNDkwLjU3OSwzODMuMDI5Yy0xNC4xNTItMjIuMDg2LTYxLjc2My0zNS44MjQtMTA4LjgzNS01NS40NTNjLTQ3LjEwMy0xOS42MzMtNTguMjY4LTI2LjQzOS01OC4yNjgtMjYuNDM5Jytcblx0XHQnXHRcdFx0bC0wLjQ0NS00NS4xODJjMCwwLDE3LjY0Ni0xMy41NTcsMjMuMTI3LTU2LjA3NGMxMS4wMSwzLjE5OCwyMi42MTktMTYuNDYxLDIzLjIzNy0yNi44MjRjMC42MjUtOS45OC0xLjUwOC0zNy42NjItMTQuOTgxLTM0Ljg3NycgK1xuXHRcdCdcdFx0XHRjMi43NTQtMjAuODQ1LDQuNzQxLTM5LjU4NiwzLjc2NC00OS41MDVjLTMuNDk1LTM2LjI5NS0zOS4yMy03NC41NzgtOTQuMTgyLTc0LjU3OGMtNTQuOTUsMC05MC43LDM4LjI4My05NC4xOTMsNzQuNTc4JyArXG5cdFx0J1x0XHRcdGMtMC45NzgsOS45MTksMS4wMTksMjguNjYxLDMuNzU4LDQ5LjUwNWMtMTMuNDU1LTIuNzg1LTE1LjU4NywyNC44OTctMTQuOTc5LDM0Ljg3N2MwLjYzNSwxMC4zNjMsMTIuMTk2LDMwLjAyMSwyMy4yNTUsMjYuODI0JyArXG5cdFx0J1x0XHRcdGM1LjQ2Miw0Mi41MTcsMjMuMTIyLDU2LjA3NCwyMy4xMjIsNTYuMDc0bC0wLjQ0MSw0NS4xODJjMCwwLTExLjE3OCw2LjgwNy01OC4yNjgsMjYuNDM5JyArXG5cdFx0J1x0XHRcdGMtNDcuMTA0LDE5LjYyOS05NC42ODMsMzMuMzY3LTEwOC44NTEsNTUuNDUzYy0xMi43LDE5Ljc3Ny04Ljg4MiwxMTQuODc1LTguODgyLDExNC44NzVoNDcwLjk0NicgK1xuXHRcdCdcdFx0XHRDNDk5LjQ2Miw0OTcuOTA0LDUwMy4yODEsNDAyLjgwNiw0OTAuNTc5LDM4My4wMjl6XCIvPicgK1xuXHRcdCdcdDwvc3ZnPicgK1xuXHRcdCc8L2Rpdj4nXG47bG9jYVxuXG5cdFx0dmFyIHRlbXBsYXRlID1cblx0XHQnPGRpdiBjbGFzcz1cImZ1bGwtd2lkdGgtd2l0aG91dC1wYWRkaW5nXCI+JyArXG5cdFx0aW1nICsgXG5cdFx0JyAgIDxpbWcgc3JjPVwiI1wiIGFsdD1cIlVwbG9hZGVkIEltYWdlXCIgbmctc2hvdz1cIiFmbGFnXCIgY2xhc3M9XCJpbWctcm91bmRlZFwiIHN0eWxlPVwib2JqZWN0LWZpdDogY292ZXJcIi8+JyArXG5cdFx0JyAgIDxpbnB1dCB0eXBlPVwiZmlsZVwiIGlkPVwidXBsb2FkXCIgbmctaGlkZT1cInRydWVcIi8+JyArXG5cdFx0JyAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTJcIiBzdHlsZT1cInBhZGRpbmctbGVmdDogMFwiPicgK1xuXHRcdCcgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tbGlua1wiIG5nLWhpZGU9XCJmbGFnXCIgbmctY2xpY2s9XCJkZWxldGVJbWFnZSgpXCI+IERlbGV0ZSBJbWFnZSA8c3BhbiBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tdHJhc2hcIj48L3NwYW4+PC9idXR0b24+JyArXG5cdFx0JzwvZGl2PicgK1xuXHRcdCc8L2Rpdj4nO1xuXHRcdHJldHVybiB7XG5cdFx0XHRyZXN0cmljdDogJ0FFJyxcblx0XHRcdHNjb3BlOiB7XG5cdFx0XHRcdG1vZGVsOiAnPWF0dHJpYnV0ZScsXG5cdFx0XHRcdHVwbG9hZE1ldGhvZDogJyYnLFxuXHRcdFx0XHRkZWxldGVNZXRob2Q6ICcmJyxcblx0XHRcdFx0dG9vbHRpcFRleHQ6ICdAJ1xuXHRcdFx0fSxcblx0XHRcdHRlbXBsYXRlOiB0ZW1wbGF0ZSxcblx0XHRcdGxpbms6ZnVuY3Rpb24oc2NvcGUsZWxtLGF0dHJzKXtcblx0XHRcdFx0dmFyIG1vZGVsID0gJHBhcnNlKGF0dHJzLmF0dHJpYnV0ZSksXG5cdFx0XHRcdG1vZGVsU2V0dGVyID0gbW9kZWwuYXNzaWduLFxuXHRcdFx0XHRlbGVtZW50ID0gZWxtLmZpbmQoJ2lucHV0JyksXG5cdFx0XHRcdGltYWdlID0gZWxtLmZpbmQoJ2ltZycpWzBdLFxuXHRcdFx0XHRyZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuXG5cblx0XHRcdFx0c2NvcGUuZmlyZUNsaWNrID0gZnVuY3Rpb24oKXtcblx0XHRcdFx0XHQkdGltZW91dChmdW5jdGlvbigpe1xuXHRcdFx0XHRcdFx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3VwbG9hZCcpXG5cdFx0XHRcdFx0XHRcdC5jbGljaygpO1x0XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzY29wZS4kd2F0Y2goJ21vZGVsJyxmdW5jdGlvbigpe1xuXHRcdFx0XHRcdGlmKHNjb3BlLm1vZGVsKXtcblx0XHRcdFx0XHRcdGlmKHNjb3BlLm1vZGVsLmJ5dGVzKXtcblx0XHRcdFx0XHRcdFx0c2NvcGUuZmxhZyA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRpbWFnZS5zcmMgPSAnZGF0YTonICsgc2NvcGUubW9kZWwubWltZVR5cGUgKyAnO2Jhc2U2NCwnICsgc2NvcGUubW9kZWwuYnl0ZXM7XG5cdFx0XHRcdFx0XHRcdGltYWdlLndpZHRoID0gMjAwO1xuXHRcdFx0XHRcdFx0XHRpbWFnZS5oZWlnaHQgPSAyMDA7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHNjb3BlLm1vZGVsID0ge307XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRpZighYXR0cnMuYXR0cmlidXRlKXtcblx0XHRcdFx0XHR0aHJvdyAnWW91IG11c3QgcGFzcyBhbiBhdHRyaWJ1dGUgdG8gR3VtZ2FVcGxvYWQnO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0c2NvcGUuZmxhZyA9IHRydWU7XG5cblx0XHRcdFx0ZnVuY3Rpb24gc2NhbGVTaXplKG1heFcsIG1heEgsIGN1cnJXLCBjdXJySCl7XG5cdFx0XHRcdFx0dmFyIHJhdGlvID0gY3VyckggLyBjdXJyVztcblx0XHRcdFx0XHRpZihjdXJyVyA+PSBtYXhXICYmIHJhdGlvIDw9IDEpe1xuXHRcdFx0XHRcdFx0Y3VyclcgPSBtYXhXO1xuXHRcdFx0XHRcdFx0Y3VyckggPSBjdXJyVyAqIHJhdGlvO1xuXHRcdFx0XHRcdH0gZWxzZSBpZihjdXJySCA+PSBtYXhIKXtcblx0XHRcdFx0XHRcdGN1cnJIID0gbWF4SDtcblx0XHRcdFx0XHRcdGN1cnJXID0gY3VyckggLyByYXRpbztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIFtjdXJyVywgY3VyckhdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0c2NvcGUuZGVsZXRlSW1hZ2UgPSBmdW5jdGlvbigpe1xuXHRcdFx0XHRcdGltYWdlLnNyYyA9ICcnO1xuXHRcdFx0XHRcdHNjb3BlLmZsYWcgPSB0cnVlO1xuXHRcdFx0XHRcdGVsZW1lbnRbMF0uZmlsZXMgPSBbXTtcblx0XHRcdFx0XHRzY29wZS5kZWxldGVNZXRob2QoKTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHRlbGVtZW50LmJpbmQoJ2NoYW5nZScsZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRzY29wZS4kYXBwbHkoZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRcdHZhciB4O1xuXHRcdFx0XHRcdFx0bW9kZWxTZXR0ZXIoc2NvcGUsZWxlbWVudFswXS5maWxlc1swXSk7XG5cdFx0XHRcdFx0XHRzY29wZS5mbGFnID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRyZWFkZXIub25sb2FkZW5kID0gZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRcdFx0aW1hZ2Uuc3JjID0gcmVhZGVyLnJlc3VsdDtcblx0XHRcdFx0XHRcdFx0aW1hZ2Uud2lkdGggPSAyMDA7XG5cdFx0XHRcdFx0XHRcdGltYWdlLmhlaWdodCA9MjAwO1xuXHRcdFx0XHRcdFx0XHR2YXIgeCA9IGF0dHJzLmF0dHJpYnV0ZS5zcGxpdCgnLicpO1xuXHRcdFx0XHRcdFx0XHRzY29wZS51cGxvYWRNZXRob2Qoe2ltYWdlOiBzY29wZVt4WzBdXVt4WzFdXX0pXG5cdFx0XHRcdFx0XHRcdC50aGVuKGZ1bmN0aW9uKHZhbCl7XG5cdFx0XHRcdFx0XHRcdFx0c2NvcGUubW9kZWwubmFtZSA9IHZhbC5kYXRhO1xuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHRyZWFkZXIucmVhZEFzRGF0YVVSTChlbGVtZW50WzBdLmZpbGVzWzBdKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXG5cdGFuZ3VsYXIubW9kdWxlKCdndW1nYS5kaXJlY3RpdmVzLnVwbG9hZCcsW10pXG5cdFx0LmRpcmVjdGl2ZSgnZ3VtZ2FVcGxvYWQnLFVwbG9hZCk7XG5cbn0pKCk7IiwiKGZ1bmN0aW9uKCl7XG5cdCd1c2Ugc3RyaWN0Jztcblx0QWRkcmVzc1NlcnZpY2UuJGluamVjdCA9IFtdO1xuXHRmdW5jdGlvbiBBZGRyZXNzU2VydmljZSgpe1xuXHRcdHJldHVybiB7XG5cdFx0XHRldmVyeVVmOiBbJ0FDJywgJ0FMJywgJ0FNJywgJ0FQJywgJ0JBJywgJ0NFJywgJ0RGJywgJ0VTJywgJ0dPJywgJ01BJywgJ01HJywgJ01TJywgJ01UJywgJ1BBJywgJ1BCJywgJ1BFJywgJ1BJJywgJ1BSJyxcblx0XHRcdCdSSicsICdSTicsICdSUicsICdSUycsICdTQycsICdTRScsICdTUCcsICdUTyddLFxuXHRcdFx0ZXZlcnlMb2dyYWRvdXJvOiBbXHQnT3V0cm9zJywgJ0Flcm9wb3J0bycsICdBbGFtZWRhJywgJ8OBcmVhJywgJ0F2ZW5pZGEnLCAnQ2FtcG8nLCAnQ2jDoWNhcmEnLCAnQ29sw7RuaWEnLCAnQ29uZG9tw61uaW8nLCAnQ29uanVudG8nLCAnRGlzdHJpdG8nLFxuXHRcdFx0J0VzcGxhbmFkYScsICdFc3Rhw6fDo28nLCAnRXN0cmFkYScsICdGYXZlbGEnLCAnRmF6ZW5kYScsICdGZWlyYScsICdKYXJkaW0nLCAnTGFkZWlyYScsICdMYXJnbycsICdMYWdvJywgJ0xhZ29hJywgJ0xvdGVhbWVudG8nLFxuXHRcdFx0J07DumNsZW8nLCAnUGFycXVlJywgJ1Bhc3NhcmVsYScsICdQw6F0aW8nLCAnUHJhw6dhJywgJ1F1YWRyYScsICdSZWNhbnRvJywgJ1Jlc2lkZW5jaWFsJywgJ1JvZG92aWEnLCAnUnVhJywgJ1NldG9yJywgJ1PDrXRpbycsXG5cdFx0XHQnVHJhdmVzc2EnLCAnVHJldm8nLCAnVHJlY2hvJywgJ1ZhbGUnLCAnVmVyZWRhJywgJ1ZpYScsICdWaWFkdXRvJywgJ1ZpZWxhJywgJ1ZpYSddLFxuXHRcdFx0YXZhaWxhYmxlQ291bnRyaWVzOiBbJ0JyYXNpbCddLFxuXHRcdFx0cmV0dXJuRm9ybWF0dGVkT2JqZWN0OiBmdW5jdGlvbigpe1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdHppcENvZGUgOiBudWxsLFxuXHRcdFx0XHRcdHByZW1pc3NlVHlwZTogbnVsbCxcblx0XHRcdFx0XHRwcmVtaXNzZTogbnVsbCxcblx0XHRcdFx0XHRudW1iZXI6IG51bGwsXG5cdFx0XHRcdFx0aW5mb3JtYXRpb246IG51bGwsXG5cdFx0XHRcdFx0bmVpZ2hib3VyaG9vZDogbnVsbCxcblx0XHRcdFx0XHRsb2NhbGl6YXRpb246IG51bGwsXG5cdFx0XHRcdFx0c3RhdGU6IG51bGwsXG5cdFx0XHRcdFx0Y291bnRyeTogbnVsbFxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0XHRhbmd1bGFyLm1vZHVsZSgnZ3VtZ2Euc2VydmljZXMuYWRkcmVzcycsW10pXG5cdFx0LmZhY3RvcnkoJ0d1bWdhQWRkcmVzc1NlcnZpY2UnLEFkZHJlc3NTZXJ2aWNlKTtcblxuXHR9KSgpO1xuIiwiKGZ1bmN0aW9uKCl7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHRBbGVydC4kaW5qZWN0ID0gW11cblx0LyoqXG5cdCAqIEBuZ2RvYyBzZXJ2aWNlXG5cdCAqIEBuYW1lIGd1bWdhLmNvcmU6R3VtZ2FBbGVydFxuXHQgKiBAZGVzY3JpcHRpb24gTyBzZXJ2aWNlIEd1bWdhQWxlcnQgw6kgdW1hIG5vdmEgdmVyc8OjbyBkYSBkaXJlY3RpdmUge0BsaW5rIGd1bWdhLmNvcmU6Z3VtZ2FBbGVydH0gZSDDqSB1dGlsaXphZG8gcGFyYSBjcmlhclxuXHQgKiBub3RpZmljYcOnw7VlcyBncm93bC1saWtlLiBQYXJhIHV0aWxpemFyIG8gc2VydmljZSwgYmFzdGEgaW5jbHVpciBHdW1nYUFsZXJ0IGNvbW8gZGVwZW5kw6puY2lhLlxuXHQgKiBcblx0ICogKk9ic2VydmHDp8OjbzogUGFyYSB1dGlsaXphw6fDo28gZG8gc2VydmljZSBubyBjb25maWcgZG8gbcOzZHVsbywgdXRpbGl6YXIgYEd1bWdhQWxlcnRQcm92aWRlcmAqXG5cdCAqXG5cdCAqXG5cdCAqICMjIE3DqXRvZG9zXG5cdCAqXG5cdCAqIE8gc2VydmljZSBHdW1nYUFsZXJ0IHBvc3N1aSBxdWF0cm8gbcOpdG9kb3MgZGUgY3JpYcOnw6NvIGRlIGFsZXJ0YSwgcG9yw6ltIHRvZG9zIHJlY2ViZW0gbyBtZXNtbyBwYXLDom1ldHJvLiBGb2kgb3B0YWRvIHBvciBjcmlhciBxdWF0cm9cblx0ICogbcOpdG9kb3MgZGlmZXJlbnRlcyBwYXJhIGF1bWVudGFyIGEgbGVnaWJpbGlkYWRlLlxuXHQgKiAtIGNyZWF0ZVdhcm5pbmdNZXNzYWdlKHRpdGxlLG1lc3NhZ2Usb3B0aW9ucylcblx0ICogLSBjcmVhdGVEYW5nZXJNZXNzYWdlKHRpdGxlLG1lc3NhZ2Usb3B0aW9ucylcblx0ICogLSBjcmVhdGVTdWNjZXNzTWVzc2FnZSh0aXRsZSxtZXNzYWdlLG9wdGlvbnMpXG5cdCAqIC0gY3JlYXRlSW5mb21lc3NhZ2UodGl0bGUsbWVzc2FnZSxvcHRpb25zKVxuXHQgKlxuXHQgKiAgIyMjIFBhcsOibWV0cm9zXG5cdCAqICAtIGB0aXRsZWA6IFVtYSBzdHJpbmcgcXVlIGlyw6EgY29udGVyIG8gdMOtdHVsbyBkYSBtZW5zYWdlbSBxdWUgc2Vyw6EgY3JpYWRhLlxuXHQgKiAgLSBgbWVzc2FnZWA6IFVtYSBzdHJpbmcgcXVlIGlyw6EgY29udGVyIG8gY29ycG8gZGEgbWVuc2FnZW0gcXVlIHNlcsOhIGNyaWFkYS5cblx0ICogIC0gYG9wdGlvbnNgOiBVbSBvYmpldG8gY29tIG9ww6fDtWVzIGFkaWNpb25haXMgcGFyYSBvIGFsZXJ0YS4gT3MgYXRyaWJ1dG9zIHF1ZSBwb2RlbSBzZXIgcGFzc2Fkb3MgcGFyYSBlc3RlIG9iamV0byBzw6NvOlxuXHQgKiAgXHQ8cHJlPlxuXHQgKiAgIFx0XHR2YXIgY29uZmlnID0ge1xuXHQgKiAgIFx0XHQgb2Zmc2V0OiA1MCwgLy9UYW1hbmhvIGRhIGRpc3TDom5jaWEgZW50cmUgbyBhbGVydGEgZSB0ZWxhLlxuXHQgKiAgIFx0XHQgdGltZXI6IDEwMCwgLy9UZW1wbyBxdWUgaXLDoSBkZW1vcmFyIHBhcmEgYSBtZW5zYWdlbSBhcGFyZWNlciBhcMOzc1xuXHQgKiAgIFx0XHQgZGVsYXk6IDM1MDAsXG5cdCAqICAgXHRcdCBhbG93RGlzbWlzczp0cnVlLFxuXHQgKiAgIFx0XHQgYW5pbWF0aW9uRW50ZXI6ICdhbmltYXRlZCBib3VuY2VJblJpZ2h0Jyxcblx0ICogICBcdFx0IGFuaW1hdGlvbkV4aXQ6ICdhbmltYXRlZCBib3VuY2VPdXRSaWdodCdcblx0ICogICBcdFx0fVxuXHQgKiBcdFx0PC9wcmU+ICpPYmpldG8gY29tIG9zIHZhbG9yZXMgcGFkcsO1ZXMgZG8gYWxlcnRhKlxuXHQgKiBcdFx0XG5cdCAqL1xuXHRmdW5jdGlvbiBBbGVydCgpe1xuXHRcdHJldHVybiB7XG5cdFx0XHQkZ2V0OiBmdW5jdGlvbigpe1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRfX2NvbmZpZzoge1xuXHRcdFx0XHR3YXJuOiB7XG5cdFx0XHRcdFx0aWNvbjogJ2dseXBoaWNvbiBnbHlwaGljb24td2FybmluZy1zaWduJyxcblx0XHRcdFx0XHR0eXBlOiAnd2FybmluZydcblx0XHRcdFx0fSxcblx0XHRcdFx0ZGFuZ2VyOiB7XG5cdFx0XHRcdFx0aWNvbjogJ2dseXBoaWNvbiBnbHlwaGljb24tZXhjbGFtYXRpb24tc2lnbicsXG5cdFx0XHRcdFx0dHlwZTogJ2RhbmdlcicgXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHN1Y2Nlc3M6IHtcblx0XHRcdFx0XHRpY29uOidnbHlwaGljb24gZ2x5cGhpY29uLW9rJyxcblx0XHRcdFx0XHR0eXBlOiAnc3VjY2Vzcydcblx0XHRcdFx0fSxcblx0XHRcdFx0aW5mbzoge1xuXHRcdFx0XHRcdGljb246ICdnbHlwaGljb24gZ2x5cGhpY29uLWluZm8tc2lnbicsXG5cdFx0XHRcdFx0dHlwZTogJ2luZm8nXG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRfbm90aWZ5OiBmdW5jdGlvbih0eXBlLHRpdGxlLG1lc3NhZ2Usb3B0aW9ucyl7XG5cdFx0XHRcdHZhciBjb25maWcgPSB0aGlzLl9fY29uZmlnW3R5cGVdXG5cdFx0XHRcdCxcdFx0b2Zmc2V0ID0gb3B0aW9ucy5vZmZzZXQgfHwgNTBcblx0XHRcdFx0LFx0XHR0aW1lciA9IG9wdGlvbnMudGltZXIgfHwgMTAwXG5cdFx0XHRcdCxcdFx0ZGVsYXkgPSBvcHRpb25zLmRlbGF5IHx8IDM1MDBcblx0XHRcdFx0LFx0XHRhbG93RGlzbWlzcyA9IG9wdGlvbnMuYWxvd0Rpc21pc3MgfHwgdHJ1ZVxuXHRcdFx0XHQsXHRcdGFuaW1hdGlvbkVudGVyID0gb3B0aW9ucy5hbmltYXRpb25FbnRlciB8fCAnYW5pbWF0ZWQgYm91bmNlSW5SaWdodCdcblx0XHRcdFx0LFx0XHRhbmltYXRpb25FeGl0ID0gb3B0aW9ucy5hbmltYXRpb25FeGl0IHx8ICdhbmltYXRlZCBib3VuY2VPdXRSaWdodCc7XG5cdFx0XHRcdCQubm90aWZ5KHtcblx0XHRcdFx0XHRpY29uOiBjb25maWcuaWNvbixcblx0XHRcdFx0XHR0aXRsZTogdGl0bGUsXG5cdFx0XHRcdFx0bWVzc2FnZTogbWVzc2FnZVxuXHRcdFx0XHR9LHtcblx0XHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRcdG9mZnNldDogb2Zmc2V0LFxuXHRcdFx0XHRcdHRpbWVyOiB0aW1lcixcblx0XHRcdFx0XHRkZWxheTogZGVsYXksXG5cdFx0XHRcdFx0YWxvd19kaXNtaXNzOiBhbG93RGlzbWlzcyxcblx0XHRcdFx0XHRhbmltYXRlOiB7XG5cdFx0XHRcdFx0XHRcdGVudGVyOiBhbmltYXRpb25FbnRlcixcblx0XHRcdFx0XHRcdFx0ZXhpdDogYW5pbWF0aW9uRXhpdFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR0ZW1wbGF0ZTogJzxkaXYgZGF0YS1ub3RpZnk9XCJjb250YWluZXJcIiBjbGFzcz1cImNvbC14cy05IGNvbC1zbS0zIGFsZXJ0IGFsZXJ0LXswfVwiIHJvbGU9XCJhbGVydFwiPicgK1xuXHRcdFx0XHRcdFx0JzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiIGNsYXNzPVwiY2xvc2VcIiBkYXRhLW5vdGlmeT1cImRpc21pc3NcIj7DlzwvYnV0dG9uPicgK1xuXHRcdFx0XHRcdFx0JzxzcGFuIGRhdGEtbm90aWZ5PVwiaWNvblwiPjwvc3Bhbj4gJyArXG5cdFx0XHRcdFx0XHQnPHNwYW4gZGF0YS1ub3RpZnk9XCJ0aXRsZVwiPjxiPnsxfTwvYj48L3NwYW4+PGJyPiAnICtcblx0XHRcdFx0XHRcdCc8c3BhbiBkYXRhLW5vdGlmeT1cIm1lc3NhZ2VcIj57Mn08L3NwYW4+JyArXG5cdFx0XHRcdFx0XHQnPC9kaXY+J1xuXHRcdFx0XHR9KVxuXHRcdFx0fSxcblx0XHRcdGNyZWF0ZVdhcm5pbmdNZXNzYWdlOiBmdW5jdGlvbih0aXRsZSxtZXNzYWdlLG9wdGlvbnMpe1xuXHRcdFx0XHRpZighb3B0aW9ucykgb3B0aW9ucyA9IHt9O1xuXHRcdFx0XHR0aGlzLl9ub3RpZnkoJ3dhcm5pbmcnLHRpdGxlLG1lc3NhZ2Usb3B0aW9ucyk7XG5cdFx0XHR9LFxuXHRcdFx0Y3JlYXRlRGFuZ2VyTWVzc2FnZTogZnVuY3Rpb24odGl0bGUsbWVzc2FnZSxvcHRpb25zKXtcblx0XHRcdFx0aWYoIW9wdGlvbnMpIG9wdGlvbnMgPSB7fTtcblx0XHRcdFx0dGhpcy5fbm90aWZ5KCdkYW5nZXInLHRpdGxlLG1lc3NhZ2Usb3B0aW9ucyk7XG5cdFx0XHR9LFxuXHRcdFx0Y3JlYXRlU3VjY2Vzc01lc3NhZ2U6IGZ1bmN0aW9uKHRpdGxlLG1lc3NhZ2Usb3B0aW9ucyl7XG5cdFx0XHRcdGlmKCFvcHRpb25zKSBvcHRpb25zID0ge307XG5cdFx0XHRcdHRoaXMuX25vdGlmeSgnc3VjY2VzcycsdGl0bGUsbWVzc2FnZSxvcHRpb25zKTtcblx0XHRcdH0sXG5cdFx0XHRjcmVhdGVJbmZvTWVzc2FnZTogZnVuY3Rpb24odGl0bGUsbWVzc2FnZSxvcHRpb25zKXtcblx0XHRcdFx0aWYoIW9wdGlvbnMpIG9wdGlvbnMgPSB7fTtcblx0XHRcdFx0dGhpcy5fbm90aWZ5KCdpbmZvJyx0aXRsZSxtZXNzYWdlLG9wdGlvbnMpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGFuZ3VsYXIubW9kdWxlKCdndW1nYS5zZXJ2aWNlcy5hbGVydCcsW10pXG5cdFx0LnByb3ZpZGVyKCdHdW1nYUFsZXJ0JyxBbGVydCk7XG59KSgpOyIsIihmdW5jdGlvbigpe1xuXHQndXNlIHN0cmljdCc7XG5cblx0QmFzZS4kaW5qZWN0ID0gW1wiJGh0dHBcIiwgXCIkcVwiXTtcblx0LyoqXG5cdCAqIEBuZ2RvYyBzZXJ2aWNlXG5cdCAqIEBuYW1lIGd1bWdhLmNvcmU6R3VtZ2FCYXNlXG5cdCAqIEBkZXNjcmlwdGlvbiBcblx0ICogXHRPIHNlcnZpY2UgR3VtZ2FCYXNlIHBvZGUgc2VyIHV0aWxpemFkbyBjb21vIGhlbHBlciBwYXJhIGZhemVyIGNoYW1hZGFzIEhUVFAuIEVsZSBwZXJtaXRlIHF1ZSBvIHByb2dyYW1hZG9yIG7Do28gcHJlY2lzZSBpbmNsdWlyIG8gc2VydmljZSAkaHR0cFxuXHQgKiBcdGRvIEFuZ3VsYXJKUyBlIGrDoSB2ZW0gY29tIGFsZ3VtYXMgZnVuw6fDtWVzIGluY2x1w61kYXMuIFBhcmEgdXRpbGl6YXIgbyBHdW1nYUJhc2UsIGJhc3RhIMOtbmNsdcOtLWxvIGNvbW8gZGVwZW5kw6puY2lhLlxuXHQgKlxuXHQgKlxuXHQgKiAgIyBNw6l0b2Rvc1xuXHQgKiAgYEd1bWdhQmFzZS5nZXQodXJsLHBhcmFtcylgXG5cdCAqICBcblx0ICogIE8gbcOpdG9kbyBnZXQgYWNlaXRhIGRvaXMgcGFyw6JtZXRyb3MgYHVybGAgZSBgcGFyYW1zYCBlIHJldG9ybmEgdW1hIHByb21pc2UgZGUgdW1hIGNoYW1hZGEgSFRUUCBkbyB0aXBvIEdFVC5cblx0ICogICMjIyBQYXLDom1ldHJvc1xuXHQgKiAgLSA8bGFiZWwgY2xhc3M9XCJsYWJlbCBsYWJlbC13YXJuaW5nXCIgc3R5bGU9XCJtYXJnaW4tcmlnaHQ6IDElXCI+U3RyaW5nPC9sYWJlbD48bGFiZWwgY2xhc3M9XCJsYWJlbCBsYWJlbC1pbmZvXCI+dXJsPC9sYWJlbD4gIEVuZGVyZcOnbyBubyBxdWFsIGEgY2hhbWFkYSBodHRwIHNlcsOhIGZlaXRhLlxuXHQgKiAgLSA8bGFiZWwgY2xhc3M9XCJsYWJlbCBsYWJlbC13YXJuaW5nXCIgc3R5bGU9XCJtYXJnaW4tcmlnaHQ6IDElXCI+T2JqZWN0PC9sYWJlbD4gPGxhYmVsIGNsYXNzPVwibGFiZWwgbGFiZWwtaW5mb1wiPnBhcmFtczwvbGFiZWw+IFBhcsOibWV0cm9zIGRhIHF1ZXJ5IHF1ZSBzZXLDoSBmZWl0YS5cblx0ICogICMjIyBSZXRvcm5vXG5cdCAqICAtIDxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLWluZm9cIj5IdHRwUHJvbWlzZTwvbGFiZWw+IFJldG9uYSB1bWEgcHJvbWlzZSBkYSBjaGFtYWRhIEhUVFAgR0VULlxuXHQgKiAgLS0tXG4gXHQgKiAgYEd1bWdhQmFzZS5nZXRCeUlkKHVybCxpZClgXG5cdCAqICBcblx0ICogIE8gbcOpdG9kbyBnZXRCeUlkIGFjZWl0YSBkb2lzIHBhcsOibWV0cm9zIGB1cmxgIGUgYGlkYCBlIHJldG9ybmEgdW1hIHByb21pc2UgZGUgdW1hIGNoYW1hZGEgSFRUUCBkbyB0aXBvIEdFVC5cblx0ICogICMjIyBQYXLDom1ldHJvc1xuXHQgKiAgLSA8bGFiZWwgY2xhc3M9XCJsYWJlbCBsYWJlbC13YXJuaW5nXCIgc3R5bGU9XCJtYXJnaW4tcmlnaHQ6IDElXCI+U3RyaW5nPC9sYWJlbD48bGFiZWwgY2xhc3M9XCJsYWJlbCBsYWJlbC1pbmZvXCI+dXJsPC9sYWJlbD4gIEVuZGVyZcOnbyBubyBxdWFsIGEgY2hhbWFkYSBodHRwIHNlcsOhIGZlaXRhLlxuXHQgKiAgLSA8bGFiZWwgY2xhc3M9XCJsYWJlbCBsYWJlbC13YXJuaW5nXCIgc3R5bGU9XCJtYXJnaW4tcmlnaHQ6IDElXCI+W1N0cmluZ3xOdW1iZXJdPC9sYWJlbD4gPGxhYmVsIGNsYXNzPVwibGFiZWwgbGFiZWwtaW5mb1wiPmlkPC9sYWJlbD4gSWRlbnRpZmljYWRvciBkbyByZWdpc3RybyBxdWUgc2Vyw6EgYnVzY2Fkby5cblx0ICogICMjIyBSZXRvcm5vXG5cdCAqICAtIDxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLWluZm9cIj5IdHRwUHJvbWlzZTwvbGFiZWw+IFJldG9uYSB1bWEgcHJvbWlzZSBkYSBjaGFtYWRhIEhUVFAgR0VULlxuXHQgKiAgLS0tXG5cdCAqICBgR3VtZ2FCYXNlLmdldE5ldyh1cmwpYFxuXHQgKiAgXG5cdCAqICBPIG3DqXRvZG8gZ2V0QnlJZCBhY2VpdGEgdW0gcGFyw6JtZXRybyBgdXJsYCBlIHJldG9ybmEgdW1hIHByb21pc2UgZGUgdW1hIGNoYW1hZGEgSFRUUCBkbyB0aXBvIEdFVC5cblx0ICogICMjIyBQYXLDom1ldHJvc1xuXHQgKiAgLSA8bGFiZWwgY2xhc3M9XCJsYWJlbCBsYWJlbC13YXJuaW5nXCIgc3R5bGU9XCJtYXJnaW4tcmlnaHQ6IDElXCI+U3RyaW5nPC9sYWJlbD48bGFiZWwgY2xhc3M9XCJsYWJlbCBsYWJlbC1pbmZvXCI+dXJsPC9sYWJlbD4gIEVuZGVyZcOnbyBubyBxdWFsIGEgY2hhbWFkYSBodHRwIHNlcsOhIGZlaXRhIGUgbmEgcXVhbFxuXHQgKiAgIHNlcsOhIGZlaXRhIGEgY2hhbWFkYSBwYXJhIHVtIG5vdm8gcmVnaXN0cm8uXG5cdCAqICAjIyMgUmV0b3Jub1xuXHQgKiAgLSA8bGFiZWwgY2xhc3M9XCJsYWJlbCBsYWJlbC1pbmZvXCI+SHR0cFByb21pc2U8L2xhYmVsPiBSZXRvcm5hIHVtYSBwcm9taXNlIGRhIGNoYW1hZGEgSFRUUCBHRVQuXG5cdCAqICAtLS1cbiBcdCAqICBgR3VtZ2FCYXNlLmRlbGV0ZUFsbCh1cmwsYXJyYXkpYFxuXHQgKiAgXG5cdCAqICBPIG3DqXRvZG8gZGVsZXRlQWxsIGFjZWl0YSBkb2lzIHBhcsOibWV0cm9zIGB1cmxgIGUgYGFycmF5YCBlIHJldG9ybmEgdW1hIHByb21pc2UgZGUgdW1hIHPDqXJpZSBkZSBjaGFtYWRhcyBodHRwIGRvIHRpcG8gREVMRVRFIHF1ZSBzZXLDo28gcmVzb2x2aWRhcyBhbyBtZXNtbyB0ZW1wby5cblx0ICogICMjIyBQYXLDom1ldHJvc1xuXHQgKiAgLSA8bGFiZWwgY2xhc3M9XCJsYWJlbCBsYWJlbC13YXJuaW5nXCIgc3R5bGU9XCJtYXJnaW4tcmlnaHQ6IDElXCI+U3RyaW5nPC9sYWJlbD48bGFiZWwgY2xhc3M9XCJsYWJlbCBsYWJlbC1pbmZvXCI+dXJsPC9sYWJlbD4gIEVuZGVyZcOnbyBubyBxdWFsIGEgY2hhbWFkYSBodHRwIHNlcsOhIGZlaXRhLlxuXHQgKiAgLSA8bGFiZWwgY2xhc3M9XCJsYWJlbCBsYWJlbC13YXJuaW5nXCIgc3R5bGU9XCJtYXJnaW4tcmlnaHQ6IDElXCI+QXJyYXk8L2xhYmVsPjxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLWluZm9cIj5hcnJheTwvbGFiZWw+IEFycmF5IGNvbSB0b2RhcyBvcyByZWdpc3Ryb3MgcXVlIHNlcsOjbyBkZWxldGFkb3MgXG5cdCAqICAjIyMgUmV0b3Jub1xuXHQgKiAgLSA8bGFiZWwgY2xhc3M9XCJsYWJlbCBsYWJlbC1pbmZvXCI+SHR0cFByb21pc2U8L2xhYmVsPiBSZXRvcm5hIHVtYSBwcm9taXNlIGFww7NzIHRvZGFzIGFzIGNoYW1hZGFzIHRlcmVtIHNpZG8gcmVzb2x2aWRhcy5cblx0ICogIC0tLVxuXHQgKiAgYEd1bWdhQmFzZS5zYXZlKHVybCxkYXRhKWBcblx0ICogIFxuXHQgKiAgTyBtw6l0b2RvIHNhdmUgYWNlaXRhIGRvaXMgcGFyw6JtZXRyb3MgYHVybGAgZSBgZGF0YWAgZSByZXRvcm5hIHVtYSBwcm9taXNlIGRlIGRlIHVtYSBjaGFtYWRhIEhUVFAgUE9TVC5cblx0ICogICMjIyBQYXLDom1ldHJvc1xuXHQgKiAgLSA8bGFiZWwgY2xhc3M9XCJsYWJlbCBsYWJlbC13YXJuaW5nXCIgc3R5bGU9XCJtYXJnaW4tcmlnaHQ6IDElXCI+U3RyaW5nPC9sYWJlbD48bGFiZWwgY2xhc3M9XCJsYWJlbCBsYWJlbC1pbmZvXCI+dXJsPC9sYWJlbD4gIEVuZGVyZcOnbyBubyBxdWFsIGEgY2hhbWFkYSBodHRwIHNlcsOhIGZlaXRhLlxuXHQgKiAgLSA8bGFiZWwgY2xhc3M9XCJsYWJlbCBsYWJlbC13YXJuaW5nXCIgc3R5bGU9XCJtYXJnaW4tcmlnaHQ6IDElXCI+T2JqZWN0PC9sYWJlbD48bGFiZWwgY2xhc3M9XCJsYWJlbCBsYWJlbC1pbmZvXCI+ZGF0YTwvbGFiZWw+IE9iamV0byBxdWUgZGVzZWphIHNlciBzYWx2by5cblx0ICogICMjIyBSZXRvcm5vXG5cdCAqICAtIDxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLWluZm9cIj5IdHRwUHJvbWlzZTwvbGFiZWw+IFJldG9ybmEgdW1hIHByb21pc2UgZGEgY2hhbWFkYSBIVFRQIFBPU1QuXG5cdCAqICAtLS1cbiBcdCAqICBgR3VtZ2FCYXNlLnVwZGF0ZSh1cmwsZGF0YSlgXG5cdCAqICBcblx0ICogIE8gbcOpdG9kbyBkZWxldGVBbGwgYWNlaXRhIGRvaXMgcGFyw6JtZXRyb3MgYHVybGAgZSBgZGF0YWAgZSByZXRvcm5hIHVtYSBwcm9taXNlIGRlIGRlIHVtYSBjaGFtYWRhIEhUVFAgUFVULlxuXHQgKiAgIyMjIFBhcsOibWV0cm9zXG5cdCAqICAtIDxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLXdhcm5pbmdcIiBzdHlsZT1cIm1hcmdpbi1yaWdodDogMSVcIj5TdHJpbmc8L2xhYmVsPjxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLWluZm9cIj51cmw8L2xhYmVsPiAgRW5kZXJlw6dvIG5vIHF1YWwgYSBjaGFtYWRhIGh0dHAgc2Vyw6EgZmVpdGEuXG5cdCAqICAtIDxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLXdhcm5pbmdcIiBzdHlsZT1cIm1hcmdpbi1yaWdodDogMSVcIj5PYmplY3Q8L2xhYmVsPjxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLWluZm9cIj5kYXRhPC9sYWJlbD4gT2JqZXRvIHF1ZSBkZXNlamEgc2VyIGF0dWFsaXphZG8uXG5cdCAqICAjIyMgUmV0b3Jub1xuXHQgKiAgLSA8bGFiZWwgY2xhc3M9XCJsYWJlbCBsYWJlbC1pbmZvXCI+SHR0cFByb21pc2U8L2xhYmVsPiBSZXRvcm5hIHVtYSBwcm9taXNlIGRhIGNoYW1hZGEgSFRUUCBQT1NULlxuXHQgKiAgLS0tICBcbiBcdCAqICBgR3VtZ2FCYXNlLmRlbCh1cmwsZGF0YSlgXG5cdCAqICBcblx0ICogIE8gbcOpdG9kbyBkZWwgYWNlaXRhIGRvaXMgcGFyw6JtZXRyb3MgYHVybGAgZSBgZGF0YWAgZSByZXRvcm5hIHVtYSBwcm9taXNlIGRlIGRlIHVtYSBjaGFtYWRhIEhUVFAgREVMRVRFLiBFc3RhIGZ1bsOnw6NvIMOpIGNoYW1hZGEgcGFyYSBjYWRhIHJlZ2lzdHJvIHBhc3NhZG8gZGVudHJvIGRvIEFycmF5XG5cdCAqICBuYSBmdW7Dp8OjbyBkZWxldGVBbGwuXG5cdCAqICAjIyMgUGFyw6JtZXRyb3Ncblx0ICogIC0gPGxhYmVsIGNsYXNzPVwibGFiZWwgbGFiZWwtd2FybmluZ1wiIHN0eWxlPVwibWFyZ2luLXJpZ2h0OiAxJVwiPlN0cmluZzwvbGFiZWw+PGxhYmVsIGNsYXNzPVwibGFiZWwgbGFiZWwtaW5mb1wiPnVybDwvbGFiZWw+ICBFbmRlcmXDp28gbm8gcXVhbCBhIGNoYW1hZGEgaHR0cCBzZXLDoSBmZWl0YS5cblx0ICogIC0gPGxhYmVsIGNsYXNzPVwibGFiZWwgbGFiZWwtd2FybmluZ1wiIHN0eWxlPVwibWFyZ2luLXJpZ2h0OiAxJVwiPk9iamVjdDwvbGFiZWw+PGxhYmVsIGNsYXNzPVwibGFiZWwgbGFiZWwtaW5mb1wiPmRhdGE8L2xhYmVsPiBPYmpldG8gcXVlIGRlc2VqYSBzZXIgZGVsZXRhZG8uXG5cdCAqICAjIyMgUmV0b3Jub1xuXHQgKiAgLSA8bGFiZWwgY2xhc3M9XCJsYWJlbCBsYWJlbC1pbmZvXCI+SHR0cFByb21pc2U8L2xhYmVsPiBSZXRvcm5hIHVtYSBwcm9taXNlIGRhIGNoYW1hZGEgSFRUUCBERUxFVEUuXG5cdCAqICAtLS1cblx0ICogIGBHdW1nYUJhc2UucG9zdEltYWdlKHVybCxhdHRyaWJ1dGUsZGF0YSlgXG5cdCAqICBcblx0ICogIE8gbcOpdG9kbyBwb3N0SW1hZ2UgYWNlaXRhIHRyw6pzIHBhcsOibWV0cm9zIGB1cmxgLGBhdHRyaWJ1dGVgIGUgYGRhdGFgIGUgcmV0b3JuYSB1bWEgcHJvbWlzZSBkZSBkZSB1bWEgY2hhbWFkYSBIVFRQIFBPU1QgRk9STS1EQVRBLlxuXHQgKiAgIyMjIFBhcsOibWV0cm9zXG5cdCAqICAtIDxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLXdhcm5pbmdcIiBzdHlsZT1cIm1hcmdpbi1yaWdodDogMSVcIj5TdHJpbmc8L2xhYmVsPjxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLWluZm9cIj51cmw8L2xhYmVsPiAgRW5kZXJlw6dvIG5vIHF1YWwgYSBjaGFtYWRhIGh0dHAgc2Vyw6EgZmVpdGEuXG5cdCAqICAtIDxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLXdhcm5pbmdcIiBzdHlsZT1cIm1hcmdpbi1yaWdodDogMSVcIj5TdHJpbmc8L2xhYmVsPjxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLWluZm9cIj5hdHRyaWJ1dGU8L2xhYmVsPiBBdHJpYnV0byBubyBxdWFsIGEgaW1hZ2VtIHNlcsOhIGZlaXRvIG9cblx0ICogIGJpbmQgYXDDs3MgbyBmb3JtIHRlciBzaWRvIGVudmlhZG8gY29tcGxldG8uXG5cdCAqICAtIDxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLXdhcm5pbmdcIiBzdHlsZT1cIm1hcmdpbi1yaWdodDogMSVcIj5PYmplY3Q8L2xhYmVsPjxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLWluZm9cIj5kYXRhPC9sYWJlbD4gRGFkb3MgZGEgaW1hZ2VtIHF1ZSBmb2kgc2VsZWNpb25hZGEuLlxuXHQgKiAgIyMjIFJldG9ybm9cblx0ICogIC0gPGxhYmVsIGNsYXNzPVwibGFiZWwgbGFiZWwtaW5mb1wiPkh0dHBQcm9taXNlPC9sYWJlbD4gUmV0b3JuYSB1bWEgcHJvbWlzZSBkYSBjaGFtYWRhIEhUVFAgUE9TVC4gTmVzdGEgcHJvbWlzZSwgc2Vyw6EgcmV0b3JuYWRvIG8gdmFsb3IgZGUgdW1hIFN0cmluZyBxdWUgZGV2ZXLDoSBzZXIgYXRyaWJ1w61kYSBhbyBhdHJpYnV0b1xuXHQgKiAgb25kZSBlc3RhdmEgYSBpbWFnZW0uIEVzdGEgc3RyaW5nIMOpIHVtIGlkZW50aWZpY2Fkb3IgcGFyYSBxdWFuZG8gbyByZWdpc3RybyBmb3IgZW52aWFkbyBhdHJhdsOpcyBkZSB1bSBwb3N0LlxuXHQgKiAgLS0tXG4gXHQgKiAgYEd1bWdhQmFzZS5kZWxldGVJbWFnZSh1cmwsYXR0cmlidXRlLGRhdGEpYFxuXHQgKiAgXG5cdCAqICBPIG3DqXRvZG8gZGVsIGFjZWl0YSB0csOqcyBwYXLDom1ldHJvcyBgdXJsYCwgYGF0dHJpYnV0ZWAgZSBgZGF0YWAgZSByZXRvcm5hIHVtYSBwcm9taXNlIGRlIHVtYSBjaGFtYWRhIEhUVFAgREVMRVRFIEZPUk0tREFUQS5cblx0ICogICMjIyBQYXLDom1ldHJvc1xuXHQgKiAgLSA8bGFiZWwgY2xhc3M9XCJsYWJlbCBsYWJlbC13YXJuaW5nXCIgc3R5bGU9XCJtYXJnaW4tcmlnaHQ6IDElXCI+U3RyaW5nPC9sYWJlbD48bGFiZWwgY2xhc3M9XCJsYWJlbCBsYWJlbC1pbmZvXCI+dXJsPC9sYWJlbD4gRW5kZXJlw6dvIG5vIHF1YWwgYSBjaGFtYWRhIGh0dHAgc2Vyw6EgZmVpdGEuXG5cdCAqICAtIDxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLXdhcm5pbmdcIiBzdHlsZT1cIm1hcmdpbi1yaWdodDogMSVcIj5TdHJpbmc8L2xhYmVsPjxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLWluZm9cIj5hdHRyaWJ1dGU8L2xhYmVsPiBBdHJpYnV0byBubyBxdWFsIGEgaW1hZ2VtIHNlcsOhIGZlaXRvIG9cblx0ICogIGJpbmQgYXDDs3MgbyBmb3JtIHRlciBzaWRvIGVudmlhZG8gY29tcGxldG8uXG5cdCAqICAtIDxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLXdhcm5pbmdcIiBzdHlsZT1cIm1hcmdpbi1yaWdodDogMSVcIj5PYmplY3Q8L2xhYmVsPjxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLWluZm9cIj5kYXRhPC9sYWJlbD4gRGFkb3MgZGEgaW1hZ2VtIHF1ZSBmb2kgc2VsZWNpb25hZGEuXG5cdCAqICAjIyMgUmV0b3Jub1xuXHQgKiAgLSA8bGFiZWwgY2xhc3M9XCJsYWJlbCBsYWJlbC1pbmZvXCI+SHR0cFByb21pc2U8L2xhYmVsPiBSZXRvcm5hIHVtYSBwcm9taXNlIGRhIGNoYW1hZGEgSFRUUCBERUxFVEUuXG5cdCAqICAtLS1cblx0ICovXG5cdGZ1bmN0aW9uIEJhc2UoJGh0dHAsJHEpe1xuXHRcdHZhciBkZWZhdWx0UGFyYW1zID0ge307XG5cdFx0dGhpcy5nZXQgPSBnZXQ7XG5cdFx0dGhpcy5nZXRCeUlkID0gZ2V0QnlJZDtcblx0XHR0aGlzLmdldE5ldyA9IGdldE5ldztcblx0XHR0aGlzLmRlbGV0ZUFsbCA9IGRlbGV0ZUFsbDtcblx0XHR0aGlzLnNhdmUgPSBzYXZlO1xuXHRcdHRoaXMudXBkYXRlID0gdXBkYXRlO1xuXHRcdHRoaXMuZGVsID0gZGVsO1xuXHRcdHRoaXMucG9zdEltYWdlID0gcG9zdEltYWdlO1xuXHRcdHRoaXMuZGVsZXRlSW1hZ2UgPSBkZWxldGVJbWFnZTtcblx0XHRcblx0XHRmdW5jdGlvbiBnZXQodXJsLHBhcmFtcykge1xuXHRcdFx0aWYgKCFwYXJhbXMpIHtcblx0XHRcdFx0cGFyYW1zID0gZGVmYXVsdFBhcmFtcztcblx0XHRcdH1cblx0XHRcdHJldHVybiAkaHR0cC5nZXQodXJsLCBwYXJhbXMpO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGdldEJ5SWQodXJsLGlkKSB7XG5cdFx0XHRyZXR1cm4gJGh0dHAuZ2V0KHVybCArICcvJyArIGlkKTtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBnZXROZXcodXJsKXtcblx0XHRcdHJldHVybiAkaHR0cC5nZXQodXJsKycvbmV3Jyk7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gZGVsZXRlQWxsKHVybCxlbnRpdGllcykge1xuXHRcdFx0dmFyIHByb21pc2VzID0gZW50aXRpZXMubWFwKGZ1bmN0aW9uKGVudGl0eSl7XG5cdFx0XHRcdHJldHVybiBkZWwodXJsLGVudGl0eSk7XG5cdFx0XHR9KTtcblx0XHRcdHJldHVybiAkcS5hbGwocHJvbWlzZXMpO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHNhdmUodXJsLGVudGl0eSkge1xuXHRcdFx0cmV0dXJuICRodHRwLnBvc3QodXJsLCBlbnRpdHkpO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHVwZGF0ZSh1cmwsZW50aXR5KSB7XG5cdFx0XHRyZXR1cm4gJGh0dHAucHV0KHVybCArICcvJyArIGVudGl0eS5pZCwgZW50aXR5KTtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBkZWwodXJsLGVudGl0eSkge1xuXHRcdFx0cmV0dXJuICRodHRwLmRlbGV0ZSh1cmwgKyAnLycgKyBlbnRpdHkuaWQpO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHBvc3RJbWFnZSh1cmwsIGF0dHJpYnV0ZSwgbW9kZWwpIHtcblx0XHRcdHZhciBmZCA9IG5ldyBGb3JtRGF0YSgpO1xuXHRcdFx0ZmQuYXBwZW5kKGF0dHJpYnV0ZSwgbW9kZWwpO1xuXHRcdFx0cmV0dXJuICRodHRwLnBvc3QodXJsICsgJy8nICsgYXR0cmlidXRlICsgJy8nLCBmZCwge1xuXHRcdFx0XHR0cmFuc2Zvcm1SZXF1ZXN0OiBhbmd1bGFyLmlkZW50aXR5LFxuXHRcdFx0XHRoZWFkZXJzOiB7J0NvbnRlbnQtVHlwZSc6IHVuZGVmaW5lZH1cblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGRlbGV0ZUltYWdlKHVybCwgYXR0cmlidXRlLCB2YWx1ZSkge1xuXHRcdFx0cmV0dXJuICRodHRwLmRlbGV0ZSh1cmwgKyAnLycgKyBhdHRyaWJ1dGUgKyAnLycgKyB2YWx1ZSwge1xuXHRcdFx0XHR0cmFuc2Zvcm1SZXF1ZXN0OiBhbmd1bGFyLmlkZW50aXR5LFxuXHRcdFx0XHRoZWFkZXJzOiB7J0NvbnRlbnQtVHlwZSc6IHVuZGVmaW5lZH1cblx0XHRcdH0pO1xuXG5cdFx0fVxuXHR9XG5cdGFuZ3VsYXIubW9kdWxlKCdndW1nYS5zZXJ2aWNlcy5iYXNlJyxbXSlcblx0LnNlcnZpY2UoJ0d1bWdhQmFzZScsQmFzZSk7XG59KSgpO1xuIiwiIiwiKGZ1bmN0aW9uKCl7XG5cdCd1c2Ugc3RyaWN0Jztcblx0RGF0ZVNlcnZpY2UuJGluamVjdCA9IFtdO1xuXHRmdW5jdGlvbiBEYXRlU2VydmljZSgpe1xuXHRcdHJldHVybiB7XG5cdFx0XHRmb3JtYXRzOiB7XG5cdFx0XHRcdERNWTogL14oXFxkezEsMn0pXFwtKFxcZHsxLDJ9KVxcLShcXGR7NH0pJC8sXG5cdFx0XHRcdFlNRDogL14oXFxkezR9KVxcLShcXGR7MSwyfSlcXC0oXFxkezEsMn0pJC9cblx0XHRcdH0sXG5cdFx0XHR2YWxpZGF0ZUZvcm1hdDogZnVuY3Rpb24oZm9ybWF0LCBkYXRlKSB7XG5cdFx0XHRcdGlmICghdGhpcy5mb3JtYXRzLmhhc093blByb3BlcnR5KGZvcm1hdCkpIHtcblx0XHRcdFx0XHR0aHJvdyAnRm9ybWF0byBuw6NvIHN1cG9ydGFkbyc7XG5cdFx0XHRcdH1cblx0XHRcdFx0dmFyIHJlZ2V4ID0gbmV3IFJlZ0V4cCh0aGlzLmZvcm1hdHNbZm9ybWF0XSk7XG5cdFx0XHRcdGlmICghcmVnZXgudGVzdChkYXRlKSkge1xuXHRcdFx0XHRcdHRocm93ICdBIGRhdGEgJyArIGRhdGUgKyAnIG7Do28gY29uZmVyZSBjb20gbyBmb3JtYXRvICcgKyBmb3JtYXQgKyAnLic7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHJlZ2V4LnRlc3QoZGF0ZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdGFuZ3VsYXIubW9kdWxlKCdndW1nYS5zZXJ2aWNlcy5kYXRlJyxbXSlcblx0LmZhY3RvcnkoJ0d1bWdhRGF0ZVNlcnZpY2UnLERhdGVTZXJ2aWNlKTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24oKXtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdEtleWJvYXJkLiRpbmplY3QgPSBbXTtcblx0LyoqXG5cdCAqIEBuZ2RvYyBzZXJ2aWNlXG5cdCAqIEBuYW1lIGd1bWdhLmNvcmU6R3VtZ2FLZXlib2FyZFxuXHQgKiBAZGVzY3JpcHRpb24gXG5cdCAqIFx0QSBkaXJlY3RpdmUgR3VtZ2FLZXlib2FyZCDDqSB1bSBXcmFwcGVyIGRlIHVtYSBiaWJsaW90ZWNhIGNoYW1hZGEgW01vdXNldHJhcF0oaHR0cHM6Ly9jcmFpZy5pcy9raWxsaW5nL21pY2UpIFxuXHQgKiBcdHF1ZSDDqSB1dGlsaXphZGEgcGFyYSBhZGljaW9uYXIgZnVuY2lvbmFsaWRhZGVzIHF1YW5kbyBkZXRlcm1pbmFkYXMgdGVjbGFzIHPDo28gcHJlc3Npb25hZGFzLlxuXHQgKlxuXHQgKiBcdCMgTcOpdG9kb3Ncblx0ICpcblx0ICogIGBHdW1nYUtleWJvYXJkLmFkZEJpbmQoa2V5LGZ1bmN0aW9uLGV2ZW50KWBcblx0ICogIFxuXHQgKiBcdE8gbcOpdG9kbyBgYWRkQmluZGAgYWRpY2lvbmEgdW1hIGZ1bsOnw6NvIGEgY29tYmluYcOnw6NvIGRlIHRlY2xhcyBwYXNzYWRhIGNvbW8gcGFyw6JtZXRyby4gRWxlIHJlY2ViZSB0csOqcyBwYXLDom1ldHJvcywgYGtleWAgZSBgZnVuY3Rpb25gIGUgYGV2ZW50YC5cblx0ICogICMjIyBQYXLDom1ldHJvc1xuXHQgKiAgLSA8bGFiZWwgY2xhc3M9XCJsYWJlbCBsYWJlbC13YXJuaW5nXCIgc3R5bGU9XCJtYXJnaW4tcmlnaHQ6IDElXCI+U3RyaW5nPC9sYWJlbD48bGFiZWwgY2xhc3M9XCJsYWJlbCBsYWJlbC1pbmZvXCI+a2V5PC9sYWJlbD4gUXVhaXMgdGVjbGFzIHNlcsOjbyBjbGljYWRhcyBwYXJhIHF1ZSBhIGZ1bsOnw6NvIHNlamEgZXhlY3V0YWRhLlxuXHQgKiAgLSA8bGFiZWwgY2xhc3M9XCJsYWJlbCBsYWJlbC13YXJuaW5nXCIgc3R5bGU9XCJtYXJnaW4tcmlnaHQ6IDElXCI+T2JqZWN0PC9sYWJlbD4gPGxhYmVsIGNsYXNzPVwibGFiZWwgbGFiZWwtaW5mb1wiPmZ1bmN0aW9uPC9sYWJlbD4gRnVuw6fDo28gcXVlIHNlcsOhIGV4ZWN1dGFkYSBxdWFuZG8gc2VxdcOqbmNpYSBkZSB0ZWNsYXMgZXNwZWNpZmljYWRhcyBmb3IgZGlnaXRhZGEgcGVsbyB1c3XDoXJpby5cblx0ICogIC0gPGxhYmVsIGNsYXNzPVwibGFiZWwgbGFiZWwtd2FybmluZ1wiIHN0eWxlPVwibWFyZ2luLXJpZ2h0OiAxJVwiPlN0cmluZzwvbGFiZWw+PGxhYmVsIGNsYXNzPVwibGFiZWwgbGFiZWwtaW5mb1wiPmV2ZW50PC9sYWJlbD4gRW0gcXVhbCBldmVudG8gZGUgdGVjbGFkbyBzZXLDoSBkaXNwYXJhZG8sIGNvbW8gcG9yIGV4ZW1wbG8gYGtleXByZXNzYCBvdWBrZXlkb3duYFxuXHQgKiAgIyMjIFJldG9ybm9cblx0ICogIC0gPGxhYmVsIGNsYXNzPVwibGFiZWwgbGFiZWwtd2FybmluZ1wiPkJvb2xlYW48L2xhYmVsPiBSZXRvbmEgdW0gYm9vbGVhbi4gU2UgbyBiaW5kIGZvaSBmZWl0bywgcmV0b3JuYSB0cnVlLCBjYXNvIGFvIGNvbnRyw6FyaW8gcmV0b3JuYSBmYWxzZS5cblx0ICogIC0tLVxuIFx0ICogIGBHdW1nYUtleWJvYXJkLnJlbW92ZUJpbmQoa2V5KWBcblx0ICogIFxuXHQgKiBcdE8gbcOpdG9kbyBgcmVtb3ZlQmluZGAgcmVtb3ZlIGFzIGZ1bsOnw7VlcyBxdWUgZXN0w6NvIGF0cmlidcOtZGFzIGEgYGtleWAgcXVlIGZvaSBwYXNzYWRhIC4gRWxlIHJlY2ViZSB1bSBwYXLDom1ldHJvIGBrZXlgLlxuXHQgKiAgIyMjIFBhcsOibWV0cm9zXG5cdCAqICAtIDxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLXdhcm5pbmdcIiBzdHlsZT1cIm1hcmdpbi1yaWdodDogMSVcIj5TdHJpbmc8L2xhYmVsPjxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLWluZm9cIj5rZXk8L2xhYmVsPiBRdWFpcyB0ZWNsYXMgcXVlIG8gZGVzZW52b2x2ZWRvciBkZXNlamEgcmVtb3ZlciBvIGJpbmQuXG5cdCAqICBcblx0ICogIC0tLVxuXHQgKiAgXG4gXHQgKiAgYEd1bWdhS2V5Ym9hcmQudHJpZ2dlckJvdW5kZWRFdmVudChrZXkpYFxuXHQgKiAgXG5cdCAqIFx0TyBtw6l0b2RvIGB0cmlnZ2VyQm91bmRlZEV2ZW50YCBkaXNwYXJhIG8gZXZlbnRvIGF0cmlidcOtZG8gYSBga2V5YCBxdWUgZm9pIHBhc3NhZGEuXG5cdCAqIFx0XG5cdCAqICAjIyNQYXLDom1ldHJvc1xuXHQgKiAgXG5cdCAqICAtIDxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLXdhcm5pbmdcIiBzdHlsZT1cIm1hcmdpbi1yaWdodDogMSVcIj5TdHJpbmc8L2xhYmVsPjxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLWluZm9cIj5rZXk8L2xhYmVsPiBRdWFpcyB0ZWNsYXMgcXVlIG8gZGVzZW52b2x2ZWRvciBkZXNlamEgcmVtb3ZlciBvIGJpbmQuXG5cdCAqICBcblx0ICogIC0tLVxuXHQgKlxuXHQgKiBcdGBHdW1nYUtleWJvYXJkLmJpbmRUb0VsZW1lbnQoZWxlbWVudCxrZXksZnVuY3Rpb24sZXZlbnQpYFxuIFx0ICogIFxuXHQgKiBcdE8gbcOpdG9kbyBgYmluZFRvRWxlbWVudGAgYWRpY2lvbmEgdW1hIGZ1bsOnw6NvIGEgY29tYmluYcOnw6NvIGRlIHRlY2xhcyBwYXNzYWRhIGNvbW8gcGFyw6JtZXRybyBlbSB1bSBlbGVtZW50byBlc3BlY8OtZmljby4gRWxlIHJlY2ViZSBxdWF0cm8gcGFyw6JtZXRyb3MsYGVsZW1lbnRgLCBga2V5YCBlIGBmdW5jdGlvbmAgZSBgZXZlbnRgLlxuXHQgKiAgIyMjIFBhcsOibWV0cm9zXG5cdCAqICAtIDxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLXdhcm5pbmdcIiBzdHlsZT1cIm1hcmdpbi1yaWdodDogMSVcIj5FbGVtZW50PC9sYWJlbD48bGFiZWwgY2xhc3M9XCJsYWJlbCBsYWJlbC1pbmZvXCI+ZWxlbWVudDwvbGFiZWw+IEVsZW1lbnRvIG5vIHF1YWwgYSBzZXF1w6puY2lhIGRlIHRlY2xhcyBkZXZlIHNlciBleGVjdXRhZGEgcGFyYSBkaXNwYXJhciBvIGV2ZW50by5cblx0ICogIC0gPGxhYmVsIGNsYXNzPVwibGFiZWwgbGFiZWwtd2FybmluZ1wiIHN0eWxlPVwibWFyZ2luLXJpZ2h0OiAxJVwiPlN0cmluZzwvbGFiZWw+PGxhYmVsIGNsYXNzPVwibGFiZWwgbGFiZWwtaW5mb1wiPmtleTwvbGFiZWw+IFF1YWlzIHRlY2xhcyBzZXLDo28gY2xpY2FkYXMgcGFyYSBxdWUgYSBmdW7Dp8OjbyBzZWphIGV4ZWN1dGFkYS5cblx0ICogIC0gPGxhYmVsIGNsYXNzPVwibGFiZWwgbGFiZWwtd2FybmluZ1wiIHN0eWxlPVwibWFyZ2luLXJpZ2h0OiAxJVwiPk9iamVjdDwvbGFiZWw+IDxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLWluZm9cIj5mdW5jdGlvbjwvbGFiZWw+IEZ1bsOnw6NvIHF1ZSBzZXLDoSBleGVjdXRhZGEgcXVhbmRvIHNlcXXDqm5jaWEgZGUgdGVjbGFzIGVzcGVjaWZpY2FkYXMgZm9yIGRpZ2l0YWRhIHBlbG8gdXN1w6FyaW8uXG5cdCAqICAtIDxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLXdhcm5pbmdcIiBzdHlsZT1cIm1hcmdpbi1yaWdodDogMSVcIj5TdHJpbmc8L2xhYmVsPjxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLWluZm9cIj5ldmVudDwvbGFiZWw+IEVtIHF1YWwgZXZlbnRvIGRlIHRlY2xhZG8gc2Vyw6EgZGlzcGFyYWRvLCBjb21vIHBvciBleGVtcGxvIGBrZXlwcmVzc2Agb3Vga2V5ZG93bmBcblx0ICogICMjIyBSZXRvcm5vXG5cdCAqICAtIDxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLXdhcm5pbmdcIj5Cb29sZWFuPC9sYWJlbD4gUmV0b25hIHVtIGJvb2xlYW4uIFNlIG8gYmluZCBmb2kgZmVpdG8sIHJldG9ybmEgdHJ1ZSwgY2FzbyBhbyBjb250csOhcmlvIHJldG9ybmEgZmFsc2UuXG5cdCAqICAtLS1cblx0ICpcbiBcdCAqIFx0YEd1bWdhS2V5Ym9hcmQudW5iaW5kRnJvbUVsZW1lbnQoZWxlbWVudCxrZXkpYFxuIFx0ICogIFxuXHQgKiBcdE8gbcOpdG9kbyBgdW5iaW5kRnJvbUVsZW1lbnRgIHJlbW92ZSBhcyB0ZWNsYXMgZG8gZWxlbWVudG8gcGFzc2FkbyBjb21vIHBhcsOibWV0cm8uIEVsZSByZWNlYmUgZG9pcyBwYXLDom1ldHJvcyxgZWxlbWVudGAgZSBga2V5YC5cblx0ICogICMjIyBQYXLDom1ldHJvc1xuXHQgKiAgLSA8bGFiZWwgY2xhc3M9XCJsYWJlbCBsYWJlbC13YXJuaW5nXCIgc3R5bGU9XCJtYXJnaW4tcmlnaHQ6IDElXCI+RWxlbWVudDwvbGFiZWw+PGxhYmVsIGNsYXNzPVwibGFiZWwgbGFiZWwtaW5mb1wiPmVsZW1lbnQ8L2xhYmVsPiBFbGVtZW50byBubyBxdWFsIGEgc2VxdcOqbmNpYSBkZSB0ZWNsYXMgdmFpIHNlciByZXRpcmFkYS5cblx0ICogIC0gPGxhYmVsIGNsYXNzPVwibGFiZWwgbGFiZWwtd2FybmluZ1wiIHN0eWxlPVwibWFyZ2luLXJpZ2h0OiAxJVwiPlN0cmluZzwvbGFiZWw+PGxhYmVsIGNsYXNzPVwibGFiZWwgbGFiZWwtaW5mb1wiPmtleTwvbGFiZWw+IFF1YWlzIHRlY2xhcyBzZXLDo28gcmVtb3ZpZGFzIGRvIGVsZW1lbnQuXG5cdCAqICAtLS1cblx0ICogIFxuXHQgKiBcdGBHdW1nYUtleWJvYXJkLmJpbmRUb011bHRpcGxlRWxlbWVudChhcnJheSxrZXksZnVuY3Rpb24sZXZlbnQpYFxuIFx0ICogIFxuXHQgKiBcdE8gbcOpdG9kbyBgYmluZFRvRWxlbWVudGAgYWRpY2lvbmEgdW1hIGZ1bsOnw6NvIGEgY29tYmluYcOnw6NvIGRlIHRlY2xhcyBwYXNzYWRhIGNvbW8gcGFyw6JtZXRybyBlbSB1bSBlbGVtZW50byBlc3BlY8OtZmljby4gRWxlIHJlY2ViZSBxdWF0cm8gcGFyw6JtZXRyb3MsYGVsZW1lbnRgLCBga2V5YCBlIGBmdW5jdGlvbmAgZSBgZXZlbnRgLlxuXHQgKiAgIyMjIFBhcsOibWV0cm9zXG5cdCAqICAtIDxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLXdhcm5pbmdcIiBzdHlsZT1cIm1hcmdpbi1yaWdodDogMSVcIj5BcnJheTwvbGFiZWw+PGxhYmVsIGNsYXNzPVwibGFiZWwgbGFiZWwtaW5mb1wiPmFycmF5PC9sYWJlbD4gTGlzdGEgZG9zIGVsZW1lbnRvcyBxdWUgc2Vyw6NvIGFkaWNpb25hZG9zIGEgc2VxdcOqbmNpYSBkZSB0ZWNsYXMuXG5cdCAqICAtIDxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLXdhcm5pbmdcIiBzdHlsZT1cIm1hcmdpbi1yaWdodDogMSVcIj5TdHJpbmc8L2xhYmVsPjxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLWluZm9cIj5rZXk8L2xhYmVsPiBRdWFpcyB0ZWNsYXMgc2Vyw6NvIGNsaWNhZGFzIHBhcmEgcXVlIGEgZnVuw6fDo28gc2VqYSBleGVjdXRhZGEuXG5cdCAqICAtIDxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLXdhcm5pbmdcIiBzdHlsZT1cIm1hcmdpbi1yaWdodDogMSVcIj5PYmplY3Q8L2xhYmVsPiA8bGFiZWwgY2xhc3M9XCJsYWJlbCBsYWJlbC1pbmZvXCI+ZnVuY3Rpb248L2xhYmVsPiBGdW7Dp8OjbyBxdWUgc2Vyw6EgZXhlY3V0YWRhIHF1YW5kbyBzZXF1w6puY2lhIGRlIHRlY2xhcyBlc3BlY2lmaWNhZGFzIGZvciBkaWdpdGFkYSBwZWxvIHVzdcOhcmlvLlxuXHQgKiAgLSA8bGFiZWwgY2xhc3M9XCJsYWJlbCBsYWJlbC13YXJuaW5nXCIgc3R5bGU9XCJtYXJnaW4tcmlnaHQ6IDElXCI+U3RyaW5nPC9sYWJlbD48bGFiZWwgY2xhc3M9XCJsYWJlbCBsYWJlbC1pbmZvXCI+ZXZlbnQ8L2xhYmVsPiBFbSBxdWFsIGV2ZW50byBkZSB0ZWNsYWRvIHNlcsOhIGRpc3BhcmFkbywgY29tbyBwb3IgZXhlbXBsbyBga2V5cHJlc3NgIG91YGtleWRvd25gXG5cdCAqICAjIyMgUmV0b3Jub1xuXHQgKiAgLSA8bGFiZWwgY2xhc3M9XCJsYWJlbCBsYWJlbC13YXJuaW5nXCI+Qm9vbGVhbjwvbGFiZWw+IFJldG9uYSB1bSBib29sZWFuLiBTZSBvIGJpbmQgZm9pIGZlaXRvLCByZXRvcm5hIHRydWUsIGNhc28gYW8gY29udHLDoXJpbyByZXRvcm5hIGZhbHNlLlxuXHQgKiAgLS0tXG5cdCAqXG4gXHQgKiBcdGBHdW1nYUtleWJvYXJkLmdldEJpbmRzKClgXG4gXHQgKiAgXG5cdCAqIFx0TyBtw6l0b2RvIGBnZXRCaW5kc2AgcmV0b3JuYSB0b2RvcyBvcyBiaW5kcyBxdWUgZm9yYW0gYWRpY2lvbmFkb3MuXG5cdCAqXG5cdCAqIFxuXHQgKiAgIyMjIFJldG9ybm9cblx0ICogIC0gPGxhYmVsIGNsYXNzPVwibGFiZWwgbGFiZWwtd2FybmluZ1wiPkFycmF5PC9sYWJlbD4gUmV0b3JuYSB1bWEgbGlzdGEgZGUgdG9kb3Mgb3MgYmluZHMgasOhIGZlaXRvcy5cblx0ICogIFxuXHQgKiAgLS0tXG5cdCAqL1xuXHRmdW5jdGlvbiBLZXlib2FyZCgpe1xuXHRcdHJldHVybiB7XG5cdFx0XHRhZGRCaW5kOiBmdW5jdGlvbihrZXksZm4sZXZlbnQpe1xuXHRcdFx0XHRpZihrZXkgJiYgZm4pe1xuXHRcdFx0XHRcdE1vdXNldHJhcC5iaW5kKGtleSxmbixldmVudD8gZXZlbnQgOiAnJyk7XG5cdFx0XHRcdFx0dGhpcy5fX2JpbmRzLnB1c2goa2V5KTtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9LHJlbW92ZUJpbmQ6IGZ1bmN0aW9uKGtleSl7XG5cdFx0XHRcdGlmKGtleSl7XG5cdFx0XHRcdFx0TW91c2V0cmFwLnVuYmluZChrZXkpO1xuXHRcdFx0XHRcdHRoaXMuX19iaW5kcy5zcGxpY2UodGhpcy5fX2JpbmRzLmluZGV4T2Yoa2V5KSwxKTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdHRyaWdnZXJCb3VuZGVkRXZlbnQ6IGZ1bmN0aW9uKGtleSl7XG5cdFx0XHRcdGlmKGtleSl7XG5cdFx0XHRcdFx0TW91c2V0cmFwLnRyaWdnZXIoa2V5KTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGJpbmRUb0VsZW1lbnQ6IGZ1bmN0aW9uKGVsZW1lbnQsa2V5LGZuLGV2ZW50KXtcblx0XHRcdFx0aWYoZWxlbWVudCAmJiBrZXkgJiYgZm4pe1xuXHRcdFx0XHRcdE1vdXNldHJhcChlbGVtZW50KS5iaW5kKGtleSxmbixldmVudCA/IGV2ZW50OiAnJyk7XG5cdFx0XHRcdFx0dGhpcy5fX2JpbmRzLnB1c2goa2V5KTtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9LFxuXHRcdFx0dW5iaW5kRnJvbUVsZW1lbnQ6IGZ1bmN0aW9uKGVsZW1lbnQsa2V5KXtcblx0XHRcdFx0aWYoZWxlbWVudCAmJiBrZXkpIHtcblx0XHRcdFx0XHRNb3VzZXRyYXAoZWxlbWVudCkudW5iaW5kKGtleSk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRiaW5kVG9NdWx0aXBsZUVsZW1lbnRzOiBmdW5jdGlvbihhcnJheU9mRWxlbWVudHMsa2V5LGZuLGV2ZW50KXtcblx0XHRcdFx0Zm9yKHZhciBpID0gMCwgbGVuID0gYXJyYXlPZkVsZW1lbnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSBpZihrZXkgJiYgZm4pe1xuXHRcdFx0XHRcdE1vdXNldHJhcChhcnJheU9mRWxlbWVudHNbaV0pLmJpbmQoa2V5LGZuLGV2ZW50PyBldmVudDogJycpO1xuXHRcdFx0XHRcdHRoaXMuX19iaW5kcy5wdXNoKGtleSk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRnZXRCaW5kczogZnVuY3Rpb24oKXtcblx0XHRcdFx0cmV0dXJuIHRoaXMuX19iaW5kcztcblx0XHRcdH0sXG5cdFx0XHRfX2JpbmRzOiBbXVxuXHRcdH1cblx0fVxuXHRhbmd1bGFyLm1vZHVsZSgnZ3VtZ2Euc2VydmljZXMua2V5Ym9hcmQnLFtdKVxuXHRcdC5mYWN0b3J5KCdHdW1nYUtleWJvYXJkJyxLZXlib2FyZCk7XG59KSgpOyIsIihmdW5jdGlvbigpe1xuXHQndXNlIHN0cmljdCc7XG5cblx0YW5ndWxhci5tb2R1bGUoJ2d1bWdhLnNlcnZpY2VzLm5vdGlmaWNhdGlvbnMnLFtdKVxuXHRcdC5mYWN0b3J5KCdHdW1nYU5vdGlmaWNhdGlvbicsZnVuY3Rpb24oKXtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdF9kYW5nZXJNZXNzYWdlczp7fSxcblx0XHRcdFx0X3N1Y2Nlc3NNZXNzYWdlczp7fSxcblx0XHRcdFx0X3dhcm5pbmdNZXNzYWdlczp7fSxcblx0XHRcdFx0X2luZm9NZXNzYWdlczp7fSxcdFx0XHRcdFxuXHRcdFx0XHRjcmVhdGVEYW5nZXJNZXNzYWdlOiBmdW5jdGlvbigpe1xuXG5cdFx0XHRcdH0sXHRcblx0XHRcdFx0Y3JlYXRlU3VjY2Vzc01lc3NhZ2U6IGZ1bmN0aW9uKCl7XG5cblx0XHRcdFx0fSxcblx0XHRcdFx0Y3JlYXRlV2FybmluZ01lc3NhZ2U6IGZ1bmN0aW9uKCl7XG5cblx0XHRcdFx0fSxcblx0XHRcdFx0Y3JlYXRlSW5mb01lc3NhZ2U6IGZ1bmN0aW9uKCl7XG5cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pXG59KSgpOyIsIihmdW5jdGlvbigpe1xuXHQndXNlIHN0cmljdCc7XG5cblx0UG9wdWxhdGUuJGluamVjdCA9IFtdO1xuXHQvKipcblx0ICogQG5nZG9jIHNlcnZpY2Vcblx0ICogQG5hbWUgZ3VtZ2EuY29yZTokcG9wdWxhdGVQcm92aWRlclxuXHQgKiBAZGVzY3JpcHRpb24gTyBzZXJ2aWNlICoqJHBvcHVsYXRlKiogw6kgdXRpbGl6YWRvIHBhcmEgYWRpY2lvbmFyIGZ1bsOnw7VlcyBiw6FzaWNhcyBkZSBDUlVELCBxdWUgasOhIGZhemVtIGEgY29uZXjDo28gY29tIG8gU2VydmljZVxuXHQgKiAgKCpNZWxob3IgdXRpbGl6YWRvIGNvbSBvIHNlcnZpY2UgR3VtZ2FSZXN0KiksIHBvc3NpYmlsaXRhbmRvIGFzc2ltIHF1ZSBvICRzY29wZSBmaXF1ZSBsaW1wby4gw4kgcG9zc8OtdmVsIHRhbWLDqW0gY3JpYXIgdW1hIGNvbmZpZ3VyYcOnw6NvIFxuXHQgKiAgbm92YSBwYXJhIHNlciB1dGlsaXphZGEsIGV4dGVuZGVyIGFzIGrDoSBjcmlhZGFzIGUgcmVjdXBlcmFyIG8gb2JqZXRvIGRlIGNvbnRyb2xlIGRhIGNvbmZpZ3VyYcOnw6NvLlxuXHQgKlxuXHQgKiBcdEFzIGZ1bsOnw7VlcyBjcmlhbSB1bSBvYmpldG8gY29tIG8gbm9tZSBkbyBJRCBwYXNzYWRvIHBhcmEgYXJtYXplbmFyIG9zIGRhZG9zLiBBbMOpbSBkaXNzbywgbyBpZGVudGlmaWNhZG9yIMOpIHV0aWxpemFkbyBwYXJhIG5vbWVhciBhcyBmdW7Dp8O1ZXMuIENhc28gbyBJZGVudGlmaWNhZG9yIFxuXHQgKiBcdHBhc3NhZG8gc2VqYSBgVXNlcmAgZSBhIGZ1bsOnw6NvIHNlamEgYGdldGAsIG8gbm9tZSBkYSBmdW7Dp8OjbyBzZXLDoSBgdXNlckdldGAsIHBhcmEgZXZpdGFyIGNvbGlzw6NvIGRlIG5vbWVzLlxuXHQgKiBcdFRvZGFzIGFzIGZ1bsOnw7VlcyBwb3NzdWVtIGV2ZW50b3MgcXVlIHPDo28gZGlzcGFyYWRvcyBhbnRlcyBlIGRlcG9pcyBkYSBleGVjdcOnw6NvIGRhIGZ1bsOnw6NvLCBwYXJhIGFqdWRhciBvIGRlc2Vudm9sdmVkb3IgYSBleHRlbmRlciBhcyBmdW5jaW9uYWxpZGFkZXNcblx0ICogXHRkYXMgZnVuw6fDtWVzIHNlbSBwcmVjaXNhciBzb2JyZXNjcmV2ZXItbGFzLiBQYXJhIHV0aWxpemFyIGVzdGVzIGV2ZW50b3MsIGJhc3RhIGFkaWNpb25hciB1bSBsaXN0ZW5lciBubyAkc2NvcGUsIGNvbW8gcG9yIGV4ZW1wbG86XG5cdCAqICA8cHJlPlxuXHQgKiAgXHQkc2NvcGUuJG9uKCdiZWZvcmVHZXQnLGZ1bmN0aW9uKCl7XG5cdCAqICAgIGFsZXJ0KCdBbnRlcyBkbyBHZXQhJyk7XG5cdCAqICBcdH0pXG5cdCAqXG5cdCAqIFx0XHQkc2NvcGUuJG9uKCdhZnRlckdldCcsZnVuY3Rpb24odmFsdWVzKXtcblx0ICpcdFx0ICAvLyB2YWx1ZXMgw6kgcmV0b3JubyBkYSBmdW7Dp8OjbyBhc8OtbmNyb25hLlxuXHQgKiBcdFx0fSlcblx0ICogXHQ8L3ByZT5cblx0ICogXHRcdFxuXHQgKlxuXHQgKiAjIENvbW8gdXRpbGl6YXI6XG5cdCAqXG5cdCAqIFx0UGFyYSB1dGlsaXphciBvIGFzc2lzdGVudGUsIMOpIG5lY2Vzc8OhcmlvIGluamV0YXIgY29tbyBkZXBlbmTDqm5jaWEgbm8gYmxvY28gZGUgY29uZmlndXJhw6fDo28gZG8gbcOzZHVsbzpcblx0ICogXHQ8cHJlPlxuXHQgKiAgXHRhbmd1bGFyLm1vZHVsZSgnc2FtcGxlJyxbJ2d1bWdhLmNvcmUnXSlcblx0ICogIFx0LmNvbmZpZyhmdW5jdGlvbigkcG9wdWxhdGVQcm92aWRlcil7XG5cdCAqICAgICAkc3RhdGVQcm92aWRlclxuICAgKiAgIFx0IC5zdGF0ZSgnY3J1ZC5saXN0Jywge1xuICAgKiAgICAgIHVybDogJy9saXN0Jyxcblx0ICogICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9tb2R1bGVzL2NydWQvdmlld3MvbGlzdC5odG1sJyxcblx0ICogICAgICBjb250cm9sbGVyOiAnQ3J1ZENvbnRyb2xsZXInLFxuICAgKiAgICAgIHJlc29sdmU6ICB7XG4gICAqICAgICAgIHBvcHVsYXRlU2NvcGU6IGZ1bmN0aW9uKCl7XG4gICAqICAgICAgICByZXR1cm4gJHBvcHVsYXRlUHJvdmlkZXIucG9wdWxhdGVTY29wZTtcbiAgICogICAgICAgfVxuICAgKiAgICAgfVxuICAgKiAgIH0pXG5cdCAqICAgfSlcblx0ICogIDwvcHJlPlxuXHQgKlxuXHQgKiBcdEUgZGVwb2lzIG5vIGNvbnRyb2xsZXIsIHV0aWxpemFyIGVsZSBleGVjdXRhbmRvIGEgZnVuw6fDo28gcG9wdWxhdGVTY29wZSBxdWUgZm9pIHBhc3NhZGEgYXRyYXbDqXMgZG8gcmVzb2x2ZTpcblx0ICogXHQ8cHJlPlxuXHQgKiBcdFx0YW5ndWxhci5tb2R1bGUoJ3NhbXBsZScpXG5cdCAqIFx0XHQuY29udHJvbGxlcignU2FtcGxlQ29udHJvbGxlcicsXG5cdCAqIFx0ICAgWyckc2NvcGUnLCdwb3B1bGF0ZVNjb3BlJywnVXNlclNlcnZpY2UnLGZ1bmN0aW9uKCRzY29wZSxwb3B1bGF0ZVNjb3BlLFVzZXJTZXJ2aWNlKXtcblx0ICogXHRcdCAgIHBvcHVsYXRlU2NvcGUoJHNjb3BlLFVzZXJTZXJ2aWNlLCdVc2VyJywnYmFzZS1saXN0Jyk7XG5cdCAqIFx0ICAgfV0pXG5cdCAqIFx0PC9wcmU+XG5cdCAqXG5cdCAqIFx0UG9kZS1zZSBvcHRhciB0YW1iw6ltIHBvciBuw6NvIGluY2x1aXIgbm8gbcOzZHVsbyBkZSBjb25maWd1cmHDp8OjbywgbWFzIGRpcmV0byBubyBjb250cm9sbGVyOlxuXHQgKiBcdDxwcmU+XG5cdCAqIFx0XHRhbmd1bGFyLm1vZHVsZSgnc2FtcGxlJylcblx0ICogXHRcdC5jb250cm9sbGVyKCdTYW1wbGVDb250cm9sbGVyJyxcblx0ICogXHQgICBbJyRzY29wZScsJyRwb3B1bGF0ZScsJ1VzZXJTZXJ2aWNlJyxmdW5jdGlvbigkc2NvcGUsJHBvcHVsYXRlLFVzZXJTZXJ2aWNlKXtcblx0ICogXHRcdCAgICRwb3B1bGF0ZS5wb3B1bGF0ZVNjb3BlKCRzY29wZSxVc2VyU2VydmljZSwnVXNlcicsJ2Jhc2UtbGlzdCcpO1xuXHQgKiBcdCAgIH1dKVxuXHQgKiBcdDwvcHJlPlxuXHQgKlxuXHQgKiAjIENvbmZpZ3VyYcOnw7Vlczpcblx0ICpcblx0ICogXHQtIGBiYXNlLWxpc3RgOiBBIGNvbmZpZ3VyYcOnw6NvIGBiYXNlLWxpc3RgIHNlcnZlIHBhcmEgaW5jbHVpciBmdW7Dp8O1ZXMgZ2VyYWlzIHF1ZSBzw6NvIG5lY2Vzc8OhcmlhcyBlbSBww6FnaW5hcyBkZSBsaXN0YWdlbSwgcXVlIHPDo286XG5cdCAqIFx0XHQtIGBnZXRgXG5cdCAqIFx0XHQtIGByZXNldEFuZEdldGBcblx0ICogXHRcdC0gYGdldEJ5SWRgXG5cdCAqIFx0XHQtIGB1cGRhdGVgXG5cdCAqIFx0XHQtIGBkZWxldGVgXG5cdCAqIFx0XHRcblx0ICogICAgLSBgc29ydGBcblx0ICogICAgLSBgc2VhcmNoYFxuXHQgKiAgICAtIGBhZHZhbmNlZFNlYXJjaGBcblx0ICogICAgXG5cdCAqICAgIFxuXHQgKiBcdC0gYGJhc2UtZm9ybWA6IEEgY29uZmlndXJhw6fDo28gYGJhc2UtZm9ybWAgc2VydmUgcGFyYSBpbmNsdWlyIGZ1bsOnw7VlcyBnZXJhaXMgcXVlIHPDo28gbmVjZXNzw6FyaWFzIGVtIHDDoWdpbmFzIGRlIGZvcm11bMOhcmlvLCBxdWUgc8Ojbzpcblx0ICogXHRcdC0gYGdldE5ld2Bcblx0ICogXHRcdC0gYGdldEJ5SWRgXG5cdCAqIFx0XHQtIGBzYXZlYFxuXHQgKiBcdFx0LSBgdXBkYXRlYFxuXHQgKiBcdFx0LSBgc2F2ZUltYWdlYFxuXHQgKiBcdFx0XG5cdCAqICAgIC0gYGRlbGV0ZUltYWdlYFxuXHQgKlxuXHQgKiBcblx0ICogXHQtIGBtYW55LXRvLW1hbnlgOiBBIGNvbmZpZ3VyYcOnw6NvIGBtYW55LXRvLW1hbnlgIHNlcnZlIHBhcmEgaW5jbHVpciBmdW7Dp8O1ZXMgcXVlIGNvbXVtZW50ZSBzw6NvIHV0aWxpemFkYXMgZW0gcmVsYcOnw7VlcyBtdWl0b3MgcGFyYSBtdWl0b3MsIHF1ZSBzw6NvOlxuXHQgKiBcdFx0LSBgc2VhcmNoYCBcblx0ICogXHRcdC0gYHNhdmVgXG5cdCAqIFx0XHQtIGBzZWFyY2hBc3luY2Bcblx0ICogXHRcdC0gYHNhdmVBc3luY2Bcblx0ICpcblx0ICogXHQtIGBtYW55LXRvLW9uZWA6IEEgY29uZmlndXJhw6fDo28gYG1hbnktdG8tb25lYCBzZXJ2ZSBwYXJhIGluY2x1aXIgZnVuw6fDtWVzIHF1ZSBjb211bWVudGUgc8OjbyB1dGlsaXphZGFzIGVtIHJlbGHDp8O1ZXMgbXVpdG9zIHBhcmEgdW0sIHF1ZSBzw6NvOiBcblx0ICogXHRcdC0gYHNlYXJjaGAgXG5cdCAqIFx0XHQtIGBzYXZlYFxuXHQgKiBcdFx0LSBgc2F2ZUFzeW5jYFxuXHQgKlxuXHQgKlx0IyMgSW1wbGVtZW50YcOnw7Vlczpcblx0ICpcdFx0UGFyYSB2ZXIgYXMgaW1wbGVtZW50YcOnw7VlcyBkYXMgZnVuw6fDtWVzIGFjaW1hLCBjbGlxdWUgW2FxdWldKCkuXG5cdCAqXG5cdCAqXHQjIE3DqXRvZG9zXG5cdCAqICBgJHBvcHVsYXRlLnNldENvbmZpZyhuYW1lLHZhbHVlKWBcblx0ICogIFxuXHQgKiAgTyBtw6l0b2RvIHNldENvbmZpZyBhY2VpdGEgZG9pcyBwYXLDom1ldHJvcyBgbmFtZWAgZSBgdmFsdWVgLCBvIG5vbWUgZGEgY29uZmlndXJhw6fDo28gZSBvIG9iamV0byBxdWUgaXLDoSBmYXplciBhIGNvbmZpZ3VyYcOnw6NvLlxuXHQgKiAgIyMjIFBhcsOibWV0cm9zXG5cdCAqICAtIDxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLXdhcm5pbmdcIiBzdHlsZT1cIm1hcmdpbi1yaWdodDogMSVcIj5TdHJpbmc8L2xhYmVsPjxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLWluZm9cIj5uYW1lPC9sYWJlbD4gU3RyaW5nIHF1ZSBzZXLDoSB1c2FkYSBwYXJhIGlkZW50aWZpY2FyIG8gb2JqZXRvIHF1ZSBzZXLDoSBjcmlhZG8uXG5cdCAqICAtIDxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLXdhcm5pbmdcIiBzdHlsZT1cIm1hcmdpbi1yaWdodDogMSVcIj5PYmplY3Q8L2xhYmVsPiA8bGFiZWwgY2xhc3M9XCJsYWJlbCBsYWJlbC1pbmZvXCI+dmFsdWU8L2xhYmVsPiBPYmpldG8gZGUgY29uZmlndXJhw6fDo28gcXVlIHNlcsOhIHVzYWRvLlxuXHQgKiAgIFBhcmEgYWRpY2lvbmFyIGEgZnVuw6fDo28sIGNvbG9xdWUgbyBub21lIGRhIGZ1bsOnw6NvIGUgbyB2YWxvciBkZWxlIGNvbW8gYHRydWVgXG5cdCAqICBcblx0ICogIC0tLVxuXHQgKiAgXG5cdCAqICBgJHBvcHVsYXRlLmdldENvbmZpZyhuYW1lKWBcblx0ICogIFxuXHQgKiAgTyBtw6l0b2RvIGdldENvbmZpZyBhY2VpdGEgdW0gcGFyw6JtZXRybyBgbmFtZWAsIHF1ZSDDqSBvIG5vbWUgZGEgY29uZmlndXJhw6fDo28gZGVzZWphZGEuXG5cdCAqICAjIyMgUGFyw6JtZXRyb3Ncblx0ICogIC0gPGxhYmVsIGNsYXNzPVwibGFiZWwgbGFiZWwtd2FybmluZ1wiIHN0eWxlPVwibWFyZ2luLXJpZ2h0OiAxJVwiPlN0cmluZzwvbGFiZWw+PGxhYmVsIGNsYXNzPVwibGFiZWwgbGFiZWwtaW5mb1wiPm5hbWU8L2xhYmVsPiBTdHJpbmcgcXVlIHNlcsOhIHVzYWRhIHBhcmEgaWRlbnRpZmljYXIgbyBvYmpldG8gcXVlIHNlcsOhIHJlY3VwZXJhZG8uXG5cdCAqICAgUGFyYSBhZGljaW9uYXIgYSBmdW7Dp8OjbywgY29sb3F1ZSBvIG5vbWUgZGEgZnVuw6fDo28gZSBvIHZhbG9yIGRlbGUgY29tbyBgdHJ1ZWBcblx0ICpcblx0ICogXHQjIyMgUmV0b3Jub1xuXHQgKlxuXHQgKiBcblx0ICogIC0gPGxhYmVsIGNsYXNzPVwibGFiZWwgbGFiZWwtaW5mb1wiPk9iamVjdDwvbGFiZWw+IENvbmZpZ3VyYcOnw6NvIHF1ZSBzZXLDoSByZWN1cGVyYWRhIGRhIGZ1bsOnw6NvLlxuXHQgKlxuXHQgKiBcblx0ICogIC0tLSBcdFxuXHQgKiAgXG5cdCAqICBgJHBvcHVsYXRlLnNldE1ldGhvZChuYW1lLGNvbmZpZyxmdW5jdGlvbilgXG5cdCAqICBcblx0ICogIE8gbcOpdG9kbyBzZXRNZXRob2QgYWNlaXRhIHRyw6pzIHBhcsOibWV0cm9zOiBgbmFtZWAsYGNvbmZpZ2AsIGBmdW5jdGlvbmAuIEVzdGUgbcOpdG9kbyDDqSB1dGlsaXphZG8gcGFyYSBleHRlbmRlciBhcyBmdW5jaW9uYWxpZGFkZXMgZGUgdW1hIGNvbmZpZ3VyYcOnw6NvLlxuXHQgKiAgXG5cdCAqICAjIyMgUGFyw6JtZXRyb3Ncblx0ICogIC0gPGxhYmVsIGNsYXNzPVwibGFiZWwgbGFiZWwtd2FybmluZ1wiIHN0eWxlPVwibWFyZ2luLXJpZ2h0OiAxJVwiPlN0cmluZzwvbGFiZWw+PGxhYmVsIGNsYXNzPVwibGFiZWwgbGFiZWwtaW5mb1wiPm5hbWU8L2xhYmVsPiBTdHJpbmcgcXVlIHNlcsOhIHVzYWRhIHBhcmEgaWRlbnRpZmljYXIgY29tbyBzZXLDoSBvIG5vbWUgZGEgZnVuw6fDo28gYSBzZXIgYWRpY2lvbmFkYS5cblx0ICogICBQYXJhIGFkaWNpb25hciBhIGZ1bsOnw6NvLCBjb2xvcXVlIG8gbm9tZSBkYSBmdW7Dp8OjbyBlIG8gdmFsb3IgZGVsZSBjb21vIGB0cnVlYFxuXHQgKiAgLSA8bGFiZWwgY2xhc3M9XCJsYWJlbCBsYWJlbC13YXJuaW5nXCIgc3R5bGU9XCJtYXJnaW4tcmlnaHQ6IDElXCI+U3RyaW5nPC9sYWJlbD48bGFiZWwgY2xhc3M9XCJsYWJlbCBsYWJlbC1pbmZvXCI+Y29uZmlnPC9sYWJlbD4gU3RyaW5nIHF1ZSBzZXLDoSB1c2FkYSBwYXJhIGlkZW50aWZpY2FyIHF1YWwgb2JqZXRvIGRlIGNvbmZpZ3VyYcOnw6NvIGVzdGEgZnVuw6fDo28gc2Vyw6EgYWRpY2lvbmFkYS5cblx0ICogICBQYXJhIGFkaWNpb25hciBhIGZ1bsOnw6NvLCBjb2xvcXVlIG8gbm9tZSBkYSBmdW7Dp8OjbyBlIG8gdmFsb3IgZGVsZSBjb21vIGB0cnVlYFxuXHQgKiAgLSA8bGFiZWwgY2xhc3M9XCJsYWJlbCBsYWJlbC13YXJuaW5nXCIgc3R5bGU9XCJtYXJnaW4tcmlnaHQ6IDElXCI+RnVuY3Rpb248L2xhYmVsPjxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLWluZm9cIj5mdW5jdGlvbjwvbGFiZWw+IEZ1bsOnw6NvIHF1ZSBzZXLDoSBhZGljaW9uYWRhIGFvICRzY29wZS4gKkFvIHBhc3NhciBhIGZ1bsOnw6NvLCBvIGRlc2Vudm9sdmVkb3Jcblx0ICogIHRlbSBhY2Vzc28gYSA0IHBhcsOibWV0cm9zIHF1ZSBzZXLDo28gdXRpbGl6YWRvcyBwYXJhIGRlZmluaXIgYSBmdW7Dp8OjbyBubyBzY29wZTogYFNjb3BlYCwgYFNlcnZpY2VgLGBJZGAqLlxuXHQgKlxuXHQgKiAgLS0tIFx0XG5cdCAqXG4gXHQgKiAgXG5cdCAqICBgJHBvcHVsYXRlLnBvcHVsYXRlU2NvcGUoc2NvcGUsc2VydmljZSxpZCxjb25maWcpYFxuXHQgKiAgXG5cdCAqICBPIG3DqXRvZG8gcG9wdWxhdGVTY29wZSBhY2VpdGEgcXVhdHJvIHBhcsOibWV0cm9zOiBgc2NvcGVgLGBzZXJ2aWNlYCwgYGlkYCBlIGBjb25maWdgLiBFc3RlIG3DqXRvZG8gw6kgdXRpbGl6YWRvIHBhcmEgcG9wdWxhciBvICRzY29wZSBkbyBjb250cm9sYWRvciBjb20gYXMgZnVuw6fDtWVzIGRhIGNvbmZpZ3VyYcOnw6NvLlxuXHQgKiAgXG5cdCAqICAjIyMgUGFyw6JtZXRyb3Ncblx0ICogIC0gPGxhYmVsIGNsYXNzPVwibGFiZWwgbGFiZWwtd2FybmluZ1wiIHN0eWxlPVwibWFyZ2luLXJpZ2h0OiAxJVwiPk9iamVjdDwvbGFiZWw+PGxhYmVsIGNsYXNzPVwibGFiZWwgbGFiZWwtaW5mb1wiPnNjb3BlPC9sYWJlbD4gT2JqZXRvIG9uZGUgYXMgZnVuw6fDtWVzIHPDo28gY29sb2NhZGFzLCBjYXNvIHNlamFtIG51bSBjb250cm9sYWRvciwgbm8gKiRzY29wZSouXG5cdCAqICAgUGFyYSBhZGljaW9uYXIgYSBmdW7Dp8OjbywgY29sb3F1ZSBvIG5vbWUgZGEgZnVuw6fDo28gZSBvIHZhbG9yIGRlbGUgY29tbyBgdHJ1ZWBcblx0ICogIC0gPGxhYmVsIGNsYXNzPVwibGFiZWwgbGFiZWwtd2FybmluZ1wiIHN0eWxlPVwibWFyZ2luLXJpZ2h0OiAxJVwiPlN0cmluZzwvbGFiZWw+PGxhYmVsIGNsYXNzPVwibGFiZWwgbGFiZWwtaW5mb1wiPmlkPC9sYWJlbD4gSWRlbnRpZmljYWRvciBxdWUgc2Vyw6EgdXRpbGl6YWRvIHBhcmEgYXJtYXplbmFyIG9zIGRhZG9zIG5vICRzY29wZSwgYWzDqW0gZGUgbm9tZWFyXG5cdCAqICBhcyBmdW7Dp8O1ZXMuXG4gXHQgKiAgLSA8bGFiZWwgY2xhc3M9XCJsYWJlbCBsYWJlbC13YXJuaW5nXCIgc3R5bGU9XCJtYXJnaW4tcmlnaHQ6IDElXCI+U3RyaW5nPC9sYWJlbD48bGFiZWwgY2xhc3M9XCJsYWJlbCBsYWJlbC1pbmZvXCI+Y29uZmlnPC9sYWJlbD4gU3RyaW5nIHF1ZSBzZXLDoSB1dGlsaXphZGEgcGFyYSBkZWZpbmlyIHF1YWwgY29uZmlndXJhw6fDo28gc2Vyw6EgdXRpbGl6YWRhLlxuXHQgKiAgLS0tIFx0IFxuXHQgKi9cblx0XG5cdGZ1bmN0aW9uIFBvcHVsYXRlKCl7XG5cdFx0dmFyIGhlbHBlcnMgPSB7fSwgY29uZmlncyA9IHt9LCBtZXRob2RzID0ge307XG5cdFx0aGVscGVycy5ndWFyYW50ZWVTdHJpbmcgPSBmdW5jdGlvbihzKXsgcmV0dXJuIChzICYmIGFuZ3VsYXIuaXNTdHJpbmcocykpfTtcblx0XHRoZWxwZXJzLmd1YXJhbnRlZUFycmF5ID0gZnVuY3Rpb24oYSl7IHJldHVybiAoYSAmJiBhbmd1bGFyLmlzQXJyYXkoYSkpfTtcblx0XHRoZWxwZXJzLmd1YXJhbnRlZUlzRGVmaW5lZCA9IGZ1bmN0aW9uKGQpeyByZXR1cm4gYW5ndWxhci5pc0RlZmluZWQoZCl9O1xuXHRcdGhlbHBlcnMuZ3VhcmFudGVlQmFzaWNMaXN0ID0gZnVuY3Rpb24ocyl7IHJldHVybiAocyAmJiB0aGlzLmd1YXJhbnRlZVN0cmluZyhzKSAmJiBzID09ICdiYXNpYy1saXN0Jyl9O1xuXHRcdGNvbmZpZ3NbJ2Jhc2UtbGlzdCddPSB7XG5cdFx0XHRnZXQ6IHRydWUsXG5cdFx0XHRyZXNldEFuZEdldDogdHJ1ZSxcblx0XHRcdGdldEJ5SWQ6IHRydWUsXG5cdFx0XHR1cGRhdGU6IHRydWUsXG5cdFx0XHRkZWxldGU6IHRydWUsXG5cdFx0XHRzb3J0OiB0cnVlLFxuXHRcdFx0c2VhcmNoOiB0cnVlLFxuXHRcdFx0YWR2YW5jZWRTZWFyY2g6IHRydWUsXG5cdFx0XHRyZXNldFF1ZXJ5OiB0cnVlXG5cdFx0fTtcblx0XHRjb25maWdzWydiYXNlLWZvcm0nXSA9IHtcblx0XHRcdGdldE5ldzogdHJ1ZSxcblx0XHRcdGdldEJ5SWQ6IHRydWUsXG5cdFx0XHRzYXZlOiB0cnVlLFxuXHRcdFx0dXBkYXRlOiB0cnVlLFxuXHRcdFx0c2F2ZUltYWdlOiB0cnVlLFxuXHRcdFx0ZGVsZXRlSW1hZ2U6IHRydWVcblx0XHR9O1xuXG5cdFx0Y29uZmlnc1snbWFueS10by1tYW55J10gPSB7XG5cdFx0XHRzZWFyY2g6IHRydWUsXG5cdFx0XHRzYXZlOiB0cnVlLFxuXHRcdFx0c2VhcmNoQXN5bmM6IHRydWUsXG5cdFx0XHRzYXZlQXN5bmM6IHRydWVcblx0XHR9XG5cblx0XHRjb25maWdzWydtYW55LXRvLW9uZSddPXtcblx0XHRcdHNhdmU6IHRydWUsXG5cdFx0XHRzZWFyY2hBc3luYzogdHJ1ZSxcblx0XHRcdHNhdmVBc3luYzogdHJ1ZVxuXHRcdH1cblxuXG5cdFx0bWV0aG9kcy5zZWFyY2hBc3luYyA9IGZ1bmN0aW9uKFNjb3BlLFNlcnZpY2UsSWQpe1xuXHRcdFx0U2NvcGVbSWQudG9Mb3dlckNhc2UoKSArICdBc3luY1NlYXJjaCddID0gZnVuY3Rpb24oZmllbGQsdmFsdWUpe1xuXHRcdFx0XHRyZXR1cm4gU2VydmljZS5nZXRTZWFyY2goZmllbGQsIHZhbHVlKVxuXHRcdFx0XHQudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhLmRhdGEudmFsdWVzO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9XG5cblxuXHRcdG1ldGhvZHMuc2F2ZUFzeW5jID0gZnVuY3Rpb24oU2NvcGUsU2VydmljZSxJZCl7XG5cdFx0XHRTY29wZVtJZC50b0xvd2VyQ2FzZSgpICsgJ0FzeW5jU2F2ZSddID0gZnVuY3Rpb24odmFsdWUscGFyYW0pe1xuXHRcdFx0XHR2YXIgb2JqID0ge307XG5cdFx0XHRcdG9ialtwYXJhbV0gPSB2YWx1ZTtcblx0XHRcdFx0cmV0dXJuIFNlcnZpY2UudXBkYXRlKG9iaik7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdG1ldGhvZHMuZ2V0ID0gZnVuY3Rpb24oU2NvcGUsU2VydmljZSxJZCl7XG5cdFx0XHRTY29wZVtJZF09IHt9O1xuXHRcdFx0U2NvcGUucGFnZSA9IDA7XG5cdFx0XHRTY29wZVtJZC50b0xvd2VyQ2FzZSgpICsgJ0dldCddPSBmdW5jdGlvbihwYWdlKSB7XG5cdFx0XHRcdFNjb3BlLiRicm9hZGNhc3QoJ2JlZm9yZUdldCcpO1xuXHRcdFx0XHRTZXJ2aWNlLmdldChwYWdlKVxuXHRcdFx0XHQudGhlbihmdW5jdGlvbiAodmFsdWVzKSB7XG5cdFx0XHRcdFx0U2NvcGVbSWRdLmNvbnRlbnQgPSB2YWx1ZXM7XG5cdFx0XHRcdFx0U2NvcGUuJGJyb2FkY2FzdCgnYWZ0ZXJHZXQnLHZhbHVlcyk7XG5cdFx0XHRcdH0pXG5cdFx0XHR9XG5cdFx0XHRTY29wZVtJZC50b0xvd2VyQ2FzZSgpICsgJ0dldCddKCk7XG5cdFx0fTtcblx0XHRtZXRob2RzLnJlc2V0QW5kR2V0ID0gZnVuY3Rpb24oU2NvcGUsU2VydmljZSxJZCl7XG5cdFx0XHRTY29wZVtJZC50b0xvd2VyQ2FzZSgpICsgJ1Jlc2V0QW5kR2V0J10gPSBmdW5jdGlvbigpe1xuXHRcdFx0XHRTY29wZS5wYWdlID0gMDtcblx0XHRcdFx0U2NvcGUuJGJyb2FkY2FzdCgnYmVmb3JlUmVzZXRBbmRHZXQnKTtcblx0XHRcdFx0U2VydmljZS5yZXNldEFuZEdldCgpXG5cdFx0XHRcdC50aGVuKGZ1bmN0aW9uKHZhbHVlcyl7XG5cdFx0XHRcdFx0U2NvcGVbSWRdLmNvbnRlbnQgPSB2YWx1ZXM7XG5cdFx0XHRcdFx0U2NvcGUuJGJyb2FkY2FzdCgnYWZ0ZXJSZXNldEFuZEdldCcsdmFsdWVzKTtcblx0XHRcdFx0fSlcblx0XHRcdH1cblx0XHR9O1xuXHRcdG1ldGhvZHMuZ2V0TmV3ID0gZnVuY3Rpb24oU2NvcGUsU2VydmljZSxJZCl7XG5cdFx0XHRTY29wZVtJZF0gPSBTY29wZVtJZF0gfHwge307XG5cdFx0XHRTY29wZVtJZC50b0xvd2VyQ2FzZSgpICsgJ0dldE5ldyddID0gZnVuY3Rpb24oKXtcblx0XHRcdFx0U2NvcGUuJGJyb2FkY2FzdCgnYmVmb3JlR2V0TmV3Jyk7XG5cdFx0XHRcdFNlcnZpY2UuZ2V0TmV3KClcblx0XHRcdFx0LnRoZW4oZnVuY3Rpb24odmFsdWVzKXtcblx0XHRcdFx0XHRTY29wZS4kYnJvYWRjYXN0KCdhZnRlckdldE5ldycsdmFsdWVzKTtcblx0XHRcdFx0XHRTY29wZVtJZF1bJ25ldycgKyBJZF0gPSB2YWx1ZXM7XG5cdFx0XHRcdH0pXG5cdFx0XHR9XG5cdFx0fTtcblx0XHRtZXRob2RzLmdldEJ5SWQgPSBmdW5jdGlvbihTY29wZSxTZXJ2aWNlLElkKXtcblx0XHRcdFNjb3BlW0lkLnRvTG93ZXJDYXNlKCkgKyAnR2V0QnlJZCddID0gZnVuY3Rpb24oaWQpe1xuXHRcdFx0XHRTY29wZS4kYnJvYWRjYXN0KCdiZWZvcmVHZXRCeUlkJyk7XG5cdFx0XHRcdFNlcnZpY2UuZ2V0QnlJZChpZClcblx0XHRcdFx0LnRoZW4oZnVuY3Rpb24odmFsdWVzKXtcblx0XHRcdFx0XHRTY29wZVtJZF1bJ2lkJyArIGlkXSA9IHZhbHVlcztcblx0XHRcdFx0XHRTY29wZS4kYnJvYWRjYXN0KCdhZnRlckdldEJ5SWQnLHZhbHVlcyk7XG5cdFx0XHRcdH0pXG5cdFx0XHR9XG5cdFx0fTtcblx0XHRtZXRob2RzLnNhdmUgPSBmdW5jdGlvbihTY29wZSxTZXJ2aWNlLElkKXtcblx0XHRcdFNjb3BlW0lkLnRvTG93ZXJDYXNlKCkgKyAnU2F2ZSddID0gZnVuY3Rpb24odmFsdWUscGFyYW0pe1xuXHRcdFx0XHRTY29wZS4kYnJvYWRjYXN0KCdiZWZvcmVTYXZlJyx2YWx1ZSk7XG5cdFx0XHRcdHZhciBvYmogPSB7fTtcblx0XHRcdFx0b2JqW3BhcmFtXSA9IHZhbHVlO1xuXHRcdFx0XHRTZXJ2aWNlLnVwZGF0ZShvYmopXG5cdFx0XHRcdC50aGVuKGZ1bmN0aW9uKHZhbHVlcyl7XG5cdFx0XHRcdFx0U2NvcGUuJGJyb2FkY2FzdCgnYWZ0ZXJTYXZlJyx2YWx1ZXMpO1xuXHRcdFx0XHR9KVxuXHRcdFx0fVxuXHRcdH07XG5cdFx0bWV0aG9kcy51cGRhdGUgPSBmdW5jdGlvbihTY29wZSxTZXJ2aWNlLElkKXtcblx0XHRcdFNjb3BlW0lkLnRvTG93ZXJDYXNlKCkrJ1VwZGF0ZSddID0gZnVuY3Rpb24odmFsdWUpe1xuXHRcdFx0XHRTY29wZS4kYnJvYWRjYXN0KCdiZWZvcmVVcGRhdGUnLHZhbHVlKTtcblx0XHRcdFx0U2VydmljZS51cGRhdGUodmFsdWUpXG5cdFx0XHRcdC50aGVuKGZ1bmN0aW9uKHZhbHVlcyl7XG5cdFx0XHRcdFx0U2NvcGUuJGJyb2FkY2FzdCgnYWZ0ZXJVcGRhdGUnLHZhbHVlcyk7XG5cdFx0XHRcdH0pXG5cdFx0XHR9XG5cdFx0fTtcblx0XHRtZXRob2RzLmRlbGV0ZSA9IGZ1bmN0aW9uKFNjb3BlLFNlcnZpY2UsSWQpe1xuXHRcdFx0U2NvcGVbSWQudG9Mb3dlckNhc2UoKSArICdEZWxldGUnXSA9IGZ1bmN0aW9uKHZhbHVlKXtcblx0XHRcdFx0U2NvcGUuJGJyb2FkY2FzdCgnYmVmb3JlRGVsZXRlJyk7XG5cdFx0XHRcdFNlcnZpY2UuZGVsZXRlQ29sbGVjdGlvbih2YWx1ZSlcblx0XHRcdFx0LnRoZW4oZnVuY3Rpb24odmFsdWVzKXtcblx0XHRcdFx0XHRTY29wZS4kYnJvYWRjYXN0KCdhZnRlckRlbGV0ZScsdmFsdWVzKTtcblx0XHRcdFx0XHRTY29wZVtJZC50b0xvd2VyQ2FzZSgpICsgJ0dldCddKCk7XG5cdFx0XHRcdH0pXG5cdFx0XHR9XG5cdFx0fTtcblx0XHRtZXRob2RzLnNvcnQgPSBmdW5jdGlvbihTY29wZSxTZXJ2aWNlLElkKXtcblx0XHRcdFNjb3BlW0lkLnRvTG93ZXJDYXNlKCkrJ1NvcnQnXSA9IGZ1bmN0aW9uKGZpZWxkLHdheSl7XG5cdFx0XHRcdFNjb3BlLiRicm9hZGNhc3QoJ2JlZm9yZVNvcnQnKTtcblx0XHRcdFx0U2VydmljZS5zb3J0KGZpZWxkLHdheSlcblx0XHRcdFx0LnRoZW4oZnVuY3Rpb24odmFsdWVzKXtcblx0XHRcdFx0XHRTY29wZVtJZF0uY29udGVudCA9IHZhbHVlcztcblx0XHRcdFx0XHRTY29wZS4kYnJvYWRjYXN0KCdhZnRlclNvcnQnLHZhbHVlcyk7XG5cdFx0XHRcdH0pXG5cdFx0XHR9XG5cdFx0fTtcblx0XHRtZXRob2RzLnNhdmVJbWFnZSA9IGZ1bmN0aW9uKFNjb3BlLFNlcnZpY2UsSWQpe1xuXHRcdFx0U2NvcGVbSWQudG9Mb3dlckNhc2UoKSArICdTYXZlSW1hZ2UnXSA9IGZ1bmN0aW9uKGF0dHJpYnV0ZSxtb2RlbCl7XG5cdFx0XHRcdFNjb3BlLiRicm9hZGNhc3QoJ2JlZm9yZVNhdmVJbWFnZScpO1xuXHRcdFx0XHRyZXR1cm4gU2VydmljZS5zYXZlSW1hZ2UoYXR0cmlidXRlLG1vZGVsKTtcblx0XHRcdH1cblx0XHR9O1xuXHRcdG1ldGhvZHMuZGVsZXRlSW1hZ2UgPSBmdW5jdGlvbihTY29wZSxTZXJ2aWNlLElkKXtcblx0XHRcdFNjb3BlW0lkLnRvTG93ZXJDYXNlKCkgKyAnRGVsZXRlSW1hZ2UnXSA9IGZ1bmN0aW9uKGF0dHJpYnV0ZSxtb2RlbCl7XG5cdFx0XHRcdFNjb3BlLiRicm9hZGNhc3QoJ2JlZm9yZURlbGV0ZUltYWdlJyk7XG5cdFx0XHRcdFNlcnZpY2UuZGVsZXRlSW1hZ2UoYXR0cmlidXRlLG1vZGVsKVxuXHRcdFx0XHQudGhlbihmdW5jdGlvbih2YWx1ZXMpe1xuXHRcdFx0XHRcdFNjb3BlLiRicm9hZGNhc3QoJ2FmdGVyRGVsZXRlSW1hZ2UnLHZhbHVlcyk7XG5cdFx0XHRcdH0pXG5cdFx0XHR9XG5cdFx0fTtcblx0XHRtZXRob2RzLnNlYXJjaCA9IGZ1bmN0aW9uKFNjb3BlLFNlcnZpY2UsSWQpe1xuXHRcdFx0U2NvcGVbSWQudG9Mb3dlckNhc2UoKSArICdTZWFyY2gnXSA9IGZ1bmN0aW9uKGZpZWxkLHBhcmFtKXtcblx0XHRcdFx0U2NvcGUuJGJyb2FkY2FzdCgnYmVmb3JlU2VhcmNoJyk7XG5cdFx0XHRcdFNlcnZpY2UuZ2V0U2VhcmNoKGZpZWxkLHBhcmFtKVxuXHRcdFx0XHQudGhlbihmdW5jdGlvbih2YWx1ZXMpe1xuXHRcdFx0XHRcdFNjb3BlW0lkXS5jb250ZW50ID0gdmFsdWVzO1xuXHRcdFx0XHRcdFNjb3BlLiRicm9hZGNhc3QoJ2FmdGVyU2VhcmNoJyx2YWx1ZXMpO1xuXHRcdFx0XHR9KVxuXHRcdFx0fVxuXHRcdH1cblx0XHRtZXRob2RzLmFkdmFuY2VkU2VhcmNoID0gZnVuY3Rpb24oU2NvcGUsU2VydmljZSxJZCl7XG5cdFx0XHRTY29wZVtJZC50b0xvd2VyQ2FzZSgpICsgJ0FkdmFuY2VkU2VhcmNoJ10gPSBmdW5jdGlvbihwYXJhbSl7XG5cdFx0XHRcdFNjb3BlLiRicm9hZGNhc3QoJ2JlZm9yZUFkdmFuY2VkU2VhcmNoJyxwYXJhbSlcblx0XHRcdFx0U2VydmljZS5nZXRBZHZhbmNlZFNlYXJjaChwYXJhbSlcblx0XHRcdFx0LnRoZW4oZnVuY3Rpb24odmFsdWVzKXtcblx0XHRcdFx0XHRTY29wZVtJZF0uY29udGVudCA9IHZhbHVlcztcblx0XHRcdFx0XHRTY29wZS4kYnJvYWRjYXN0KCdhZnRlckFkdmFuY2VkU2VhcmNoJyx2YWx1ZXMpXG5cdFx0XHRcdH0pXG5cdFx0XHR9XG5cdFx0fVxuXHRcdG1ldGhvZHMucmVzZXRRdWVyeSA9IGZ1bmN0aW9uKFNjb3BlLFNlcnZpY2UsaWQpe1xuXHRcdFx0U2NvcGVbaWQudG9Mb3dlckNhc2UoKSArICdSZXNldFF1ZXJ5J10gPSBmdW5jdGlvbigpe1xuXHRcdFx0XHRTY29wZS5wYWdlID0gMDtcblx0XHRcdFx0U2VydmljZS5yZXNldFF1ZXJ5KCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiB7XG5cdFx0XHRzZXRDb25maWc6IGZ1bmN0aW9uKG4sdil7XG5cdFx0XHRcdGhlbHBlcnMuZ3VhcmFudGVlU3RyaW5nKG4pICYmIGhlbHBlcnMuZ3VhcmFudGVlSXNEZWZpbmVkKHYpID8gKGNvbmZpZ3Nbbl0gPSB2KSA6IGFuZ3VsYXIubm9vcDtcblx0XHRcdH0sXG5cdFx0XHRnZXRDb25maWc6IGZ1bmN0aW9uKHN0cmluZyl7XG5cdFx0XHRcdHJldHVybiBjb25maWdzW3N0cmluZ107XG5cdFx0XHR9LFxuXHRcdFx0c2V0TWV0aG9kOiBmdW5jdGlvbihuYW1lLGNvbmZpZyxmbil7XG5cdFx0XHRcdGlmKCEoaGVscGVycy5ndWFyYW50ZWVTdHJpbmcobmFtZSkgJiYgaGVscGVycy5ndWFyYW50ZWVTdHJpbmcoY29uZmlnKSkpXG5cdFx0XHRcdFx0dGhyb3cgJ09uZSBvZiAkcG9wdWxhdGVQcm92aWRlci5zZXRNZXRob2QgYXJndW1lbnRzIGlzIHdyb25nLic7XG5cdFx0XHRcdGNvbmZpZ3NbY29uZmlnXVtuYW1lXSA9IHRydWU7XG5cdFx0XHRcdG1ldGhvZHNbbmFtZV0gPSBmbjtcblx0XHRcdH0sXG5cdFx0XHRwb3B1bGF0ZVNjb3BlOiBmdW5jdGlvbihzY3Asc3ZjLGlkLGNvbmZpZyl7XG5cdFx0XHRcdGlmKCFoZWxwZXJzLmd1YXJhbnRlZUlzRGVmaW5lZChzY3ApKSB0aHJvdyAnVGhlICRzY29wZSBwYXNzZWQgZm9yIHBvcHVsYXRlU2NvcGUgd2FzblxcJ3QgZGVmaW5lZCc7XG5cdFx0XHRcdGlmKCFoZWxwZXJzLmd1YXJhbnRlZUlzRGVmaW5lZChpZCkpIHRocm93ICdUaGUgaWRlbnRpZmllciBmb3IgcG9wdWxhdGVTY29wZSBtdXN0IGJlIHBhc3NlZCc7XG5cdFx0XHRcdGlmKCFoZWxwZXJzLmd1YXJhbnRlZUlzRGVmaW5lZChjb25maWcpKSB0aHJvdyAnVGhlIGNvbmZpZ3VyYXRpb24gZm9yIHBvcHVsYXRlU2NvcGUgbXVzdCBiZSBwYXNzZWQnO1xuXHRcdFx0XHRpZighaGVscGVycy5ndWFyYW50ZWVJc0RlZmluZWQoc3ZjKSkgdGhyb3cgJ1RoZSBzZXJ2aWNlIGZvciBwb3B1bGF0ZVNjb3BlIG11c3QgYmUgcGFzc2VkJztcblx0XHRcdFx0aWYoY29uZmlnc1tjb25maWddKXtcblx0XHRcdFx0XHRzY3BbaWRdID0ge307XG5cdFx0XHRcdFx0c2NwW2lkXS5jb250ZW50ID0ge307XG5cdFx0XHRcdFx0dmFyIGNvbmZpZ3VyYXRpb24gPSBjb25maWdzW2NvbmZpZ107XG5cdFx0XHRcdFx0Zm9yICh2YXIga2V5IGluIGNvbmZpZ3VyYXRpb24pIGlmKGNvbmZpZ3VyYXRpb24uaGFzT3duUHJvcGVydHkoa2V5KSl7XG5cdFx0XHRcdFx0XHRtZXRob2RzW2tleV0oc2NwLHN2YyxpZCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0JGdldDogZnVuY3Rpb24oKXtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdGFuZ3VsYXIubW9kdWxlKCdndW1nYS5zZXJ2aWNlcy5wb3B1bGF0ZScsW10pXG5cdC5wcm92aWRlcignJHBvcHVsYXRlJyxQb3B1bGF0ZSlcbn0pKCk7IiwiKGZ1bmN0aW9uKCl7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHRCYXNlLiRpbmplY3QgPSBbXCIkaHR0cFwiLCBcIiRxXCJdO1xuXHQvKipcblx0ICogQG5nZG9jIHNlcnZpY2Vcblx0ICogQG5hbWUgZ3VtZ2EuY29yZTpHdW1nYVJlc3Rcblx0ICogQGRlc2NyaXB0aW9uXG5cdCAqIFx0TyBzZXJ2aWNlIEd1bWdhUmVzdCDDqSB1bWEgZXZvbHXDp8OjbyBkbyBzZXJ2aWNlIHtAbGluayBndW1nYS5jb3JlOkd1bWdhQmFzZX0sIHBvaXMgc3VhIGNvbmZpZ3VyYcOnw6NvIG7Do28gbmVjZXNzaXRhXG5cdCAqIFx0ZGUgbmVuaHVtYSBvdXRyYSBjb25maWd1cmHDp8OjbyBhZGljaW9uYWwgbm8gc2VydmljZSBxdWUgaXLDoSBjaGFtw6EtbG8uXG5cdCAqXG5cdCAqICMjIEV4ZW1wbG9cblx0ICogPHByZT5cblx0ICogYW5ndWxhci5tb2R1bGUoJ3NhbXBsZScsWydndW1nYS5jb3JlJ10pXG5cdCAqIC5zZXJ2aWNlKCdHdW1nYVJlc3QnLGZ1bmN0aW9uKEd1bWdhUmVzdCl7XG5cdCAqIFx0ICAgLy9FeGVtcGxvIGRlIHV0aWxpemHDp8Ojby5cblx0ICogXHQgICB2YXIgc2VydmljZSA9IG5ldyBHdW1nYVJlc3QoJ2h0dHA6Ly93d3cuZ3VtZ2EuY29tLmJyL2FwaScpO1xuXHQgKiAgICAgLy8gT3UsIGNhc28gbsOjbyBxdWVpcmEgYWRpY2lvbmFyIG5lbmh1bSBtw6l0b2RvLCB1dGlsaXphcjpcblx0ICogICAgIC8vIHJldHVybiBuZXcgR3VtZ2FSZXN0KCdodHRwOi8vd3d3Lmd1bWdhLmNvbS5ici9hcGknKTtcblx0ICpcblx0ICpcdCAgIHNlcnZpY2UuZ2V0ID0gZnVuY3Rpb24ocGFnZSl7XG5cdCAqXHQgICAgICAgYWxlcnQoJ01vZGlmaXF1ZWkgdW0gbcOpdG9kbyBkYSBzZXJ2aWNlIGUgY2hhbWVpIG8gcGFkcsOjbyEnKTtcblx0ICpcdFx0ICAgICByZXR1cm4gR3VtZ2FSZXN0LnByb3RvdHlwZS5nZXQuY2FsbCh0aGlzLHBhZ2UpO1xuXHQgKlx0ICAgfVxuXHQgKiBcdCAgIHJldHVybiBzZXJ2aWNlO1xuXHQgKiB9KVxuXHQgKiA8L3ByZT5cblx0ICpcblx0ICogIyBNw6l0b2Rvc1xuXHQgKlxuXHQgKiAgYEd1bWdhUmVzdC5nZXQocGFyYW1zKWBcblx0ICogIFxuXHQgKiAgTyBtw6l0b2RvIGdldCBhY2VpdGEgdW0gcGFyw6JtZXRybyBgdXJsYCBlIHJldG9ybmEgdW1hIHByb21pc2UgZGUgdW1hIGNoYW1hZGEgSFRUUCBkbyB0aXBvIEdFVC5cblx0ICogIFxuXHQgKiAgIyMjIFBhcsOibWV0cm9zXG5cdCAqICAtIDxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLXdhcm5pbmdcIiBzdHlsZT1cIm1hcmdpbi1yaWdodDogMSVcIj5PYmplY3Q8L2xhYmVsPiA8bGFiZWwgY2xhc3M9XCJsYWJlbCBsYWJlbC1pbmZvXCI+cGFyYW1zPC9sYWJlbD4gUGFyw6JtZXRyb3MgZGEgcXVlcnkgcXVlIHNlcsOhIGZlaXRhLlxuXHQgKiAgIyMjIFJldG9ybm9cblx0ICogIC0gPGxhYmVsIGNsYXNzPVwibGFiZWwgbGFiZWwtaW5mb1wiPkh0dHBQcm9taXNlPC9sYWJlbD4gUmV0b25hIHVtYSBwcm9taXNlIGRhIGNoYW1hZGEgSFRUUCBHRVQuXG5cdCAqICAtLS1cblx0ICogIGBHdW1nYVJlc3QucmVzZXRBbmRHZXQoKWBcblx0ICogIFxuXHQgKiAgTyBtw6l0b2RvIHJlc2V0QW5kR2V0IHJlc2V0YSBhIHF1ZXJ5IGF0dWFsIGUgcGVyZm9ybWEgdW1hIGNoYW1hZGEgSFRUUCBkbyB0aXBvIEdFVC5cblx0ICogIFxuXHQgKiAgIyMjIFJldG9ybm9cblx0ICogIFxuXHQgKiAgLSA8bGFiZWwgY2xhc3M9XCJsYWJlbCBsYWJlbC1pbmZvXCI+SHR0cFByb21pc2U8L2xhYmVsPiBSZXRvcm5hIHVtYSBwcm9taXNlIGRhIGNoYW1hZGEgSFRUUCBHRVQuXG5cdCAqXG5cdCAqIFx0LS0tXG5cdCAqXG4gXHQgKiAgYEd1bWdhUmVzdC5nZXRCeUlkKGlkKWBcblx0ICogIFxuXHQgKiAgTyBtw6l0b2RvIGdldEJ5SWQgYWNlaXRhIHVtIHBhcsOibWV0cm8gYGlkYCBlIHJldG9ybmEgdW1hIHByb21pc2UgZGUgdW1hIGNoYW1hZGEgSFRUUCBkbyB0aXBvIEdFVC5cblx0ICogICMjIyBQYXLDom1ldHJvc1xuXHQgKiAgLSA8bGFiZWwgY2xhc3M9XCJsYWJlbCBsYWJlbC13YXJuaW5nXCIgc3R5bGU9XCJtYXJnaW4tcmlnaHQ6IDElXCI+W1N0cmluZ3xOdW1iZXJdPC9sYWJlbD4gPGxhYmVsIGNsYXNzPVwibGFiZWwgbGFiZWwtaW5mb1wiPmlkPC9sYWJlbD4gSWRlbnRpZmljYWRvciBkbyByZWdpc3RybyBxdWUgc2Vyw6EgYnVzY2Fkby5cblx0ICogICMjIyBSZXRvcm5vXG5cdCAqICAtIDxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLWluZm9cIj5IdHRwUHJvbWlzZTwvbGFiZWw+IFJldG9uYSB1bWEgcHJvbWlzZSBkYSBjaGFtYWRhIEhUVFAgR0VULlxuXHQgKiAgLS0tXG5cdCAqICBgR3VtZ2FSZXN0LmdldE5ldygpYFxuXHQgKiAgXG5cdCAqICBPIG3DqXRvZG8gZ2V0QnlJZCAgcmV0b3JuYSB1bWEgcHJvbWlzZSBkZSB1bWEgY2hhbWFkYSBIVFRQIGRvIHRpcG8gR0VULlxuXHQgKiAgIyMjIFJldG9ybm9cblx0ICogIFxuXHQgKiAgLSA8bGFiZWwgY2xhc3M9XCJsYWJlbCBsYWJlbC1pbmZvXCI+SHR0cFByb21pc2U8L2xhYmVsPiBSZXRvcm5hIHVtYSBwcm9taXNlIGRhIGNoYW1hZGEgSFRUUCBHRVQuXG5cdCAqICBcblx0ICogIC0tLSBcbiBcdCAqICBgR3VtZ2FSZXN0LmRlbGV0ZShkYXRhKWBcblx0ICogIFxuXHQgKiAgTyBtw6l0b2RvIGRlbGV0ZSByZWNlYmUgY29tbyBwYXLDom1ldHJvIHVtIG9iamV0byBxdWUgc2Vyw6EgZGVsZXRhZG8uIE8gb2JqZXRvIGRldmUgdGVyIHVtIHBhcsOibWV0cm8gSUQsIFxuXHQgKiAgcXVlIHNlcsOhIHBhc3NhZG8gcGFyYSBhIHVybCBkYSBjaGFtYWRhLlxuXHQgKlxuIFx0ICogICMjIyBQYXLDom1ldHJvc1xuXHQgKiAgLSA8bGFiZWwgY2xhc3M9XCJsYWJlbCBsYWJlbC13YXJuaW5nXCIgc3R5bGU9XCJtYXJnaW4tcmlnaHQ6IDElXCI+T2JqZWN0PC9sYWJlbD4gPGxhYmVsIGNsYXNzPVwibGFiZWwgbGFiZWwtaW5mb1wiPmRhdGE8L2xhYmVsPiBSZWdpc3RybyBxdWUgc2Vyw6EgZGVsZXRhZG8uXG5cdCAqIFxuXHQgKiAgIyMjIFJldG9ybm9cblx0ICogIFxuXHQgKiAgLSA8bGFiZWwgY2xhc3M9XCJsYWJlbCBsYWJlbC1pbmZvXCI+SHR0cFByb21pc2U8L2xhYmVsPiBSZXRvcm5hIHVtYSBwcm9taXNlIGRhIGNoYW1hZGEgSFRUUCBERUxFVEUuXG5cdCAqICBcblx0ICogIC0tLSBcblx0ICogIFxuIFx0ICogIGBHdW1nYVJlc3Quc29ydChmaWVsZCx3YXkpYFxuXHQgKiAgXG5cdCAqIE8gbcOpdG9kbyBzb3J0IHJlY2ViZSBkb2lzIHBhcsOibWV0cm9zIHBhcmEgZmF6ZXIgYSBvcmRlbmHDp8OjbzogYGZpZWxkYCBlIGB3YXlgLCBxdWUgZGV0ZXJtaW5hcsOjbyBxdWFsIGNhbXBvIHNlcsOhIG9yZGVuYWRvXG5cdCAqIGUgc2Ugc2Vyw6EgJ2FzYycgb3UgJ2Rlc2MnLiBcblx0ICpcbiBcdCAqICAjIyMgUGFyw6JtZXRyb3Ncblx0ICogIC0gPGxhYmVsIGNsYXNzPVwibGFiZWwgbGFiZWwtd2FybmluZ1wiIHN0eWxlPVwibWFyZ2luLXJpZ2h0OiAxJVwiPlN0cmluZzwvbGFiZWw+IDxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLWluZm9cIj5maWVsZDwvbGFiZWw+IFF1YWwgY2FtcG8gc2Vyw6EgZmVpdGEgYSBvcmRlbmHDp8Ojb1xuXHQgKiAgLSA8bGFiZWwgY2xhc3M9XCJsYWJlbCBsYWJlbC13YXJuaW5nXCIgc3R5bGU9XCJtYXJnaW4tcmlnaHQ6IDElXCI+U3RyaW5nPC9sYWJlbD4gPGxhYmVsIGNsYXNzPVwibGFiZWwgbGFiZWwtaW5mb1wiPndheTwvbGFiZWw+IEVtIHF1ZSBzZW50aWRvIGEgb3JkZW5hw6fDo28gc2Vyw6EgZmVpdGEsIHNlIHNlcsOhIGFzY2VuZGVudGUgYGFzY2Agb3UgZGVzY2VuZGVudGUgYGRlc2NgLlxuXHQgKiAgIyMjIFJldG9ybm9cblx0ICogIFxuXHQgKiAgLSA8bGFiZWwgY2xhc3M9XCJsYWJlbCBsYWJlbC1pbmZvXCI+SHR0cFByb21pc2U8L2xhYmVsPiBSZXRvcm5hIHVtYSBwcm9taXNlIGRhIGNoYW1hZGEgSFRUUCBHRVQuXG5cdCAqICBcblx0ICogIC0tLSBcblx0ICpcblx0ICogIGBHdW1nYVJlc3QuZGVsZXRlQ29sbGVjdGlvbihhcnJheSlgXG5cdCAqICBcblx0ICogIE8gbcOpdG9kbyBkZWxldGVBbGwgYWNlaXRhIHVtIHBhcsOibWV0cm8gYHVybGAgIGUgcmV0b3JuYSB1bWEgcHJvbWlzZSBkZSB1bWEgc8OpcmllIGRlIGNoYW1hZGFzIGh0dHAgZG8gdGlwbyBERUxFVEUgcXVlIHNlcsOjbyByZXNvbHZpZGFzIGFvIG1lc21vIHRlbXBvLlxuXHQgKiAgIyMjIFBhcsOibWV0cm9zXG5cdCAqICAtIDxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLXdhcm5pbmdcIiBzdHlsZT1cIm1hcmdpbi1yaWdodDogMSVcIj5BcnJheTwvbGFiZWw+PGxhYmVsIGNsYXNzPVwibGFiZWwgbGFiZWwtaW5mb1wiPmFycmF5PC9sYWJlbD4gQXJyYXkgY29tIHRvZGFzIG9zIHJlZ2lzdHJvcyBxdWUgc2Vyw6NvIGRlbGV0YWRvcyBcblx0ICogICMjIyBSZXRvcm5vXG5cdCAqICAtIDxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLWluZm9cIj5IdHRwUHJvbWlzZTwvbGFiZWw+IFJldG9ybmEgdW1hIHByb21pc2UgYXDDs3MgdG9kYXMgYXMgY2hhbWFkYXMgdGVyZW0gc2lkbyByZXNvbHZpZGFzLlxuXHQgKiAgLS0tXG5cdCAqXG4gXHQgKiAgYEd1bWdhUmVzdC5zYXZlSW1hZ2UoYXR0cmlidXRlLGRhdGEpYFxuXHQgKiAgXG5cdCAqICBPIG3DqXRvZG8gc2F2ZUltYWdlIGFjZWl0YSBkb2lzIHBhcsOibWV0cm9zIGBhdHRyaWJ1dGVgIGUgYGRhdGFgIGUgcmV0b3JuYSB1bWEgcHJvbWlzZSBkZSBkZSB1bWEgY2hhbWFkYSBIVFRQIFBPU1QgRk9STS1EQVRBLlxuXHQgKiAgIyMjIFBhcsOibWV0cm9zXG5cdCAqICAtIDxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLXdhcm5pbmdcIiBzdHlsZT1cIm1hcmdpbi1yaWdodDogMSVcIj5TdHJpbmc8L2xhYmVsPjxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLWluZm9cIj5hdHRyaWJ1dGU8L2xhYmVsPiBBdHJpYnV0byBubyBxdWFsIGEgaW1hZ2VtIHNlcsOhIGZlaXRvIG9cblx0ICogIGJpbmQgYXDDs3MgbyBmb3JtIHRlciBzaWRvIGVudmlhZG8gY29tcGxldG8uXG5cdCAqICAtIDxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLXdhcm5pbmdcIiBzdHlsZT1cIm1hcmdpbi1yaWdodDogMSVcIj5PYmplY3Q8L2xhYmVsPjxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLWluZm9cIj5kYXRhPC9sYWJlbD4gRGFkb3MgZGEgaW1hZ2VtIHF1ZSBmb2kgc2VsZWNpb25hZGEuLlxuXHQgKiAgIyMjIFJldG9ybm9cblx0ICogIC0gPGxhYmVsIGNsYXNzPVwibGFiZWwgbGFiZWwtaW5mb1wiPkh0dHBQcm9taXNlPC9sYWJlbD4gUmV0b3JuYSB1bWEgcHJvbWlzZSBkYSBjaGFtYWRhIEhUVFAgUE9TVC4gTmVzdGEgcHJvbWlzZSwgc2Vyw6EgcmV0b3JuYWRvIG8gdmFsb3IgZGUgdW1hIFN0cmluZyBxdWUgZGV2ZXLDoSBzZXIgYXRyaWJ1w61kYSBhbyBhdHJpYnV0b1xuXHQgKiAgb25kZSBlc3RhdmEgYSBpbWFnZW0uIEVzdGEgc3RyaW5nIMOpIHVtIGlkZW50aWZpY2Fkb3IgcGFyYSBxdWFuZG8gbyByZWdpc3RybyBmb3IgZW52aWFkbyBhdHJhdsOpcyBkZSB1bSBwb3N0LlxuXHQgKiAgLS0tXG4gXHQgKiAgYEd1bWdhUmVzdC5kZWxldGVJbWFnZShhdHRyaWJ1dGUsZGF0YSlgXG5cdCAqICBcblx0ICogIE8gbcOpdG9kbyBkZWxldGVJbWFnZSBhY2VpdGEgZG9pcyBwYXLDom1ldHJvcyBgdXJsYCBlIGBkYXRhYCBlIHJldG9ybmEgdW1hIHByb21pc2UgZGUgZGUgdW1hIGNoYW1hZGEgSFRUUCBERUxFVEUgRk9STS1EQVRBLlxuXHQgKiAgIyMjIFBhcsOibWV0cm9zXG5cdCAqICAtIDxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLXdhcm5pbmdcIiBzdHlsZT1cIm1hcmdpbi1yaWdodDogMSVcIj5TdHJpbmc8L2xhYmVsPjxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLWluZm9cIj5hdHRyaWJ1dGU8L2xhYmVsPiBBdHJpYnV0byBubyBxdWFsIGEgaW1hZ2VtIHNlcsOhIGZlaXRvIG9cblx0ICogIGJpbmQgYXDDs3MgbyBmb3JtIHRlciBzaWRvIGVudmlhZG8gY29tcGxldG8uXG5cdCAqICAtIDxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLXdhcm5pbmdcIiBzdHlsZT1cIm1hcmdpbi1yaWdodDogMSVcIj5PYmplY3Q8L2xhYmVsPjxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLWluZm9cIj5kYXRhPC9sYWJlbD4gRGFkb3MgZGEgaW1hZ2VtIHF1ZSBmb2kgc2VsZWNpb25hZGEuXG5cdCAqICAjIyMgUmV0b3Jub1xuXHQgKiAgLSA8bGFiZWwgY2xhc3M9XCJsYWJlbCBsYWJlbC1pbmZvXCI+SHR0cFByb21pc2U8L2xhYmVsPiBSZXRvcm5hIHVtYSBwcm9taXNlIGRhIGNoYW1hZGEgSFRUUCBERUxFVEUuXG5cdCAqICAtLS1cbiBcdCAqXG4gXHQgKiAgYEd1bWdhUmVzdC5nZXRTZWFyY2goZmllbGQscGFyYW0pYFxuXHQgKiAgXG5cdCAqICBPIG3DqXRvZG8gZ2V0U2VhcmNoIGFjZWl0YSBkb2lzIHBhcsOibWV0cm9zIGBmaWVsZGAgZSBgcGFyYW1gIGUgcmV0b3JuYSB1bWEgcHJvbWlzZSBkZSB1bWEgY2hhbWFkYSBIVFRQIGRvIHRpcG8gR0VULlxuXHQgKiAgIyMjIFBhcsOibWV0cm9zXG5cdCAqICAtIDxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLXdhcm5pbmdcIiBzdHlsZT1cIm1hcmdpbi1yaWdodDogMSVcIj5bU3RyaW5nXTwvbGFiZWw+IDxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLWluZm9cIj5maWVsZDwvbGFiZWw+IFF1YWwgY2FtcG8gYSBidXNjYSBzZXLDoSBmZWl0YS4gQ2FzbyBcblx0ICogIHF1ZWlyYSBmYXplciBhIGJ1c2NhIGVtIG1haXMgZGUgdW0gY2FtcG8sIHBhc3NhciB1bWEgc3RyaW5nIGNvbSBvcyBub21lcyBzZXBhcmFkb3MgcG9yIHbDrXJndWxhLlxuIFx0ICogIC0gPGxhYmVsIGNsYXNzPVwibGFiZWwgbGFiZWwtd2FybmluZ1wiIHN0eWxlPVwibWFyZ2luLXJpZ2h0OiAxJVwiPltPYmplY3RdPC9sYWJlbD4gPGxhYmVsIGNsYXNzPVwibGFiZWwgbGFiZWwtaW5mb1wiPnBhcmFtPC9sYWJlbD4gT2JqZXRvIHF1ZSBpcsOhIGNvbnRlciBvcyBwYXLDom1ldHJvcyBcbiBcdCAqICBkYSBidXNjYS5cblx0ICogICMjIyBSZXRvcm5vXG5cdCAqICAtIDxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLWluZm9cIj5IdHRwUHJvbWlzZTwvbGFiZWw+IFJldG9uYSB1bWEgcHJvbWlzZSBkYSBjaGFtYWRhIEhUVFAgR0VULlxuXHQgKiAgLS0tIFxuXHQgKlxuIFx0ICogIGBHdW1nYVJlc3QuZ2V0QWR2YW5jZWRTZWFyY2gocGFyYW0pYFxuXHQgKiAgXG5cdCAqICBPIG3DqXRvZG8gZ2V0QWR2YW5jZWRTZWFyY2ggYWNlaXRhIHVtIHBhcsOibWV0cm8gYHBhcmFtYCBlIHJldG9ybmEgdW1hIHByb21pc2UgZGUgdW1hIGNoYW1hZGEgSFRUUCBkbyB0aXBvIEdFVC5cblx0ICogICMjIyBQYXLDom1ldHJvc1xuIFx0ICogIC0gPGxhYmVsIGNsYXNzPVwibGFiZWwgbGFiZWwtd2FybmluZ1wiIHN0eWxlPVwibWFyZ2luLXJpZ2h0OiAxJVwiPltPYmplY3RdPC9sYWJlbD4gPGxhYmVsIGNsYXNzPVwibGFiZWwgbGFiZWwtaW5mb1wiPnBhcmFtPC9sYWJlbD4gT2JqZXRvIHF1ZSBpcsOhIGNvbnRlciBvcyBwYXLDom1ldHJvcyBcbiBcdCAqICBkYSBidXNjYS5cblx0ICogICMjIyBSZXRvcm5vXG5cdCAqICAtIDxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLWluZm9cIj5IdHRwUHJvbWlzZTwvbGFiZWw+IFJldG9uYSB1bWEgcHJvbWlzZSBkYSBjaGFtYWRhIEhUVFAgR0VULlxuXHQgKiAgLS0tICAgXG4gICAqXG4gXHQgKiAgYEd1bWdhUmVzdC5yZXNldERlZmF1bHRTdGF0ZSgpYFxuXHQgKiAgXG5cdCAqICBPIG3DqXRvZG8gcmVzZXREZWZhdWx0U3RhdGUgcmV0b3JuYSBvIG9iamV0byBkZSBxdWVyeSBhbyBzZXUgZXN0YWRvIHBhZHLDo28uXG5cdCAqICBcblx0ICogIC0tLVxuXHQgKi9cblx0ZnVuY3Rpb24gQmFzZSgkaHR0cCwkcSl7XG5cdFx0ZnVuY3Rpb24gUmVzdFByb3RvdHlwZSh1cmwpe1xuXHRcdFx0dGhpcy5fdXJsID0gdXJsO1xuXHRcdFx0dGhpcy5fcXVlcnkgPSB7cGFyYW1zOiB7c3RhcnQ6IDAscGFnZVNpemU6IDEwfX07XG5cdFx0fVxuXHRcdFJlc3RQcm90b3R5cGUucHJvdG90eXBlLmdldCA9IF9nZXQ7XG5cdFx0UmVzdFByb3RvdHlwZS5wcm90b3R5cGUucmVzZXRBbmRHZXQgPSBfcmVzZXRBbmRHZXQ7XG5cdFx0UmVzdFByb3RvdHlwZS5wcm90b3R5cGUuZ2V0TmV3ID0gX2dldE5ldztcblx0XHRSZXN0UHJvdG90eXBlLnByb3RvdHlwZS5nZXRCeUlkID0gX2dldEJ5SWQ7XG5cdFx0UmVzdFByb3RvdHlwZS5wcm90b3R5cGUuc2F2ZSA9IF9zYXZlO1xuXHRcdFJlc3RQcm90b3R5cGUucHJvdG90eXBlLnVwZGF0ZT0gX3VwZGF0ZTtcblx0XHRSZXN0UHJvdG90eXBlLnByb3RvdHlwZS5kZWxldGUgPSBfZGVsZXRlO1xuXHRcdFJlc3RQcm90b3R5cGUucHJvdG90eXBlLnNvcnQgPSBfc29ydDtcblx0XHRSZXN0UHJvdG90eXBlLnByb3RvdHlwZS5kZWxldGVDb2xsZWN0aW9uID0gX2RlbGV0ZUNvbGxlY3Rpb247XG5cdFx0UmVzdFByb3RvdHlwZS5wcm90b3R5cGUuc2F2ZUltYWdlID0gX3NhdmVJbWFnZTtcblx0XHRSZXN0UHJvdG90eXBlLnByb3RvdHlwZS5kZWxldGVJbWFnZSA9IF9kZWxldGVJbWFnZTtcblx0XHRSZXN0UHJvdG90eXBlLnByb3RvdHlwZS5nZXRTZWFyY2ggPSBfZ2V0U2VhcmNoO1xuXHRcdFJlc3RQcm90b3R5cGUucHJvdG90eXBlLmdldEFkdmFuY2VkU2VhcmNoID0gX2dldEFkdmFuY2VkU2VhcmNoO1xuXHRcdFJlc3RQcm90b3R5cGUucHJvdG90eXBlLnJlc2V0RGVmYXVsdFN0YXRlID0gX3Jlc2V0UXVlcnk7XG5cdFx0ZnVuY3Rpb24gX2dldChwYWdlKXtcblx0XHRcdGlmIChwYWdlKSB7XG5cdFx0XHRcdHRoaXMuX3F1ZXJ5LnBhcmFtcy5zdGFydCA9IChwYWdlIC0gMSkgKiB0aGlzLl9xdWVyeS5wYXJhbXMucGFnZVNpemU7XG5cdFx0XHRcdGlmIChwYWdlIDwgMSkgdGhyb3cgJ0ludmFsaWQgcGFnZSc7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gJGh0dHAuZ2V0KHRoaXMuX3VybCx0aGlzLl9xdWVyeSk7XG5cdFx0fVxuXHRcdGZ1bmN0aW9uIF9nZXROZXcgKCkge3JldHVybiAkaHR0cC5nZXQodGhpcy5fdXJsICsgJy9uZXcnKX1cblx0XHRmdW5jdGlvbiBfZ2V0QnlJZChpZCl7cmV0dXJuICRodHRwLmdldCh0aGlzLl91cmwgKyAnLycgKyBpZCk7fVxuXHRcdGZ1bmN0aW9uIF9zYXZlICh2KXtyZXR1cm4gJGh0dHAucG9zdCh0aGlzLl91cmwsdik7fVxuXHRcdGZ1bmN0aW9uIF91cGRhdGUgKHYpe1xuXHRcdFx0aWYodi5pZCl7XG5cdFx0XHRcdHJldHVybiAkaHR0cC5wdXQodGhpcy5fdXJsICsgJy8nICsgdi5pZCAsdik7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcy5zYXZlKHYpO1xuXHRcdH1cblx0XHRmdW5jdGlvbiBfZGVsZXRlKHYpe3JldHVybiAkaHR0cC5kZWxldGUodGhpcy5fdXJsICsgJy8nICsgdi5pZCk7fVxuXHRcdGZ1bmN0aW9uIF9yZXNldFF1ZXJ5KCl7dGhpcy5fcXVlcnkgPSB7cGFyYW1zOiB7c3RhcnQ6IDAscGFnZVNpemU6IDEwfX07fVxuXG5cdFx0ZnVuY3Rpb24gX3Jlc2V0QW5kR2V0KCl7XG5cdFx0XHR0aGlzLnJlc2V0RGVmYXVsdFN0YXRlKCk7XG5cdFx0XHRyZXR1cm4gJGh0dHAuZ2V0KHRoaXMuX3VybCx0aGlzLl9xdWVyeSk7XG5cdFx0fVxuXHRcdGZ1bmN0aW9uIF9zb3J0KGYsdyl7XG5cdFx0XHR0aGlzLnJlc2V0RGVmYXVsdFN0YXRlKCk7XG5cdFx0XHR0aGlzLl9xdWVyeS5wYXJhbXMuc29ydEZpZWxkID0gZjtcblx0XHRcdHRoaXMuX3F1ZXJ5LnBhcmFtcy5zb3J0RGlyID0gdztcblx0XHRcdHJldHVybiAkaHR0cC5nZXQodGhpcy5fdXJsLHRoaXMuX3F1ZXJ5KTtcblx0XHR9XG5cdFx0ZnVuY3Rpb24gX2RlbGV0ZUNvbGxlY3Rpb24oYXJyKXtcblx0XHRcdHZhciB1cmwgPSB0aGlzLl91cmw7XG5cdFx0XHRyZXR1cm4gJHEuYWxsKGFyci5tYXAoZnVuY3Rpb24odil7XG5cdFx0XHRcdHJldHVybiAkaHR0cC5kZWxldGUodXJsICsgJy8nICsgdi5pZCk7XG5cdFx0XHR9KSlcblx0XHR9XG5cdFx0ZnVuY3Rpb24gX3NhdmVJbWFnZShhLG0pe1xuXHRcdFx0dmFyIGZkID0gbmV3IEZvcm1EYXRhKCk7XG5cdFx0XHRmZC5hcHBlbmQoYSxtKTtcblx0XHRcdHJldHVybiAkaHR0cC5wb3N0KHRoaXMuX3VybCArICcvJyArYSAsZmQse1xuXHRcdFx0XHR0cmFuc2Zvcm1SZXF1ZXN0OiBhbmd1bGFyLmlkZW50aXR5LFxuXHRcdFx0XHRoZWFkZXJzOiB7J0NvbnRlbnQtVHlwZSc6IHVuZGVmaW5lZH1cblx0XHRcdH0pO1xuXHRcdH1cblx0XHRmdW5jdGlvbiBfZGVsZXRlSW1hZ2UoYSl7XG5cdFx0XHR2YXIgZmQgPSBuZXcgRm9ybURhdGEoKTtcblx0XHRcdGZkLmFwcGVuZChhLHt9KTtcblx0XHRcdHJldHVybiAkaHR0cC5kZWxldGUodGhpcy5fdXJsICsgJy8nICthLGZkLHtcblx0XHRcdFx0dHJhbnNmb3JtUmVxdWVzdDogYW5ndWxhci5pZGVudGl0eSxcblx0XHRcdFx0aGVhZGVyczogeydDb250ZW50LVR5cGUnOiB1bmRlZmluZWR9XG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0ZnVuY3Rpb24gX2dldFNlYXJjaChmLHApe1xuXHRcdFx0dGhpcy5yZXNldERlZmF1bHRTdGF0ZSgpO1xuXHRcdFx0KCFwKSA/ICBwID0gJycgOiBhbmd1bGFyLm5vb3A7XG5cdFx0XHR0aGlzLl9xdWVyeS5wYXJhbXMucSA9IHA7XG5cdFx0XHR0aGlzLl9xdWVyeS5wYXJhbXMuc2VhcmNoRmllbGRzID0gZjtcblx0XHRcdHJldHVybiB0aGlzLmdldCgpO1xuXHRcdH1cblx0XHRmdW5jdGlvbiBfZ2V0QWR2YW5jZWRTZWFyY2gocCl7XG5cdFx0XHR0aGlzLl9xdWVyeS5wYXJhbXMgPSB7fVxuXHRcdFx0dGhpcy5fcXVlcnkucGFyYW1zLmFxID0gcDtcblx0XHRcdHJldHVybiAkaHR0cC5nZXQodGhpcy5fdXJsLHRoaXMuX3F1ZXJ5KTtcblx0XHR9XG5cdFx0cmV0dXJuIFJlc3RQcm90b3R5cGU7XG5cdH1cblxuXHRhbmd1bGFyLm1vZHVsZSgnZ3VtZ2Euc2VydmljZXMucmVzdCcsW10pXG5cdC5zZXJ2aWNlKCdHdW1nYVJlc3QnLEJhc2UpO1xuXG59KSgpOyIsIihmdW5jdGlvbigpe1xuXHQndXNlIHN0cmljdCc7XG5cblxuXHRcdFRyYW5zbGF0ZS4kaW5qZWN0PSBbXTtcblx0XHRmdW5jdGlvbiBUcmFuc2xhdGUoKXtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdCRnZXQ6IFtcIiRodHRwXCIsIGZ1bmN0aW9uKCRodHRwKXtcblx0XHRcdFx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdFx0XHRcdFx0JGh0dHAuZ2V0KCcvaTE4bi8nK3NlbGYuX2xhbmd1YWdlICsgJy5qc29uJylcblx0XHRcdFx0XHRcdC5zdWNjZXNzKGZ1bmN0aW9uIFN1Y2Nlc3NHZXQodmFsdWVzKXtcblx0XHRcdFx0XHRcdFx0bG9jYWxTdG9yYWdlLnNldEl0ZW0oJ0dVTUdBJysgc2VsZi5fbGFuZ3VhZ2UsSlNPTi5zdHJpbmdpZnkodmFsdWVzKSk7XG5cdFx0XHRcdFx0XHRcdGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdHVU1HQUN1cnJlbnQnLHNlbGYuX2xhbmd1YWdlKTtcblx0XHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0cmV0dXJuIHNlbGY7XG5cdFx0XHRcdH1dLFxuXHRcdFx0XHRzZXRMYW5ndWFnZTogZnVuY3Rpb24obGFuZ3VhZ2Upe1xuXHRcdFx0XHRcdGlmKCFsYW5ndWFnZSkgdGhyb3cgJ1lvdSBtdXN0IHBhc3MgYSBsYW5ndWFnZSB0byBHdW1nYVRyYW5zbGF0ZSc7XG5cdFx0XHRcdFx0dGhpcy5fbGFuZ3VhZ2UudG9Mb3dlckNhc2UoKSAhPT0gbGFuZ3VhZ2UudG9Mb3dlckNhc2UoKSA/IHRoaXMuX2xhbmd1YWdlID0gbGFuZ3VhZ2UgOiBmdW5jdGlvbigpe307XG5cdFx0XHRcdH0sXG5cdFx0XHRcdF9sYW5ndWFnZTogJ3B0LWJyJ1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGFuZ3VsYXIubW9kdWxlKCdndW1nYS5zZXJ2aWNlcy50cmFuc2xhdGUnLFsnZ3VtZ2Euc2VydmljZXMudHJhbnNsYXRlLmhlbHBlciddKVxuXHRcdC5wcm92aWRlcignJGd1bWdhVHJhbnNsYXRlJyxUcmFuc2xhdGUpXG59KSgpOyIsIihmdW5jdGlvbigpe1xuXHQndXNlIHN0cmljdCc7XG5cblx0VHJhbnNsYXRlSGVscGVyLiRpbmplY3QgPSBbXTtcblxuXHRmdW5jdGlvbiBUcmFuc2xhdGVIZWxwZXIoKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdF90cmFuc2xhdGlvbjoge30sXG5cdFx0XHRfX2dldEZyb21Mb2NhbFN0b3JhZ2U6IGZ1bmN0aW9uKCl7XG5cdFx0XHRcdHZhciBsYW5ndWFnZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdHVU1HQUN1cnJlbnQnKVxuXHRcdFx0XHQsXHRcdHNlbGYgPSB0aGlzO1xuXHRcdFx0XHRmdW5jdGlvbiBpdGVyYXRlKG9iaixzdHJpbmcpe1xuXHRcdFx0XHRcdGZvcih2YXIga2V5IGluIG9iaikgaWYob2JqLmhhc093blByb3BlcnR5KGtleSkpe1xuXHRcdFx0XHRcdFx0KHR5cGVvZiBvYmpba2V5XSA9PSAnb2JqZWN0JykgPyBcblx0XHRcdFx0XHRcdFx0aXRlcmF0ZShvYmpba2V5XSwgc3RyaW5nICsgJy4nICsga2V5KSA6IHNlbGYuX3RyYW5zbGF0aW9uWyhzdHJpbmcgKyAnLicgKyBrZXkpLnN1YnN0cmluZygxKV0gPSBvYmpba2V5XTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYobGFuZ3VhZ2UgJiYgbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ0dVTUdBJyArIGxhbmd1YWdlKSl7XG5cdFx0XHRcdFx0aXRlcmF0ZShKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdHVU1HQScgKyBsYW5ndWFnZSkpLCcnKTtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdH0sXG5cdFx0XHRnZXRUcmFuc2xhdGU6IGZ1bmN0aW9uKHRvVHJhbnNsYXRlKXtcblx0XHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xuXHRcdFx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoc2VsZi5fdHJhbnNsYXRpb24pLmxlbmd0aCA9PT0gMClcblx0XHRcdFx0XHRzZWxmLl9fZ2V0RnJvbUxvY2FsU3RvcmFnZSgpO1xuXHRcdFx0XHRpZighdG9UcmFuc2xhdGUgfHwgdHlwZW9mIHRvVHJhbnNsYXRlICE9ICdzdHJpbmcnKSAgXG5cdFx0XHRcdFx0dGhyb3cgJ1RoZSB2YWx1ZSBwYXNzZWQgdG8gR3VtZ2FUcmFuc2xhdGUgaXMgV3JvbmchJztcblx0XHRcdFx0aWYoc2VsZi5fdHJhbnNsYXRpb25bdG9UcmFuc2xhdGVdKVxuXHRcdFx0XHRcdHJldHVybiBzZWxmLl90cmFuc2xhdGlvblt0b1RyYW5zbGF0ZV07XG5cdFx0XHRcdHJldHVybiB0b1RyYW5zbGF0ZTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRhbmd1bGFyLm1vZHVsZSgnZ3VtZ2Euc2VydmljZXMudHJhbnNsYXRlLmhlbHBlcicsW10pXG5cdC5mYWN0b3J5KCdHdW1nYVRyYW5zbGF0ZUhlbHBlcicsVHJhbnNsYXRlSGVscGVyKVxuXG59KSgpOyIsIihmdW5jdGlvbigpe1xuICAndXNlIHN0cmljdCc7XG5cbiAgVXRpbHMuJGluamVjdCA9IFtdO1xuXG4gIGZ1bmN0aW9uIFV0aWxzKCl7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFyZU5vdEVxdWFsSW5BcnJheTogZnVuY3Rpb24gKGFycmF5LCBpbmRleCkge1xuICAgICAgICB2YXIgYXV4ID0gYXJyYXkuZmlsdGVyKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgcmV0dXJuIGVsZW1lbnQgPT0gaW5kZXg7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gKGF1eC5sZW5ndGggPCAxKTtcbiAgICAgIH0sXG4gICAgICBjYW1lbENhc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5zbGljZSgwLCAxKS50b1VwcGVyQ2FzZSgpICsgc3RyaW5nLnNsaWNlKDEsIHN0cmluZy5sZW5ndGgpO1xuICAgICAgfSxcbiAgICAgIG9iakluQXJyYXk6IGZ1bmN0aW9uIChhcnJheSwgZmllbGQpIHtcbiAgICAgICAgdmFyIGFycmF5QXV4ID0gYXJyYXkuZmlsdGVyKGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICByZXR1cm4gb2JqLmZpZWxkID09IGZpZWxkO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGFycmF5QXV4Lmxlbmd0aCA+IDA7XG4gICAgICB9LFxuICAgICAgY2hlY2tJbmRleDogZnVuY3Rpb24gKGFycmF5LCB0eHQpIHtcbiAgICAgICAgdmFyIGZsYWcgPSAtMTtcbiAgICAgICAgYXJyYXkuZm9yRWFjaChmdW5jdGlvbiAob2JqLCBpbmRleCkge1xuICAgICAgICAgIGlmIChvYmouZmllbGQgPT0gdHh0KSB7XG4gICAgICAgICAgICBmbGFnID0gaW5kZXg7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZsYWc7XG4gICAgICB9LFxuICAgICAgZXJyb3JNZXNzYWdlczoge1xuICAgICAgICBtYXg6IFwiWW91J3ZlIHR5cGVkIG1vcmUgdGhhbiB0aGUgbWF4aW11bSFcIixcbiAgICAgICAgbWluOiBcIllvdSd2ZSB0eXBlZCBsZXNzIHRoYW4gdGhlIG1pbmltdW0hXCIsXG4gICAgICAgIHJlcTogXCJUaGlzIGZpZWxkIGlzIHJlcXVpcmVkXCJcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgYW5ndWxhci5tb2R1bGUoJ2d1bWdhLnNlcnZpY2VzLnV0aWxzJyxbXSlcbiAgLmZhY3RvcnkoJ0d1bWdhVXRpbHMnLFV0aWxzKTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24oKXtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdFdlYlN0b3JhZ2UuJGluamVjdCA9IFtdO1xuXHQvKipcblx0ICogQG5nZG9jIHNlcnZpY2Vcblx0ICogQG5hbWUgZ3VtZ2EuY29yZTpHdW1nYVdlYlN0b3JhZ2Vcblx0ICogQGRlc2NyaXB0aW9uIFxuXHQgKiBcblx0ICogXHRPIHNlcnZpY2UgR3VtZ2FXZWJTdG9yYWdlIMOpIHV0aWxpemFkbyBwYXJhIGFqdWRhciBvIGRlc2Vudm9sdmVkb3IgYSB0cmFiYWxoYXIgY29tIG8gc3RvcmFnZSBkbyBCcm93c2VyLlxuXHQgKlxuXHQgKiBcdCNNw6l0b2Rvc1xuXHQgKlxuXHQgKlx0LS0tXG5cdCAqIFxuXHQgKiAgYEd1bWdhV2ViU3RvcmFnZS5zZXRTZXNzaW9uU3RvcmFnZUl0ZW0oa2V5LHZhbHVlKWBcblx0ICogIFxuXHQgKiAgTyBtw6l0b2RvIHNldFNlc3Npb25TdG9yYWdlSXRlbSBhY2VpdGEgZG9pcyBwYXLDom1ldHJvcyBga2V5YCBlIGB2YWx1ZWAuXG4gXHQgKiAgXG5cdCAqICAjIyMgUGFyw6JtZXRyb3Ncblx0ICogIC0gPGxhYmVsIGNsYXNzPVwibGFiZWwgbGFiZWwtd2FybmluZ1wiIHN0eWxlPVwibWFyZ2luLXJpZ2h0OiAxJVwiPlN0cmluZzwvbGFiZWw+IDxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLWluZm9cIj5rZXk8L2xhYmVsPiBRdWFsIG8gaWRlbnRpZmljYWRvciBkbyB2YWxvciBxdWUgc2Vyw6Egc2Fsdm8uXG5cdCAqICAtIDxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLXdhcm5pbmdcIiBzdHlsZT1cIm1hcmdpbi1yaWdodDogMSVcIj5bU3RyaW5nfE51bWJlcnxPYmplY3RdPC9sYWJlbD4gPGxhYmVsIGNsYXNzPVwibGFiZWwgbGFiZWwtaW5mb1wiPnZhbHVlPC9sYWJlbD4gVmFsb3IgcXVlIHNlcsOhIHNhbHZvIG5vIHNlc3Npb25TdG9yYWdlLlxuXHQgKiAgLS0tXG4gXHQgKiBcblx0ICogIGBHdW1nYVdlYlN0b3JhZ2UuZ2V0U2Vzc2lvblN0b3JhZ2VJdGVtKGtleSlgXG5cdCAqICBcblx0ICogIE8gbcOpdG9kbyBzZXRTZXNzaW9uU3RvcmFnZUl0ZW0gYWNlaXRhIHVtIHBhcsOibWV0cm8gYGtleWAuXG4gXHQgKiAgXG5cdCAqICAjIyMgUGFyw6JtZXRyb3Ncblx0ICogIC0gPGxhYmVsIGNsYXNzPVwibGFiZWwgbGFiZWwtd2FybmluZ1wiIHN0eWxlPVwibWFyZ2luLXJpZ2h0OiAxJVwiPlN0cmluZzwvbGFiZWw+IDxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLWluZm9cIj5rZXk8L2xhYmVsPiBRdWFsIG8gaWRlbnRpZmljYWRvciBkbyB2YWxvciBxdWUgc2Vyw6Egc2Fsdm8uXG5cdCAqXG5cdCAqICAjIyMgUmV0b3Jub1xuXHQgKiAgLSA8bGFiZWwgY2xhc3M9XCJsYWJlbCBsYWJlbC13YXJuaW5nXCIgc3R5bGU9XCJtYXJnaW4tcmlnaHQ6IDElXCI+W1N0cmluZ3xOdW1iZXJ8T2JqZWN0XTwvbGFiZWw+IDxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLWluZm9cIj5rZXk8L2xhYmVsPiBSZXRvcm5hIG8gdmFsb3IgcXVlIGVzdGl2ZXIgbmEgc2Vzc2lvblN0b3JhZ2UgZGFxdWVsYSBrZXkgZXNwZWPDrWZpY2EuIENhc28gbsOjbyBlbmNvbnRyZSxcblx0ICogIG8gdmFsb3IgcmV0b3JuYWRvIMOpIG51bGwuXG5cdCAqICAtLS1cblx0ICpcbiBcdCAqICBgR3VtZ2FXZWJTdG9yYWdlLnJlbW92ZVNlc3Npb25TdG9yYWdlSXRlbShrZXkpYFxuXHQgKiAgXG5cdCAqICBPIG3DqXRvZG8gcmVtb3ZlU2Vzc2lvblN0b3JhZ2VJdGVtIGFjZWl0YSB1bSBwYXLDom1ldHJvIGBrZXlgLlxuIFx0ICogIFxuXHQgKiAgIyMjIFBhcsOibWV0cm9zXG5cdCAqICAtIDxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLXdhcm5pbmdcIiBzdHlsZT1cIm1hcmdpbi1yaWdodDogMSVcIj5TdHJpbmc8L2xhYmVsPiA8bGFiZWwgY2xhc3M9XCJsYWJlbCBsYWJlbC1pbmZvXCI+a2V5PC9sYWJlbD4gUXVhbCBvIGlkZW50aWZpY2Fkb3IgZG8gdmFsb3IgcXVlIHNlcsOhIHJlbW92aWRvIGRhIHNlc3Npb25TdG9yYWdlLlxuXHQgKlxuXHQgKiAgLS0tIFxuXHQgKlxuXHQgKiAgYEd1bWdhV2ViU3RvcmFnZS5jbGVhclNlc3Npb25TdG9yYWdlKClgXG5cdCAqICBcblx0ICogIE8gbcOpdG9kbyBjbGVhclNlc3Npb25TdG9yYWdlIG7Do28gYWNlaXRhIG5lbmh1bSBwYXLDom1ldHJvIGUgbGltcGEgYSBzZXNzaW9uU3RvcmFnZS5cbiBcdCAqICBcblx0ICogIC0tLSBcblx0ICpcbiBcdCAqXG5cdCAqICBgR3VtZ2FXZWJTdG9yYWdlLmdldE51bWJlck9mSXRlbXNJblNlc3Npb25TdG9yYWdlKClgXG5cdCAqICBcblx0ICogIE8gbcOpdG9kbyBnZXROdW1iZXJPZkl0ZW1zSW5TZXNzaW9uU3RvcmFnZSBuw6NvIGFjZWl0YSBuZW5odW0gcGFyw6JtZXRybywgZSByZXRvcm5hIG8gbsO6bWVybyBkZSBpdGVucyBubyBsb2NhbFN0b3JhZ2UuXG4gXHQgKiAgXG5cdCAqICAtLS0gXG5cdCAqXG4gXHQgKiBcblx0ICogIGBHdW1nYVdlYlN0b3JhZ2Uuc2V0TG9jYWxTdG9yYWdlSXRlbShrZXksdmFsdWUpYFxuXHQgKiAgXG5cdCAqICBPIG3DqXRvZG8gc2V0TG9jYWxTdG9yYWdlSXRlbSBhY2VpdGEgZG9pcyBwYXLDom1ldHJvcyBga2V5YCBlIGB2YWx1ZWAuXG4gXHQgKiAgXG5cdCAqICAjIyMgUGFyw6JtZXRyb3Ncblx0ICogIC0gPGxhYmVsIGNsYXNzPVwibGFiZWwgbGFiZWwtd2FybmluZ1wiIHN0eWxlPVwibWFyZ2luLXJpZ2h0OiAxJVwiPlN0cmluZzwvbGFiZWw+IDxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLWluZm9cIj5rZXk8L2xhYmVsPiBRdWFsIG8gaWRlbnRpZmljYWRvciBkbyB2YWxvciBxdWUgc2Vyw6Egc2Fsdm8uXG5cdCAqICAtIDxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLXdhcm5pbmdcIiBzdHlsZT1cIm1hcmdpbi1yaWdodDogMSVcIj5bU3RyaW5nfE51bWJlcnxPYmplY3RdPC9sYWJlbD4gPGxhYmVsIGNsYXNzPVwibGFiZWwgbGFiZWwtaW5mb1wiPnZhbHVlPC9sYWJlbD4gVmFsb3IgcXVlIHNlcsOhIHNhbHZvIG5vIExvY2FsU3RvcmFnZS5cblx0ICogIC0tLVxuIFx0ICogXG5cdCAqICBgR3VtZ2FXZWJTdG9yYWdlLmdldExvY2FsU3RvcmFnZUl0ZW0oa2V5KWBcblx0ICogIFxuXHQgKiAgTyBtw6l0b2RvIHNldExvY2FsU3RvcmFnZUl0ZW0gYWNlaXRhIHVtIHBhcsOibWV0cm8gYGtleWAuXG4gXHQgKiAgXG5cdCAqICAjIyMgUGFyw6JtZXRyb3Ncblx0ICogIC0gPGxhYmVsIGNsYXNzPVwibGFiZWwgbGFiZWwtd2FybmluZ1wiIHN0eWxlPVwibWFyZ2luLXJpZ2h0OiAxJVwiPlN0cmluZzwvbGFiZWw+IDxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLWluZm9cIj5rZXk8L2xhYmVsPiBRdWFsIG8gaWRlbnRpZmljYWRvciBkbyB2YWxvciBxdWUgc2Vyw6Egc2Fsdm8uXG5cdCAqXG5cdCAqICAjIyMgUmV0b3Jub1xuXHQgKiAgLSA8bGFiZWwgY2xhc3M9XCJsYWJlbCBsYWJlbC13YXJuaW5nXCIgc3R5bGU9XCJtYXJnaW4tcmlnaHQ6IDElXCI+W1N0cmluZ3xOdW1iZXJ8T2JqZWN0XTwvbGFiZWw+IDxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLWluZm9cIj5rZXk8L2xhYmVsPiBSZXRvcm5hIG8gdmFsb3IgcXVlIGVzdGl2ZXIgbmEgTG9jYWxTdG9yYWdlIGRhcXVlbGEga2V5IGVzcGVjw61maWNhLiBDYXNvIG7Do28gZW5jb250cmUsXG5cdCAqICBvIHZhbG9yIHJldG9ybmFkbyDDqSBudWxsLlxuXHQgKiAgLS0tXG5cdCAqXG4gXHQgKiAgYEd1bWdhV2ViU3RvcmFnZS5yZW1vdmVMb2NhbFN0b3JhZ2VJdGVtKGtleSlgXG5cdCAqICBcblx0ICogIE8gbcOpdG9kbyByZW1vdmVMb2NhbFN0b3JhZ2VJdGVtIGFjZWl0YSB1bSBwYXLDom1ldHJvIGBrZXlgLlxuIFx0ICogIFxuXHQgKiAgIyMjIFBhcsOibWV0cm9zXG5cdCAqICAtIDxsYWJlbCBjbGFzcz1cImxhYmVsIGxhYmVsLXdhcm5pbmdcIiBzdHlsZT1cIm1hcmdpbi1yaWdodDogMSVcIj5TdHJpbmc8L2xhYmVsPiA8bGFiZWwgY2xhc3M9XCJsYWJlbCBsYWJlbC1pbmZvXCI+a2V5PC9sYWJlbD4gUXVhbCBvIGlkZW50aWZpY2Fkb3IgZG8gdmFsb3IgcXVlIHNlcsOhIHJlbW92aWRvIGRhIExvY2FsU3RvcmFnZS5cblx0ICpcblx0ICogIC0tLSBcblx0ICpcblx0ICogIGBHdW1nYVdlYlN0b3JhZ2UuY2xlYXJMb2NhbFN0b3JhZ2UoKWBcblx0ICogIFxuXHQgKiAgTyBtw6l0b2RvIGNsZWFyTG9jYWxTdG9yYWdlIG7Do28gYWNlaXRhIG5lbmh1bSBwYXLDom1ldHJvIGUgbGltcGEgbyBsb2NhbFN0b3JhZ2UuXG4gXHQgKiAgXG5cdCAqICAtLS0gXG4gXHQgKlxuXHQgKiAgYEd1bWdhV2ViU3RvcmFnZS5nZXROdW1iZXJPZkl0ZW1zSW5Mb2NhbFN0b3JhZ2UoKWBcblx0ICogIFxuXHQgKiAgTyBtw6l0b2RvIGdldE51bWJlck9mSXRlbXNJbkxvY2FsU3RvcmFnZSBuw6NvIGFjZWl0YSBuZW5odW0gcGFyw6JtZXRybywgZSByZXRvcm5hIG8gbsO6bWVybyBkZSBpdGVucyBubyBsb2NhbFN0b3JhZ2UuXG4gXHQgKiAgXG5cdCAqICAtLS0gXG5cdCAqL1xuXHRmdW5jdGlvbiBXZWJTdG9yYWdlKCl7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNldFNlc3Npb25TdG9yYWdlSXRlbTogZnVuY3Rpb24oa2V5LHZhbHVlKXtcblx0XHRcdFx0dmFyIF92YWx1ZSA9IHZhbHVlO1xuXHRcdFx0XHRpZih0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcpe1xuXHRcdFx0XHRcdF92YWx1ZSA9IGFuZ3VsYXIudG9Kc29uKHZhbHVlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHR3aW5kb3cuc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShrZXksX3ZhbHVlKTtcblx0XHRcdH0sXG5cdFx0XHRnZXRTZXNzaW9uU3RvcmFnZUl0ZW06IGZ1bmN0aW9uKGtleSl7XG5cdFx0XHRcdHZhciBnID0gd2luZG93LnNlc3Npb25TdG9yYWdlLmdldEl0ZW0oa2V5KTtcblx0XHRcdFx0aWYoIWcpe1xuXHRcdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0YW5ndWxhci5mcm9tSnNvbihnKTtcblx0XHRcdFx0fWNhdGNoKGUpe1xuXHRcdFx0XHRcdHJldHVybiBnO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBhbmd1bGFyLmZyb21Kc29uKGcpO1xuXHRcdFx0fSxcblx0XHRcdHJlbW92ZVNlc3Npb25TdG9yYWdlSXRlbTogZnVuY3Rpb24oa2V5KXtcblx0XHRcdFx0d2luZG93LnNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0oa2V5KTtcblx0XHRcdH0sXG5cdFx0XHRjbGVhclNlc3Npb25TdG9yYWdlOiBmdW5jdGlvbigpe1xuXHRcdFx0XHR3aW5kb3cuc2Vzc2lvblN0b3JhZ2UuY2xlYXIoKTtcblx0XHRcdH0sXG5cdFx0XHRnZXROdW1iZXJPZkl0ZW1zSW5TZXNzaW9uU3RvcmFnZTogZnVuY3Rpb24oKXtcblx0XHRcdFx0cmV0dXJuIHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5sZW5ndGg7XG5cdFx0XHR9LFxuXHRcdFx0c2V0TG9jYWxTdG9yYWdlSXRlbTogZnVuY3Rpb24oa2V5LHZhbHVlKXtcblx0XHRcdFx0d2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSxhbmd1bGFyLnRvSnNvbih2YWx1ZSkpO1xuXHRcdFx0fSxcblx0XHRcdGdldExvY2FsU3RvcmFnZUl0ZW06IGZ1bmN0aW9uKGtleSl7XG5cdFx0XHRcdHZhciBnID0gd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSk7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0YW5ndWxhci5mcm9tSnNvbihnKTtcblx0XHRcdFx0fWNhdGNoKGUpe1xuXHRcdFx0XHRcdHJldHVybiBnO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBhbmd1bGFyLmZyb21Kc29uKGcpO1xuXHRcdFx0fSxcblx0XHRcdHJlbW92ZUxvY2FsU3RvcmFnZUl0ZW06IGZ1bmN0aW9uKGtleSl7XG5cdFx0XHRcdHdpbmRvdy5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpO1xuXHRcdFx0fSxcblx0XHRcdGNsZWFyTG9jYWxTdG9yYWdlOiBmdW5jdGlvbigpe1xuXHRcdFx0XHR3aW5kb3cubG9jYWxTdG9yYWdlLmNsZWFyKCk7XG5cdFx0XHR9LFxuXHRcdFx0Z2V0TnVtYmVyT2ZJdGVtc0luTG9jYWxTdG9yYWdlOiBmdW5jdGlvbigpe1xuXHRcdFx0XHRyZXR1cm4gd2luZG93LmxvY2FsU3RvcmFnZS5sZW5ndGg7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0YW5ndWxhci5tb2R1bGUoJ2d1bWdhLnNlcnZpY2VzLndlYnN0b3JhZ2UnLFtdKVxuXHQuZmFjdG9yeSgnR3VtZ2FXZWJTdG9yYWdlJyxXZWJTdG9yYWdlKVxufSkoKTsiLCIoZnVuY3Rpb24oKXtcblx0J3VzZSBzdHJpY3QnO1xuXHRFcnJvcnMuJGluamVjdCA9IFtdO1xuICBmdW5jdGlvbiBFcnJvcnMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICBzY29wZToge30sXG4gICAgICB0ZW1wbGF0ZTonJyxcbiAgICAgIHJlcXVpcmU6ICdeZm9ybScsXG4gICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsbSwgYXR0cnMsIGN0cmwpIHtcbiAgICAgICAgIGcoJ2RpcmV0aXZhIGZvcm0gZXJyb3JzJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cdGFuZ3VsYXIubW9kdWxlKCdndW1nYS5kaXJlY3RpdmVzLmZvcm0uZXJyb3JzJyxbXSlcblx0LmRpcmVjdGl2ZSgnZ3VtZ2FFcnJvcnMnLEVycm9ycyk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uKCl7XG5cdCd1c2Ugc3RyaWN0Jztcblx0Rm9ybS4kaW5qZWN0ID0gW1wiJHRpbWVvdXRcIl07XG5cdGZ1bmN0aW9uIEZvcm0oJHRpbWVvdXQpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0cmVzdHJpY3Q6ICdBJyxcblx0XHRcdHJlcXVpcmU6ICdeZm9ybScsXG5cdFx0XHRzY29wZTogZmFsc2UsXG5cdFx0XHRsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxtLCBhdHRycywgY3RybCkge1xuXHRcdFx0XHRpZighYXR0cnMubmFtZSkgdGhyb3cgJ8OJIG5lY2Vzc8OhcmlvIHBhc3NhciB1bSB2YWxvciBwYXJhIG8gYXRyaWJ1dG8gXCJuYW1lXCIgZG8gZWxlbWVudCA8Zm9ybT4nO1xuXHRcdFx0XHRzY29wZS5HdW1nYUZvcm0gPSB7fTtcblx0XHRcdFx0dmFyIF9mb3JtID0gc2NvcGVbYXR0cnMubmFtZV07XG5cdFx0XHRcdHZhciBfZm9ybUNvbnRyb2xsZXJzID0gW107XG5cdFx0XHRcdChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRhbmd1bGFyLmZvckVhY2goZWxtLmZpbmQoJ2lucHV0JyksZnVuY3Rpb24oaW5wdXQpe1xuXHRcdFx0XHRcdFx0X2Zvcm1Db250cm9sbGVycy5wdXNoKHtcblx0XHRcdFx0XHRcdFx0bmFtZTogYW5ndWxhci5lbGVtZW50KGlucHV0KS5jb250cm9sbGVyKCduZ01vZGVsJykuJG5hbWUsXG5cdFx0XHRcdFx0XHRcdGNvbnRyb2xsZXI6IGFuZ3VsYXIuZWxlbWVudChpbnB1dCkuY29udHJvbGxlcignbmdNb2RlbCcpLFxuXHRcdFx0XHRcdFx0XHRlcnJvck1lc3NhZ2VzOiB7XG5cdFx0XHRcdFx0XHRcdFx0bWF4Ontcblx0XHRcdFx0XHRcdFx0XHRcdGRhdGU6ICdBIGRhdGEgZXNwZWNpZmljYWRhIHVsdHJhcGFzc291IG8gbGltaXRlIGRlOiB7MX0uJyxcblx0XHRcdFx0XHRcdFx0XHRcdGxlbmd0aDogJ08gdGV4dG8gZXNwZWNpZmljYWRvIHVsdHJhcGFzc291IG8gbGltaXRlIGRlOiB7MX0uJyxcblx0XHRcdFx0XHRcdFx0XHRcdG51bWJlcjogJ08gbsO6bWVybyBlc3BlY2lmaWNhZG8gdWx0cmFwYXNzb3UgbyBsaW1pdGUgZGU6IHsxfS4nXG5cdFx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0XHRtaW46IHtcblx0XHRcdFx0XHRcdFx0XHRcdGRhdGU6ICdBIGRhdGEgZXNwZWNpZmljYWRhIG7Do28gYXRpZ2l1IG8gbGltaXRlIG3DrW5pbW8gZGU6IHsxfScsXG5cdFx0XHRcdFx0XHRcdFx0XHRsZW5ndGg6ICdPIHRleHRvIGVzcGVjaWZpY2FkbyBuw6NvIGF0aW5naXUgbyBsaW1pdGUgbcOtbmltbyBkZTogezF9Jyxcblx0XHRcdFx0XHRcdFx0XHRcdG51bWJlcjogJ08gbsO6bWVybyBlc3BlY2lmaWNhZG8gbsOjbyBhdGluZ2l1IG8gbGltaXRlIG3DrW5pbW8gZGU6IHsxfSdcblx0XHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHRcdHBhdHRlcm46ICdPIHRleHRvIGVzcGVjaWZpY2FkbyBkZXZlIGVzdGFyIGRlbnRybyBkbyBwYWRyw6NvOiB7MX0nLFxuXHRcdFx0XHRcdFx0XHRcdHJhbmdlOiB7XG5cdFx0XHRcdFx0XHRcdFx0XHRkYXRlOidBIGRhdGEgZXNwZWNpZmljYWRhIG7Do28gZXN0w6EgZGVudHJvIGRvIGFsY2FuY2U6IHsxfScsXG5cdFx0XHRcdFx0XHRcdFx0XHRudW1iZXI6ICdPIG7Dum1lcm8gZXNwZWNpZmljYWRvIG7Do28gZXN0w6EgZGVudHJvIGRvIGFsY2FuY2U6IHsxfSdcblx0XHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHRcdHJlcXVpcmVkOiAnTyBjYW1wbyDDqSByZXF1ZXJpZG8uJ1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9KVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9KSgpO1xuXG5cdFx0XHRcdHNjb3BlLmNoYW5nZU1lc3NhZ2UgPSBmdW5jdGlvbigpe1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzY29wZS5HdW1nYUZvcm0uc2V0Rm9ybVZhbGlkID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdGZvcih2YXIga2V5IGluIF9mb3JtLiRlcnJvcikgaWYoX2Zvcm0uJGVycm9yLmhhc093blByb3BlcnR5KGtleSkpe1xuXHRcdFx0XHRcdFx0XHRfZm9ybS4kZXJyb3Jba2V5XS5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRcdFx0XHRcdFx0XHRcdHZhbHVlLiRzZXRWYWxpZGl0eShrZXksdHJ1ZSk7XG5cdFx0XHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHNjb3BlLiRhcHBseSgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHNjb3BlLkd1bWdhRm9ybS5jbGVhckZvcm0gPSBmdW5jdGlvbigpe1xuXHRcdFx0XHRcdF9mb3JtQ29udHJvbGxlcnMuZm9yRWFjaChmdW5jdGlvbihjb250cm9sbGVyKXtcblx0XHRcdFx0XHRcdGNvbnRyb2xsZXIuY29udHJvbGxlci4kc2V0Vmlld1ZhbHVlKCcnKTtcblx0XHRcdFx0XHRcdGNvbnRyb2xsZXIuY29udHJvbGxlci4kc2V0UHJpc3RpbmUoKTtcblx0XHRcdFx0XHR9KVxuXHRcdFx0XHRcdHNjb3BlLiRhcHBseSgpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0c2NvcGUuR3VtZ2FGb3JtLnNldEZvcm1QcmlzdGluZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRfZm9ybUNvbnRyb2xsZXJzLmZvckVhY2goZnVuY3Rpb24oY29udHJvbGxlcil7XG5cdFx0XHRcdFx0XHRjb250cm9sbGVyLmNvbnRyb2xsZXIuJHNldFByaXN0aW5lKCk7XG5cdFx0XHRcdFx0fSlcblx0XHRcdFx0XHRzY29wZS4kYXBwbHkoKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHNjb3BlLkd1bWdhRm9ybS5nZXRGb3JtRXJyb3JzID0gZnVuY3Rpb24oKXtcblx0XHRcdFx0XHR2YXIgX2FyciA9IFtdXG5cdFx0XHRcdFx0LFx0XHRuYW1lXG5cdFx0XHRcdFx0LFx0XHRhdXggPSBbXTtcblx0XHRcdFx0XHRmb3IodmFyIGtleSBpbiBfZm9ybS4kZXJyb3IpIGlmKF9mb3JtLiRlcnJvci5oYXNPd25Qcm9wZXJ0eShrZXkpKXtcblx0XHRcdFx0XHRcdFx0X2Zvcm0uJGVycm9yW2tleV0uZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcblx0XHRcdFx0XHRcdFx0XHRhdXgucHVzaCh2YWx1ZS4kbmFtZSk7XG5cdFx0XHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0XHRcdF9hcnIucHVzaCh7dHlwZToga2V5LGZpZWxkczogYXV4fSk7XG5cdFx0XHRcdFx0XHRcdGF1eCA9IFtdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gX2Fycjtcblx0XHRcdFx0fVxuXG5cblx0XHRcdH1cblx0XHR9XG5cdH1cblx0YW5ndWxhci5tb2R1bGUoJ2d1bWdhLmRpcmVjdGl2ZXMuZm9ybS5mb3JtJyxbXSlcblx0LmRpcmVjdGl2ZSgnZ3VtZ2FGb3JtJyxGb3JtKTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24oKXtcblx0J3VzZSBzdHJpY3QnO1xuICAvKipcbiAgICogQG5nZG9jIGRpcmVjdGl2ZVxuICAgKiBAbmFtZSBndW1nYS5jb3JlOmd1bWdhTWF4RGF0ZVxuICAgKiBAZWxlbWVudCBpbnB1dFxuICAgKiBAcmVzdHJpY3QgQVxuICAgKiBAc2NvcGUgZmFsc2VcbiAgICogQGRlc2NyaXB0aW9uIE8gY29tcG9uZW50ZSBHdW1nYU1heERhdGUgc2VydmUgcGFyYSB2YWxpZGFyIGRhdGFzIG3DoXhpbWFzIGVtIGVudHJhZGFzIGRlIGZvcm11bMOhcmlvcy5cbiAgICogXG4gICAqICMjIE5vdGFcbiAgICogRXN0YSBkaXJldGl2YSBzdXBvcnRhIGFwZW5hcyAqKmlucHV0cyoqIGRvIHRpcG8gKipkYXRlKiouIE8gdmFsb3IgZG8gYXRyaWJ1dG8vZGlyZXRpdmEgw6kgKipvYnJpZ2F0w7NyaW8qKiBlIGRldmUgc2VyIHVtYSAqKmRhdGEqKi5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogIFVtIGV4ZW1wbG8gZGEgZGlyZWN0aXZlIGd1bWdhTWF4RGF0ZSBmdW5jaW9uYW5kbyBwb2RlIHNlciBlbmNvbnRyYWRvIFthcXVpXShodHRwOi8vZW1iZWQucGxua3IuY28vNktqZ1hGVEVBblFxOUdnV2JiREIpLlxuICAgKiAgPHByZT5cbiAgICogICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiPlxuICAgKiAgICAgIDxpbnB1dCB0eXBlPVwiZGF0ZVwiIG5hbWU9XCJtYXhEYXRlXCIgbmctbW9kZWw9XCJtYXhEYXRlXCIgZ3VtZ2EtbWF4LWRhdGU9XCIyMDE1LTA3LTIwXCI+XG4gICAqICAgICAgPHAgbmctc2hvdz1cIm15Rm9ybS5tYXhEYXRlLiRlcnJvci5tYXhkYXRlXCIgY2xhc3M9XCJ0ZXh0LWRhbmdlclwiPkRhdGEgc3VwZXJpb3IgYSBlc3BlcmFkYTwvcD5cbiAgICogICAgPC9mb3JtPlxuICAgKiAgPC9wcmU+XG4gICAqL1xuICAgTWF4RGF0ZS4kaW5qZWN0ID0gW1wiJGZpbHRlclwiXTtcbiAgIGZ1bmN0aW9uIE1heERhdGUoJGZpbHRlcikge1xuICAgICByZXR1cm4ge1xuICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgIHJlcXVpcmU6ICduZ01vZGVsJyxcbiAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxtLCBhdHRyLCBjdHJsKSB7XG4gICAgICAgaWYgKGF0dHIudHlwZSAhPSAnZGF0ZScpIHtcbiAgICAgICAgdGhyb3cgJ0VzdGEgZGlyZXRpdmEgc3Vwb3J0YSBhcGVuYXMgaW5wdXRzIGRvIHRpcG8gZGF0ZSc7XG4gICAgICB9XG4gICAgICBpZiAoIWF0dHIuZ3VtZ2FNYXhEYXRlKSB7XG4gICAgICAgIHRocm93IFwiTyB2YWxvciBkYSBkaXJldGl2YSBndW1nYS1tYXgtZGF0ZSBuw6NvIGZvaSBpbmZvcm1hZG8uXCI7XG4gICAgICB9XG4gICAgICAgIC8vIGlmICghR3VtZ2FEYXRlU2VydmljZS52YWxpZGF0ZUZvcm1hdCgnWU1EJywgYXR0ci5ndW1nYU1heERhdGUpKSB7XG4gICAgICAgIC8vICAgdGhyb3cgJ08gdmFsb3IgZGEgZGlyZXRpdmEgbsOjbyBjb3JyZXNwb25kZSBhbyBmb3JtYXRvIHl5eXktbW0tZGQnO1xuICAgICAgICAvLyB9XG4gICAgICAgIHZhciB2YWxpZGF0ZU1heERhdGUgPSBmdW5jdGlvbiAoaW5wdXRWYWx1ZSkge1xuICAgICAgICBcdHZhciBmb3JtYXQgPSAneXl5eS1NTS1kZCc7XG4gICAgICAgIFx0dmFyIGlucHV0ID0gJGZpbHRlcignZGF0ZScpKGlucHV0VmFsdWUsIGZvcm1hdCk7XG4gICAgICAgIFx0dmFyIG1heCA9ICRmaWx0ZXIoJ2RhdGUnKShhdHRyLmd1bWdhTWF4RGF0ZSwgZm9ybWF0KTtcbiAgICAgICAgXHR2YXIgaXNWYWxpZCA9IGlucHV0IDw9IG1heDtcbiAgICAgICAgXHRjdHJsLiRzZXRWYWxpZGl0eSgnbWF4ZGF0ZScsIGlzVmFsaWQpO1xuICAgICAgICBcdHJldHVybiBpbnB1dFZhbHVlO1xuICAgICAgICB9O1xuICAgICAgICBjdHJsLiRwYXJzZXJzLnVuc2hpZnQodmFsaWRhdGVNYXhEYXRlKTtcbiAgICAgICAgY3RybC4kZm9ybWF0dGVycy5wdXNoKHZhbGlkYXRlTWF4RGF0ZSk7XG4gICAgICAgIGF0dHIuJG9ic2VydmUoJ2d1bWdhTWF4RGF0ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgXHR2YWxpZGF0ZU1heERhdGUoY3RybC4kdmlld1ZhbHVlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc2NvcGUuJG9uKCdjbGVhckZpZWxkcycsZnVuY3Rpb24oZXZlbnQsIGRhdGEpIHtcbiAgICAgICAgIGN0cmwuJG1vZGVsVmFsdWUgPSBudWxsO1xuICAgICAgICAgY29uc29sZS5sb2coJ2RpcmVjdGl2ZSBkYXRlIGNsZWFyJyk7XG5cdFx0XHRcdFx0Ly8gY29uc29sZS5sb2coZWxtKTtcblx0XHRcdFx0XHQvLyBjb25zb2xlLmxvZyhjdHJsKTtcblx0XHRcdFx0fSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGFuZ3VsYXIubW9kdWxlKCdndW1nYS5kaXJlY3RpdmVzLmZvcm0ubWF4LmRhdGUnLFtdKVxuICAuZGlyZWN0aXZlKCdndW1nYU1heERhdGUnLE1heERhdGUpO1xufSkoKTtcbiIsIihmdW5jdGlvbigpe1xuXHQndXNlIHN0cmljdCc7XG4gIC8qKlxuICAgKiBAbmdkb2MgZGlyZWN0aXZlXG4gICAqIEBuYW1lIGd1bWdhLmNvcmU6Z3VtZ2FNYXhMZW5ndGhcbiAgICogQGVsZW1lbnQgaW5wdXRcbiAgICogQHJlc3RyaWN0IEFcbiAgICogQHNjb3BlIGZhbHNlXG4gICAqIEBkZXNjcmlwdGlvbiBPIGNvbXBvbmVudGUgR3VtZ2FNYXhMZW5ndGggc2VydmUgcGFyYSB2YWxpZGFyIHF1YW50aWRhZGVzIG3DoXhpbWFzIGRlIGNhcmFjdGVyZXMgZW0gZW50cmFkYXMgZGUgZm9ybXVsw6FyaW9zLlxuICAgKiBcbiAgICogIyMgTm90YVxuICAgKiBPIHZhbG9yIGRvIGF0cmlidXRvL2RpcmV0aXZhIMOpICoqb2JyaWdhdMOzcmlvKiogZSBkZXZlIHNlciB1bSAqKm7Dum1lcm8qKi5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogIFVtIGV4ZW1wbG8gZGEgZGlyZWN0aXZlIEd1bWdhTWF4TGVuZ3RoIGZ1bmNpb25hbmRvIHBvZGUgc2VyIGVuY29udHJhZG8gW2FxdWldKGh0dHA6Ly9lbWJlZC5wbG5rci5jby82S2pnWEZURUFuUXE5R2dXYmJEQikuXG4gICAqICA8cHJlPlxuICAgKiAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCI+XG4gICAqICAgICAgPGlucHV0IHR5cGU9XCJkYXRlXCIgbmFtZT1cIm1heExlbmd0aFwiIG5nLW1vZGVsPVwibWF4TGVuZ3RoXCIgZ3VtZ2EtbWF4LWxlbmd0aD1cIjIwXCIgaWQ9XCJtYXhMZW5ndGhcIj5cbiAgICogICAgICA8cCBuZy1zaG93PVwibXlGb3JtLm1heExlbmd0aC4kZXJyb3IubWF4bGVuZ3RoXCIgY2xhc3M9XCJ0ZXh0LWRhbmdlclwiPlRhbWFuaG8gc3VwZXJpb3IgYW8gZXNwZXJhZG88L3A+XG4gICAqICAgIDwvZm9ybT5cbiAgICogIDwvcHJlPlxuICAgKi9cbiAgIE1heExlbmd0aC4kaW5qZWN0ID0gW107XG4gICBmdW5jdGlvbiBNYXhMZW5ndGgoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICByZXF1aXJlOiAnbmdNb2RlbCcsXG4gICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsbSwgYXR0ciwgY3RybCkge1xuICAgICAgICBpZiAoIWF0dHIuZ3VtZ2FNYXhMZW5ndGgpIHtcbiAgICAgICAgICB0aHJvdyBcIk8gdmFsb3IgZGEgZGlyZXRpdmEgZ3VtZ2EtbWF4LWxlbmd0aCBuw6NvIGZvaSBpbmZvcm1hZG8uXCI7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHZhbGlkYXRlTWF4TGVuZ3RoID0gZnVuY3Rpb24gKGlucHV0VmFsdWUpIHtcbiAgICAgICAgICB2YXIgaW5wdXQgPSAoaW5wdXRWYWx1ZSA9PSB1bmRlZmluZWQpID8gLTEgOiBpbnB1dFZhbHVlLmxlbmd0aDtcbiAgICAgICAgICB2YXIgbWF4ID0gYXR0ci5ndW1nYU1heExlbmd0aDtcbiAgICAgICAgICB2YXIgaXNWYWxpZCA9IGlucHV0IDw9IG1heCAmJiBpbnB1dCAhPSAtMTtcblx0XHRcdFx0XHQvLyBpZiAoaXNWYWxpZCkgY29uc29sZS5sb2coaXNWYWxpZCk7XG4gICAgICAgICAgY3RybC4kc2V0VmFsaWRpdHkoJ21heGxlbmd0aCcsIGlzVmFsaWQpO1xuICAgICAgICAgIHJldHVybiBpbnB1dFZhbHVlO1xuICAgICAgICB9O1xuICAgICAgICBjdHJsLiRwYXJzZXJzLnVuc2hpZnQodmFsaWRhdGVNYXhMZW5ndGgpO1xuICAgICAgICBjdHJsLiRmb3JtYXR0ZXJzLnB1c2godmFsaWRhdGVNYXhMZW5ndGgpO1xuICAgICAgICBhdHRyLiRvYnNlcnZlKCdndW1nYU1heExlbmd0aCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YWxpZGF0ZU1heExlbmd0aChjdHJsLiR2aWV3VmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgYW5ndWxhci5tb2R1bGUoJ2d1bWdhLmRpcmVjdGl2ZXMuZm9ybS5tYXgubGVuZ3RoJyxbXSlcbiAgLmRpcmVjdGl2ZSgnZ3VtZ2FNYXhMZW5ndGgnLE1heExlbmd0aCk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uKCl7XG5cdCd1c2Ugc3RyaWN0JztcbiAgLyoqXG4gICAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAgICogQG5hbWUgZ3VtZ2EuY29yZTpndW1nYU1heE51bWJlclxuICAgKiBAZWxlbWVudCBpbnB1dFxuICAgKiBAcmVzdHJpY3QgQVxuICAgKiBAc2NvcGUgZmFsc2VcbiAgICogQGRlc2NyaXB0aW9uIE8gY29tcG9uZW50ZSBHdW1nYU1heE51bWJlciBzZXJ2ZSBwYXJhIHZhbGlkYXIgbsO6bWVyb3MgbcOheGltb3MgZW0gZW50cmFkYXMgZGUgZm9ybXVsw6FyaW9zLlxuICAgKlxuICAgKiAjIyBOb3RhXG4gICAqIEVzdGEgZGlyZXRpdmEgc3Vwb3J0YSBhcGVuYXMgKippbnB1dHMqKiBkbyB0aXBvICoqbnVtYmVyKiouIE8gdmFsb3IgZG8gYXRyaWJ1dG8vZGlyZXRpdmEgw6kgKipvYnJpZ2F0w7NyaW8qKiBlIGRldmUgc2VyIHVtICoqbsO6bWVybyoqLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiAgVW0gZXhlbXBsbyBkYSBkaXJlY3RpdmUgR3VtZ2FNYXhOdW1iZXIgZnVuY2lvbmFuZG8gcG9kZSBzZXIgZW5jb250cmFkbyBbYXF1aV0oaHR0cDovL2VtYmVkLnBsbmtyLmNvL0lLaWZCeFd6NWk1b2JrVkFtdXhJKS5cbiAgICogIDxwcmU+XG4gICAqICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIj5cbiAgICogICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIG5hbWU9XCJtYXhOdW1iZXJcIiBuZy1tb2RlbD1cIm1heE51bWJlclwiIGd1bWdhLW1heC1udW1iZXI9XCIyMFwiPlxuICAgKiAgICAgIDxwIG5nLXNob3c9XCJteUZvcm0ubWF4TnVtYmVyLiRlcnJvci5tYXhudW1iZXJcIiBjbGFzcz1cInRleHQtZGFuZ2VyXCI+TsO6bWVybyBzdXBlcmlvciBhbyBlc3BlcmFkbzwvcD5cbiAgICogICAgPC9mb3JtPlxuICAgKiAgPC9wcmU+XG4gICAqL1xuICAgTWF4TnVtYmVyLiRpbmplY3QgPSBbXTtcbiAgIGZ1bmN0aW9uIE1heE51bWJlcigpIHtcbiAgICAgcmV0dXJuIHtcbiAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICByZXF1aXJlOiAnbmdNb2RlbCcsXG4gICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsbSwgYXR0ciwgY3RybCkge1xuICAgICAgIGlmIChhdHRyLnR5cGUgIT0gJ251bWJlcicpIHtcbiAgICAgICAgdGhyb3cgJ0VzdGEgZGlyZXRpdmEgc3Vwb3J0YSBhcGVuYXMgaW5wdXRzIGRvIHRpcG8gbnVtYmVyJztcbiAgICAgIH1cbiAgICAgIGlmICghYXR0ci5ndW1nYU1heE51bWJlcikge1xuICAgICAgICB0aHJvdyBcIk8gdmFsb3IgZGEgZGlyZXRpdmEgZ3VtZ2EtbWF4LW51bWJlciBuw6NvIGZvaSBpbmZvcm1hZG8uXCI7XG4gICAgICB9XG4gICAgICB2YXIgdmFsaWRhdGVNYXhOdW1iZXIgPSBmdW5jdGlvbiAoaW5wdXRWYWx1ZSkge1xuICAgICAgICB2YXIgaW5wdXQgPSBwYXJzZUludChpbnB1dFZhbHVlKTtcbiAgICAgICAgdmFyIG1heCA9IHBhcnNlSW50KGF0dHIuZ3VtZ2FNYXhOdW1iZXIpO1xuICAgICAgICB2YXIgaXNWYWxpZCA9IGlucHV0IDw9IG1heDtcbiAgICAgICAgY3RybC4kc2V0VmFsaWRpdHkoJ21heG51bWJlcicsIGlzVmFsaWQpO1xuICAgICAgICByZXR1cm4gaW5wdXRWYWx1ZTtcbiAgICAgIH07XG4gICAgICBjdHJsLiRwYXJzZXJzLnVuc2hpZnQodmFsaWRhdGVNYXhOdW1iZXIpO1xuICAgICAgY3RybC4kZm9ybWF0dGVycy5wdXNoKHZhbGlkYXRlTWF4TnVtYmVyKTtcbiAgICAgIGF0dHIuJG9ic2VydmUoJ2d1bWdhTWF4TnVtYmVyJywgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YWxpZGF0ZU1heE51bWJlcihjdHJsLiR2aWV3VmFsdWUpO1xuICAgICAgfSk7XG5cbiAgICAgIHNjb3BlLiRvbignY2xlYXJGaWVsZHMnLGZ1bmN0aW9uKGV2ZW50LCBkYXRhKSB7XG4gICAgICAgY3RybC4kbW9kZWxWYWx1ZSA9IG51bGw7XG4gICAgICAgY29uc29sZS5sb2coJ2RpcmVjdGl2ZSBkYXRlIGNsZWFyJyk7XG5cdFx0XHRcdFx0Ly8gY29uc29sZS5sb2coZWxtKTtcblx0XHRcdFx0XHQvLyBjb25zb2xlLmxvZygpO1xuXHRcdFx0XHR9KTtcbiAgICB9XG4gIH1cbn1cbmFuZ3VsYXIubW9kdWxlKCdndW1nYS5kaXJlY3RpdmVzLmZvcm0ubWF4Lm51bWJlcicsW10pXG4uZGlyZWN0aXZlKCdndW1nYU1heE51bWJlcicsTWF4TnVtYmVyKTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24oKXtcblx0J3VzZSBzdHJpY3QnO1xuICAvKipcbiAgICogQG5nZG9jIGRpcmVjdGl2ZVxuICAgKiBAbmFtZSBndW1nYS5jb3JlOmd1bWdhTWluRGF0ZVxuICAgKiBAZWxlbWVudCBpbnB1dFxuICAgKiBAcmVzdHJpY3QgQVxuICAgKiBAZGVzY3JpcHRpb24gTyBjb21wb25lbnRlIEd1bWdhTWluRGF0ZSBzZXJ2ZSBwYXJhIHZhbGlkYXIgZGF0YXMgbcOtbmltYXMgZW0gZW50cmFkYXMgZGUgZm9ybXVsw6FyaW9zLlxuICAgKiBcbiAgICogIyMgTm90YVxuICAgKiBFc3RhIGRpcmV0aXZhIHN1cG9ydGEgYXBlbmFzICoqaW5wdXRzKiogZG8gdGlwbyAqKmRhdGUqKi4gTyB2YWxvciBkbyBhdHJpYnV0by9kaXJldGl2YSDDqSAqKm9icmlnYXTDs3JpbyoqIGUgZGV2ZSBzZXIgdW1hICoqZGF0YSoqLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiAgVW0gZXhlbXBsbyBkYSBkaXJlY3RpdmUgR3VtZ2FNaW5EYXRlIGZ1bmNpb25hbmRvIHBvZGUgc2VyIGVuY29udHJhZG8gW2FxdWldKGh0dHA6Ly9lbWJlZC5wbG5rci5jby9HWnI5bWwwZlRrSzFacmxoOTg1RikuXG4gICAqICA8cHJlPlxuICAgKiAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCI+XG4gICAqICAgICAgPGlucHV0IHR5cGU9XCJkYXRlXCIgbmFtZT1cIm1pbkRhdGVcIiBuZy1tb2RlbD1cIm1pbkRhdGVcIiBndW1nYS1taW4tZGF0ZT1cIjIwMTUtMDctMjBcIj5cbiAgICogICAgICA8cCBuZy1zaG93PVwibXlGb3JtLm1pbkRhdGUuJGVycm9yLm1pbmRhdGVcIiBjbGFzcz1cInRleHQtZGFuZ2VyXCI+RGF0YSBpbmZlcmlvciBhIGVzcGVyYWRhPC9wPlxuICAgKiAgICA8L2Zvcm0+XG4gICAqICA8L3ByZT5cbiAgKi9cblx0IE1pbkRhdGUuJGluamVjdCA9IFtcIiRmaWx0ZXJcIl07XG5cdCBmdW5jdGlvbiBNaW5EYXRlKCRmaWx0ZXIpIHtcblx0IFx0cmV0dXJuIHtcblx0IFx0XHRyZXN0cmljdDogJ0EnLFxuXHQgXHRcdHJlcXVpcmU6ICduZ01vZGVsJyxcblx0IFx0XHRsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsbSwgYXR0ciwgY3RybCkge1xuXHQgXHRcdFx0aWYgKGF0dHIudHlwZSAhPSAnZGF0ZScpIHtcblx0IFx0XHRcdFx0dGhyb3cgJ0VzdGEgZGlyZXRpdmEgc3Vwb3J0YSBhcGVuYXMgaW5wdXRzIGRvIHRpcG8gZGF0ZSc7XG5cdCBcdFx0XHR9XG5cdCBcdFx0XHRpZiAoIWF0dHIuZ3VtZ2FNaW5EYXRlKSB7XG5cdCBcdFx0XHRcdHRocm93IFwiTyB2YWxvciBkYSBkaXJldGl2YSBndW1nYS1taW4tZGF0ZSBuw6NvIGZvaSBpbmZvcm1hZG8uXCI7XG5cdCBcdFx0XHR9XG4gICAgICAgIC8vIGlmICghR3VtZ2FEYXRlU2VydmljZS52YWxpZGF0ZUZvcm1hdCgnWU1EJywgYXR0ci5ndW1nYU1pbkRhdGUpKSB7XG4gICAgICAgIC8vICAgdGhyb3cgJ08gdmFsb3IgZGEgZGlyZXRpdmEgbsOjbyBjb3JyZXNwb25kZSBhbyBmb3JtYXRvIHl5eXktbW0tZGQnO1xuICAgICAgICAvLyB9XG4gICAgICAgIHZhciB2YWxpZGF0ZU1pbkRhdGUgPSBmdW5jdGlvbiAoaW5wdXRWYWx1ZSkge1xuXHRcdFx0XHRcdHZhciBmb3JtYXQgPSAneXl5eS1NTS1kZCc7XG5cdFx0XHRcdFx0dmFyIGlucHV0ID0gJGZpbHRlcignZGF0ZScpKGlucHV0VmFsdWUsIGZvcm1hdCk7XG5cdFx0XHRcdFx0dmFyIG1pbiA9ICRmaWx0ZXIoJ2RhdGUnKShhdHRyLmd1bWdhTWluRGF0ZSwgZm9ybWF0KTtcblx0XHRcdFx0XHR2YXIgaXNWYWxpZCA9IGlucHV0ID49IG1pbjtcblx0XHRcdFx0XHRjdHJsLiRzZXRWYWxpZGl0eSgnbWluZGF0ZScsIGlzVmFsaWQpO1xuXHRcdFx0XHRcdHJldHVybiBpbnB1dFZhbHVlO1xuXHRcdFx0XHR9O1xuXHRcdFx0XHRjdHJsLiRwYXJzZXJzLnVuc2hpZnQodmFsaWRhdGVNaW5EYXRlKTtcblx0XHRcdFx0Y3RybC4kZm9ybWF0dGVycy5wdXNoKHZhbGlkYXRlTWluRGF0ZSk7XG5cdFx0XHRcdGF0dHIuJG9ic2VydmUoJ2d1bWdhTWluRGF0ZScsIGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHR2YWxpZGF0ZU1pbkRhdGUoY3RybC4kdmlld1ZhbHVlKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdGFuZ3VsYXIubW9kdWxlKCdndW1nYS5kaXJlY3RpdmVzLmZvcm0ubWluLmRhdGUnLFtdKVxuXHQuZGlyZWN0aXZlKCdndW1nYU1pbkRhdGUnLE1pbkRhdGUpO1xufSkoKTtcbiIsIihmdW5jdGlvbigpe1xuXHQndXNlIHN0cmljdCc7XG4gIC8qKlxuICAgKiBAbmdkb2MgZGlyZWN0aXZlXG4gICAqIEBuYW1lIGd1bWdhLmNvcmU6Z3VtZ2FNaW5MZW5ndGhcbiAgICogQGVsZW1lbnQgaW5wdXRcbiAgICogQHJlc3RyaWN0IEFcbiAgICogQGRlc2NyaXB0aW9uIE8gY29tcG9uZW50ZSBHdW1nYU1pbkxlbmd0aCBzZXJ2ZSBwYXJhIHZhbGlkYXIgcXVhbnRpZGFkZXMgbcOtbmltYXMgZGUgY2FyYWN0ZXJlcyBlbSBlbnRyYWRhcyBkZSBmb3JtdWzDoXJpb3MuXG4gICAqIFxuICAgKiAjIyBOb3RhXG4gICAqIE8gdmFsb3IgZG8gYXRyaWJ1dG8vZGlyZXRpdmEgw6kgKipvYnJpZ2F0w7NyaW8qKiBlIGRldmUgc2VyIHVtICoqbsO6bWVybyoqLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiAgVW0gZXhlbXBsbyBkYSBkaXJlY3RpdmUgR3VtZ2FNaW5MZW5ndGggZnVuY2lvbmFuZG8gcG9kZSBzZXIgZW5jb250cmFkbyBbYXF1aV0oaHR0cDovL2VtYmVkLnBsbmtyLmNvL0VOWHltSDJEcmd3M01EUEo5ZGxpKS5cbiAgICogIDxwcmU+XG4gICAqICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIj5cbiAgICogICAgICA8aW5wdXQgdHlwZT1cImRhdGVcIiBuYW1lPVwibWluTGVuZ3RoXCIgbmctbW9kZWw9XCJtaW5MZW5ndGhcIiBndW1nYS1taW4tbGVuZ3RoPVwiMjBcIiBpZD1cIm1pbkxlbmd0aFwiPlxuICAgKiAgICAgIDxwIG5nLXNob3c9XCJteUZvcm0ubWluTGVuZ3RoLiRlcnJvci5taW5sZW5ndGhcIiBjbGFzcz1cInRleHQtZGFuZ2VyXCI+VGFtYW5obyBpbmZlcmlvciBhbyBlc3BlcmFkbzwvcD5cbiAgICogICAgPC9mb3JtPlxuICAgKiAgPC9wcmU+XG4gICovXG5cdE1pbkxlbmd0aC4kaW5qZWN0ID0gW107XG5cdGZ1bmN0aW9uIE1pbkxlbmd0aCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgIHJlcXVpcmU6ICduZ01vZGVsJyxcbiAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxtLCBhdHRyLCBjdHJsKSB7XG4gICAgICAgIGlmICghYXR0ci5ndW1nYU1pbkxlbmd0aCkge1xuICAgICAgICAgIHRocm93IFwiTyB2YWxvciBkYSBkaXJldGl2YSBndW1nYS1taW4tbGVuZ3RoIG7Do28gZm9pIGluZm9ybWFkby5cIjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdmFsaWRhdGVNaW5MZW5ndGggPSBmdW5jdGlvbiAoaW5wdXRWYWx1ZSkge1xuICAgICAgICAgIHZhciBpbnB1dCA9IChpbnB1dFZhbHVlID09IHVuZGVmaW5lZCkgPyAtMSA6IGlucHV0VmFsdWUubGVuZ3RoO1xuICAgICAgICAgIHZhciBtaW4gPSBhdHRyLmd1bWdhTWluTGVuZ3RoO1xuICAgICAgICAgIHZhciBpc1ZhbGlkID0gaW5wdXQgPj0gbWluO1xuICAgICAgICAgIGN0cmwuJHNldFZhbGlkaXR5KCdtaW5sZW5ndGgnLCBpc1ZhbGlkKTtcbiAgICAgICAgICByZXR1cm4gaW5wdXRWYWx1ZTtcbiAgICAgICAgfTtcblx0IFx0XHRcdGN0cmwuJHBhcnNlcnMudW5zaGlmdCh2YWxpZGF0ZU1pbkxlbmd0aCk7XG5cdCBcdFx0XHRjdHJsLiRmb3JtYXR0ZXJzLnB1c2godmFsaWRhdGVNaW5MZW5ndGgpO1xuXHQgXHRcdFx0YXR0ci4kb2JzZXJ2ZSgnZ3VtZ2FNaW5MZW5ndGgnLCBmdW5jdGlvbiAoKSB7XG5cdCBcdFx0XHRcdHZhbGlkYXRlTWluTGVuZ3RoKGN0cmwuJHZpZXdWYWx1ZSk7XG5cdCBcdFx0XHR9KTtcblx0IFx0XHR9XG5cdCBcdH1cblx0IH1cblx0IGFuZ3VsYXIubW9kdWxlKCdndW1nYS5kaXJlY3RpdmVzLmZvcm0ubWluLmxlbmd0aCcsW10pXG5cdCAuZGlyZWN0aXZlKCdndW1nYU1pbkxlbmd0aCcsTWluTGVuZ3RoKTtcblx0fSkoKTtcbiIsIihmdW5jdGlvbigpe1xuXHQndXNlIHN0cmljdCc7XG4gIC8qKlxuICAgKiBAbmdkb2MgZGlyZWN0aXZlXG4gICAqIEBuYW1lIGd1bWdhLmNvcmU6Z3VtZ2FNaW5OdW1iZXJcbiAgICogQGVsZW1lbnQgaW5wdXRcbiAgICogQHJlc3RyaWN0IEFcbiAgICogQGRlc2NyaXB0aW9uIE8gY29tcG9uZW50ZSBHdW1nYU1pbk51bWJlciBzZXJ2ZSBwYXJhIHZhbGlkYXIgbsO6bWVyb3MgbcOtbmltb3MgcGFyYSBlbnRyYWRhcyBlbSBmb3JtdWzDoXJpb3MuXG4gICAqXG4gICAqICMjIE5vdGFcbiAgICogRXN0YSBkaXJldGl2YSBzdXBvcnRhIGFwZW5hcyAqKmlucHV0cyoqIGRvIHRpcG8gKipudW1iZXIqKi4gTyB2YWxvciBkbyBhdHJpYnV0by9kaXJldGl2YSDDqSAqKm9icmlnYXTDs3JpbyoqIGUgZGV2ZSBzZXIgdW0gKipuw7ptZXJvKiouXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqICBVbSBleGVtcGxvIGRhIGRpcmVjdGl2ZSBHdW1nYU1pbk51bWJlciBmdW5jaW9uYW5kbyBwb2RlIHNlciBlbmNvbnRyYWRvIFthcXVpXShodHRwOi8vZW1iZWQucGxua3IuY28vR3NNeFk2UUZFUzFyUmt0RkNXc1gpLlxuICAgKiAgPHByZT5cbiAgICogICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiPlxuICAgKiAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgbmFtZT1cIm1pbk51bWJlclwiIG5nLW1vZGVsPVwibWluTnVtYmVyXCIgZ3VtZ2EtbWluLW51bWJlcj1cIjIwXCI+XG4gICAqICAgICAgPHAgbmctc2hvdz1cIm15Rm9ybS5taW5OdW1iZXIuJGVycm9yLm1pbm51bWJlclwiIGNsYXNzPVwidGV4dC1kYW5nZXJcIj5Ow7ptZXJvIGluZmVyaW9yIGFvIGVzcGVyYWRvPC9wPlxuICAgKiAgICA8L2Zvcm0+XG4gICAqICA8L3ByZT5cbiAgKi9cblx0IE1pbk51bWJlci4kaW5qZWN0ID0gW107XG5cdCBmdW5jdGlvbiBNaW5OdW1iZXIoKSB7XG5cdCBcdHJldHVybiB7XG5cdCBcdFx0cmVzdHJpY3Q6ICdBJyxcblx0IFx0XHRyZXF1aXJlOiAnbmdNb2RlbCcsXG5cdCBcdFx0bGluazogZnVuY3Rpb24gKHNjb3BlLCBlbG0sIGF0dHIsIGN0cmwpIHtcblx0IFx0XHRcdGlmIChhdHRyLnR5cGUgIT0gJ251bWJlcicpIHtcblx0IFx0XHRcdFx0dGhyb3cgJ0VzdGEgZGlyZXRpdmEgc3Vwb3J0YSBhcGVuYXMgaW5wdXRzIGRvIHRpcG8gbnVtYmVyJztcblx0IFx0XHRcdH1cblx0IFx0XHRcdGlmICghYXR0ci5ndW1nYU1pbk51bWJlcikge1xuXHQgXHRcdFx0XHR0aHJvdyBcIk8gdmFsb3IgZGEgZGlyZXRpdmEgZ3VtZ2EtbWluLW51bWJlciBuw6NvIGZvaSBpbmZvcm1hZG8uXCI7XG5cdCBcdFx0XHR9XG5cdCBcdFx0XHR2YXIgdmFsaWRhdGVNaW5OdW1iZXIgPSBmdW5jdGlvbiAoaW5wdXRWYWx1ZSkge1xuXHQgXHRcdFx0XHR2YXIgaW5wdXQgPSBwYXJzZUludChpbnB1dFZhbHVlKTtcblx0IFx0XHRcdFx0dmFyIG1pbiA9IHBhcnNlSW50KGF0dHIuZ3VtZ2FNaW5OdW1iZXIpO1xuXHQgXHRcdFx0XHR2YXIgaXNWYWxpZCA9IGlucHV0ID49IG1pbjtcblx0IFx0XHRcdFx0Y3RybC4kc2V0VmFsaWRpdHkoJ21pbm51bWJlcicsIGlzVmFsaWQpO1xuXHQgXHRcdFx0XHRyZXR1cm4gaW5wdXRWYWx1ZTtcblx0IFx0XHRcdH07XG5cdCBcdFx0XHRjdHJsLiRwYXJzZXJzLnVuc2hpZnQodmFsaWRhdGVNaW5OdW1iZXIpO1xuXHQgXHRcdFx0Y3RybC4kZm9ybWF0dGVycy5wdXNoKHZhbGlkYXRlTWluTnVtYmVyKTtcblx0IFx0XHRcdGF0dHIuJG9ic2VydmUoJ2d1bWdhTWluTnVtYmVyJywgZnVuY3Rpb24gKCkge1xuXHQgXHRcdFx0XHR2YWxpZGF0ZU1pbk51bWJlcihjdHJsLiR2aWV3VmFsdWUpO1xuXHQgXHRcdFx0fSk7XG5cdCBcdFx0fVxuXHQgXHR9XG5cdCB9XG5cdCBhbmd1bGFyLm1vZHVsZSgnZ3VtZ2EuZGlyZWN0aXZlcy5mb3JtLm1pbi5udW1iZXInLFtdKVxuXHQgLmRpcmVjdGl2ZSgnZ3VtZ2FNaW5OdW1iZXInLE1pbk51bWJlcik7XG5cdH0pKCk7XG4iLCIoZnVuY3Rpb24oKXtcblx0J3VzZSBzdHJpY3QnO1xuICAvKipcbiAgICogQG5nZG9jIGRpcmVjdGl2ZVxuICAgKiBAbmFtZSBndW1nYS5jb3JlOmd1bWdhUGF0dGVyblxuICAgKiBAZWxlbWVudCBpbnB1dFxuICAgKiBAcmVzdHJpY3QgQVxuICAgKiBAZGVzY3JpcHRpb24gTyBjb21wb25lbnRlIEd1bWdhUGF0dGVybiBzZXJ2ZSBwYXJhIHZhbGlkYXIgZXhwcmVzc8O1ZXMgcmVndWxhcmVzIGRlIGZvcm11bMOhcmlvcy5cbiAgICogXG4gICAqICMjIE5vdGFcbiAgICogTyB2YWxvciBkbyBhdHJpYnV0by9kaXJldGl2YSDDqSAqKm9icmlnYXTDs3JpbyoqIGUgZGV2ZSBzZXIgdW1hICoqZXhwcmVzc8OjbyByZWd1bGFyKiouXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqICBVbSBleGVtcGxvIGRhIGRpcmVjdGl2ZSBHdW1nYVBhdHRlcm4gZnVuY2lvbmFuZG8gcG9kZSBzZXIgZW5jb250cmFkbyBbYXF1aV0oaHR0cDovL2VtYmVkLnBsbmtyLmNvL3JZUkRIWUlXd2k1bno4WUt3R2F3KS5cbiAgICogIDxwcmU+XG4gICAqICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIj5cbiAgICogICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwiY2VwXCIgbmctbW9kZWw9XCJjZXBcIiBndW1nYS1wYXR0ZXJuPVwiKFxcZHs1fSlcXC0oXFxkezN9KVwiIGlkPVwiY2VwXCIgcGxhY2Vob2xkZXI9XCI5OTk5OS05OTlcIj5cbiAgICogICAgICA8cCBuZy1zaG93PVwibXlGb3JtLmNlcC4kZXJyb3IucGF0dGVyblwiIGNsYXNzPVwidGV4dC1kYW5nZXJcIj5FeHByZXNzw6NvIG7Do28gY29ycmVzcG9uZGUgY29tIG8gZm9ybWF0byBlc3BlcmFkbzwvcD5cbiAgICogICAgPC9mb3JtPlxuICAgKiAgPC9wcmU+XG4gICovXG5cdFBhdHRlcm4uJGluamVjdCA9IFtdO1xuICBmdW5jdGlvbiBQYXR0ZXJuKCkge1xuICAgIHJldHVybiB7XG5cdFx0XHRyZXN0cmljdDogJ0EnLFxuXHQgXHRcdHJlcXVpcmU6ICduZ01vZGVsJyxcbiAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxtLCBhdHRyLCBjdHJsKSB7XG5cdFx0XHRcdGlmICghYXR0ci5ndW1nYVBhdHRlcm4pIHtcblx0XHRcdFx0XHR0aHJvdyBcIk8gdmFsb3IgZGEgZGlyZXRpdmEgZ3VtZ2EtcGF0dGVybiBuw6NvIGZvaSBpbmZvcm1hZG8uXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0dmFyIHZhbGlkYXRlUGF0dGVybiA9IGZ1bmN0aW9uIChpbnB1dFZhbHVlKSB7XG5cdFx0XHRcdFx0dmFyIHJlZ2V4ID0gbmV3IFJlZ0V4cCgnXicgKyBhdHRyLmd1bWdhUGF0dGVybiArICckJyk7XG5cdFx0XHRcdFx0dmFyIGlzVmFsaWQgPSByZWdleC50ZXN0KGlucHV0VmFsdWUpO1xuXHRcdFx0XHRcdGN0cmwuJHNldFZhbGlkaXR5KCdwYXR0ZXJuJywgaXNWYWxpZCk7XG5cdFx0XHRcdFx0cmV0dXJuIGlucHV0VmFsdWU7XG5cdFx0XHRcdH07XG5cdFx0XHRcdGN0cmwuJHBhcnNlcnMudW5zaGlmdCh2YWxpZGF0ZVBhdHRlcm4pO1xuXHRcdFx0XHRjdHJsLiRmb3JtYXR0ZXJzLnB1c2godmFsaWRhdGVQYXR0ZXJuKTtcblx0XHRcdFx0YXR0ci4kb2JzZXJ2ZSgnZ3VtZ2FQYXR0ZXJuJywgZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdHZhbGlkYXRlUGF0dGVybihjdHJsLiR2aWV3VmFsdWUpO1xuXHRcdFx0XHR9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgYW5ndWxhci5tb2R1bGUoJ2d1bWdhLmRpcmVjdGl2ZXMuZm9ybS5wYXR0ZXJuJyxbXSlcbiAgLmRpcmVjdGl2ZSgnZ3VtZ2FQYXR0ZXJuJyxQYXR0ZXJuKTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24oKXtcblx0J3VzZSBzdHJpY3QnO1xuICAvKipcbiAgICogQG5nZG9jIGRpcmVjdGl2ZVxuICAgKiBAbmFtZSBndW1nYS5jb3JlOmd1bWdhUmFuZ2VEYXRlXG4gICAqIEByZXN0cmljdCBBXG4gICAqIEBlbGVtZW50IGlucHV0XG4gICAqIEBkZXNjcmlwdGlvblxuXHQgKiBPIGNvbXBvbmVudGUgR3VtZ2FSYW5nZURhdGUgc2VydmUgcGFyYSB2YWxpZGFyIGRhdGFzIG3DrW5pbWFzIGUgbcOheGltYXMgcGFyYSBlbnRyYWRhcyBlbSBmb3JtdWzDoXJpb3MgY29tIGNhbXBvcyBkbyB0aXBvIGRhdGUuXG4gICAqXG4gICAqICMjIE5vdGFcbiAgICogTyB2YWxvciBkbyBhdHJpYnV0by9kaXJldGl2YSDDqSAqKm9icmlnYXTDs3JpbyoqIGUgZGV2ZSBzZXIgdW0gKipvYmpldG8qKiBjb250ZW5kbyBkdWFzIHByb3ByaWVkYWRlcywgKiptaW4qKiBlICoqbWF4KiogXG4gICAqIGNvbSBvcyB2YWxvcmVzIGRlIHN1YXMgcmVzcGVjdGl2YXMgZGF0YXMgcGFyYSBleGVjdcOnw6NvIGRhIHZhbGlkYcOnw6NvIHJhbmdlLlxuICAgKlxuICAgKiAjIyBFeGVtcGxvXG4gICAqIFVtIGV4ZW1wbG8gZGEgZGlyZWN0aXZlIEd1bWdhUmFuZ2VEYXRlIGZ1bmNpb25hbmRvIHBvZGUgc2VyIGVuY29udHJhZG8gW2FxdWldKGh0dHA6Ly9lbWJlZC5wbG5rci5jby9PR3UydG9IVWk1cEJTUHg0RDVPVSkuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqICA8cHJlPlxuICAgKiAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCI+XG4gICAqICAgICAgPGlucHV0IHR5cGU9XCJkYXRlXCIgbmFtZT1cInJhbmdlRGF0ZVwiIG5nLW1vZGVsPVwicmFuZ2VEYXRlXCIgZ3VtZ2EtcmFuZ2UtZGF0ZT1cInttaW46ICcxOTg2LTEyLTI5JywgbWF4OiAnMjAxNS0wNy0yMCd9XCIgaWQ9XCJyYW5nZWRhdGVcIj5cbiAgICogICAgICA8cCBuZy1zaG93PVwibXlGb3JtLmNlcC4kZXJyb3IucmFuZ2VkYXRlXCIgY2xhc3M9XCJ0ZXh0LWRhbmdlclwiPkEgZGF0YSBpbmZvcm1hZGEgbsOjbyBlc3TDoSBlbnRyZSBvcyB2YWxvcmVzIGVzcGVyYWRvczwvcD5cbiAgICogICAgPC9mb3JtPlxuICAgKiAgPC9wcmU+XG5cdCAqL1xuXHQgUmFuZ2VEYXRlLiRpbmplY3QgPSBbXCIkZmlsdGVyXCJdO1xuXHQgZnVuY3Rpb24gUmFuZ2VEYXRlKCRmaWx0ZXIpIHtcblx0IFx0cmV0dXJuIHtcblx0IFx0XHRyZXN0cmljdDogJ0EnLFxuXHQgXHRcdHJlcXVpcmU6ICduZ01vZGVsJyxcblx0IFx0XHRsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsbSwgYXR0ciwgY3RybCkge1xuXHQgXHRcdFx0aWYgKGF0dHIudHlwZSAhPSAnZGF0ZScpIHtcblx0IFx0XHRcdFx0dGhyb3cgJ0VzdGEgZGlyZXRpdmEgc3Vwb3J0YSBhcGVuYXMgaW5wdXRzIGRvIHRpcG8gZGF0ZSc7XG5cdCBcdFx0XHR9XG5cdCBcdFx0XHRpZiAoIWF0dHIuZ3VtZ2FSYW5nZURhdGUpIHtcblx0IFx0XHRcdFx0dGhyb3cgXCJPIHZhbG9yIGRhIGRpcmV0aXZhIGd1bWdhLXJhbmdlLWRhdGUgbsOjbyBmb2kgaW5mb3JtYWRvLlwiO1xuXHQgXHRcdFx0fVxuICAgICAgICAvLyBpZiAoIUd1bWdhRGF0ZVNlcnZpY2UudmFsaWRhdGVGb3JtYXQoJ1lNRCcsIGF0dHIuZ3VtZ2FNYXhEYXRlKSkge1xuICAgICAgICAvLyAgIHRocm93ICdPIHZhbG9yIGRhIGRpcmV0aXZhIG7Do28gY29ycmVzcG9uZGUgYW8gZm9ybWF0byB5eXl5LW1tLWRkJztcbiAgICAgICAgLy8gfVxuICAgICAgICB2YXIgdmFsaWRhdGVSYW5nZURhdGUgPSBmdW5jdGlvbiAoaW5wdXRWYWx1ZSkge1xuICAgICAgICAgIHZhciBmb3JtYXQgPSAneXl5eS1NTS1kZCc7XG4gICAgICAgICAgdmFyIHJhbmdlID0gc2NvcGUuJGV2YWwoYXR0ci5ndW1nYVJhbmdlRGF0ZSk7XG4gICAgICAgIFx0dmFyIGlucHV0ID0gJGZpbHRlcignZGF0ZScpKGlucHV0VmFsdWUsIGZvcm1hdCk7XG4gICAgICAgICAgdmFyIG1pbiA9ICRmaWx0ZXIoJ2RhdGUnKShyYW5nZS5taW4sIGZvcm1hdCk7XG4gICAgICAgIFx0dmFyIG1heCA9ICRmaWx0ZXIoJ2RhdGUnKShyYW5nZS5tYXgsIGZvcm1hdCk7XG4gICAgICAgIFx0dmFyIGlzVmFsaWQgPSBpbnB1dCA+PSBtaW4gJiYgaW5wdXQgPD0gbWF4O1xuICAgICAgICBcdGN0cmwuJHNldFZhbGlkaXR5KCdyYW5nZWRhdGUnLCBpc1ZhbGlkKTtcbiAgICAgICAgXHRyZXR1cm4gaW5wdXRWYWx1ZTtcbiAgICAgICAgfTtcbiAgICAgICAgY3RybC4kcGFyc2Vycy51bnNoaWZ0KHZhbGlkYXRlUmFuZ2VEYXRlKTtcbiAgICAgICAgY3RybC4kZm9ybWF0dGVycy5wdXNoKHZhbGlkYXRlUmFuZ2VEYXRlKTtcbiAgICAgICAgYXR0ci4kb2JzZXJ2ZSgnZ3VtZ2FSYW5nZURhdGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIFx0dmFsaWRhdGVSYW5nZURhdGUoY3RybC4kdmlld1ZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGFuZ3VsYXIubW9kdWxlKCdndW1nYS5kaXJlY3RpdmVzLmZvcm0ucmFuZ2UuZGF0ZScsW10pXG4gIC5kaXJlY3RpdmUoJ2d1bWdhUmFuZ2VEYXRlJyxSYW5nZURhdGUpO1xufSkoKTtcbiIsIihmdW5jdGlvbigpe1xuXHQndXNlIHN0cmljdCc7XG4gIC8qKlxuICAgKiBAbmdkb2MgZGlyZWN0aXZlXG4gICAqIEBuYW1lIGd1bWdhLmNvcmU6Z3VtZ2FSYW5nZU51bWJlclxuICAgKiBAcmVzdHJpY3QgQVxuICAgKiBAZWxlbWVudCBpbnB1dFxuICAgKiBAZGVzY3JpcHRpb25cblx0ICogTyBjb21wb25lbnRlIEd1bWdhUmFuZ2VOdW1iZXIgc2VydmUgcGFyYSB2YWxpZGFyIG7Dum1lcm9zIG3DrW5pbW9zIGUgbcOheGltb3MgZW0gZW50cmFkYXMgZGUgZm9ybXVsw6FyaW9zIGNvbSBjYW1wb3MgZG8gdGlwbyBudW1iZXIuXG4gICAqXG4gICAqICMjIE5vdGFcbiAgICogTyB2YWxvciBkbyBhdHJpYnV0by9kaXJldGl2YSDDqSAqKm9icmlnYXTDs3JpbyoqIGUgZGV2ZSBzZXIgdW0gKipvYmpldG8qKiBjb250ZW5kbyBkdWFzIHByb3ByaWVkYWRlcywgKiptaW4qKiBlICoqbWF4KiogXG4gICAqIGNvbSBvcyB2YWxvcmVzIGRlIHN1YXMgcmVzcGVjdGl2YXMgZGF0YXMgcGFyYSBleGVjdcOnw6NvIGRhIHZhbGlkYcOnw6NvIHJhbmdlLlxuICAgKlxuICAgKiAjIyBFeGVtcGxvXG4gICAqIFVtIGV4ZW1wbG8gZGEgZGlyZWN0aXZlIEd1bWdhUmFuZ2VOdW1iZXIgZnVuY2lvbmFuZG8gcG9kZSBzZXIgZW5jb250cmFkbyBbYXF1aV0oaHR0cDovL2VtYmVkLnBsbmtyLmNvL3V1Nnd2em1XbFlnYzdUaEc0ajRmKS5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogIDxwcmU+XG4gICAqICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIj5cbiAgICogICAgICA8aW5wdXQgdHlwZT1cImRhdGVcIiBuYW1lPVwicmFuZ2VOdW1iZXJcIiBuZy1tb2RlbD1cInJhbmdlTnVtYmVyXCIgZ3VtZ2EtbnVtYmVyLWRhdGU9XCJ7bWluOiAwLCBtYXg6IDIwfVwiPlxuICAgKiAgICAgIDxwIG5nLXNob3c9XCJteUZvcm0ucmFuZ2VOdW1iZXIuJGVycm9yLnJhbmdlbnVtYmVyXCIgY2xhc3M9XCJ0ZXh0LWRhbmdlclwiPk8gbsO6bWVybyBpbmZvcm1hZG8gbsOjbyBlc3TDoSBlbnRyZSBvcyB2YWxvcmVzIGVzcGVyYWRvczwvcD5cbiAgICogICAgPC9mb3JtPlxuICAgKiAgPC9wcmU+XG5cdCAqL1xuXHQgUmFuZ2VOdW1iZXIuJGluamVjdCA9IFtdO1xuXHQgZnVuY3Rpb24gUmFuZ2VOdW1iZXIoKSB7XG5cdCBcdHJldHVybiB7XG5cdCBcdFx0cmVzdHJpY3Q6ICdBJyxcblx0IFx0XHRyZXF1aXJlOiAnbmdNb2RlbCcsXG5cdCBcdFx0bGluazogZnVuY3Rpb24gKHNjb3BlLCBlbG0sIGF0dHIsIGN0cmwpIHtcblx0IFx0XHRcdGlmIChhdHRyLnR5cGUgIT0gJ251bWJlcicpIHtcblx0IFx0XHRcdFx0dGhyb3cgJ0VzdGEgZGlyZXRpdmEgc3Vwb3J0YSBhcGVuYXMgaW5wdXRzIGRvIHRpcG8gbnVtYmVyJztcblx0IFx0XHRcdH1cblx0IFx0XHRcdGlmICghYXR0ci5ndW1nYVJhbmdlTnVtYmVyKSB7XG5cdCBcdFx0XHRcdHRocm93IFwiTyB2YWxvciBkYSBkaXJldGl2YSBndW1nYS1yYW5nZS1udW1iZXIgbsOjbyBmb2kgaW5mb3JtYWRvLlwiO1xuXHQgXHRcdFx0fVxuXHQgXHRcdFx0dmFyIHZhbGlkYXRlUmFuZ2VOdW1iZXIgPSBmdW5jdGlvbiAoaW5wdXRWYWx1ZSkge1xuICAgICAgICAgIHZhciByYW5nZSA9IHNjb3BlLiRldmFsKGF0dHIuZ3VtZ2FSYW5nZU51bWJlcik7XG4gICAgICAgICAgdmFyIGlucHV0ID0gcGFyc2VJbnQoaW5wdXRWYWx1ZSk7XG4gICAgICAgICAgdmFyIGlzVmFsaWQgPSBpbnB1dCA+PSByYW5nZS5taW4gJiYgaW5wdXQgPD0gcmFuZ2UubWF4O1xuICAgICAgICAgIGN0cmwuJHNldFZhbGlkaXR5KCdyYW5nZW51bWJlcicsIGlzVmFsaWQpO1xuXHQgXHRcdFx0XHRyZXR1cm4gaW5wdXRWYWx1ZTtcblx0IFx0XHRcdH07XG5cdCBcdFx0XHRjdHJsLiRwYXJzZXJzLnVuc2hpZnQodmFsaWRhdGVSYW5nZU51bWJlcik7XG5cdCBcdFx0XHRjdHJsLiRmb3JtYXR0ZXJzLnB1c2godmFsaWRhdGVSYW5nZU51bWJlcik7XG5cdCBcdFx0XHRhdHRyLiRvYnNlcnZlKCdndW1nYVJhbmdlTnVtYmVyJywgZnVuY3Rpb24gKCkge1xuXHQgXHRcdFx0XHR2YWxpZGF0ZVJhbmdlTnVtYmVyKGN0cmwuJHZpZXdWYWx1ZSk7XG5cdCBcdFx0XHR9KTtcblx0IFx0XHR9XG5cdCBcdH1cblx0IH1cblx0IGFuZ3VsYXIubW9kdWxlKCdndW1nYS5kaXJlY3RpdmVzLmZvcm0ucmFuZ2UubnVtYmVyJyxbXSlcblx0IC5kaXJlY3RpdmUoJ2d1bWdhUmFuZ2VOdW1iZXInLFJhbmdlTnVtYmVyKTtcblx0fSkoKTtcbiIsIihmdW5jdGlvbigpe1xuICAndXNlIHN0cmljdCc7XG4gIC8qKlxuICAgKiBAbmdkb2MgZGlyZWN0aXZlXG4gICAqIEBuYW1lIGd1bWdhLmNvcmU6Z3VtZ2FSZXF1aXJlZFxuICAgKiBAcmVzdHJpY3QgQVxuICAgKiBAZWxlbWVudCBBTllcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIE8gY29tcG9uZW50ZSBHdW1nYVJlcXVpcmVkIHNlcnZlIHBhcmEgdmFsaWRhciBjYW1wb3Mgb2JyaWdhdMOzcmlvcy5cbiAgICpcbiAgICogIyMgRXhlbXBsb1xuICAgKiBVbSBleGVtcGxvIGRhIGRpcmVjdGl2ZSBHdW1nYVJlcXVpcmVkIGZ1bmNpb25hbmRvIHBvZGUgc2VyIGVuY29udHJhZG8gW2FxdWldKGh0dHA6Ly9lbWJlZC5wbG5rci5jby9pem5qallrZzN0akdTVkg1TEFPcykuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqICA8cHJlPlxuICAgKiAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCI+XG4gICAqICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cInJlcXVpcmVkXCIgbmctbW9kZWw9XCJyZXF1aXJlZFwiIGd1bWdhLXJlcXVpcmVkPlxuICAgKiAgICAgIDxwIG5nLXNob3c9XCJteUZvcm0ucmVxdWlyZWQuJGVycm9yLnJlcXVpcmVkXCIgY2xhc3M9XCJ0ZXh0LWRhbmdlclwiPkNhbXBvIG9icmlnYXTDs3JpbzwvcD5cbiAgICogICAgPC9mb3JtPlxuICAgKiAgPC9wcmU+XG4gICAqL1xuICBSZXF1aXJlZC4kaW5qZWN0ID0gW107XG4gIGZ1bmN0aW9uIFJlcXVpcmVkKCkge1xuICAgIHJldHVybiB7XG4gICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgcmVxdWlyZTogJ25nTW9kZWwnLFxuICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbG0sIGF0dHIsIGN0cmwpIHtcbiAgICAgICAgYXR0ci5yZXF1aXJlZCA9IHRydWU7XG4gICAgICAgIGN0cmwuJHZhbGlkYXRvcnMucmVxdWlyZWQgPSBmdW5jdGlvbihtb2RlbFZhbHVlLCB2aWV3VmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gIWF0dHIucmVxdWlyZWQgfHwgIWN0cmwuJGlzRW1wdHkodmlld1ZhbHVlKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgYW5ndWxhci5tb2R1bGUoJ2d1bWdhLmRpcmVjdGl2ZXMuZm9ybS5yZXF1aXJlZCcsW10pXG4gIC5kaXJlY3RpdmUoJ2d1bWdhUmVxdWlyZWQnLFJlcXVpcmVkKTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24oKXtcblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0QWR2YW5jZWRMYWJlbC4kaW5qZWN0ID0gW107XG5cdGZ1bmN0aW9uIEFkdmFuY2VkTGFiZWwoKXtcblx0XHR2YXIgdGVtcGxhdGUgPVxuXHRcdCc8ZGl2IGNsYXNzPVwiYnRuLWdyb3VwXCI+JyArXG5cdFx0JyAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLWRlZmF1bHQgYnRuLXhzXCIgaWQ9XCJidG57e2F0dHJ9fVwiIG5nLWNsaWNrPVwib3JPckFuZCh2YWx1ZSlcIj48c3Ryb25nPnt7YXR0cn19PC9zdHJvbmc+IHt7aHFsfX0gPHN0cm9uZz57e3ZhbHVlfX08L3N0cm9uZz48L2J1dHRvbj4nICtcblx0XHQnICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tZGVmYXVsdCBidG4teHNcIiBuZy1jbGljaz1cImVtaXREZWxldGUoKVwiIG5nLWlmPVwiZ2V0VmlzaWJpbGl0eSh2YWx1ZSlcIj48c3BhbiBhcmlhLWhpZGRlbj1cInRydWVcIj4mdGltZXM7PC9zcGFuPjwvYnV0dG9uPicgK1xuXHRcdCc8L2Rpdj4nO1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHJlc3RyaWN0OiAnRScsXG5cdFx0XHR0ZW1wbGF0ZTogdGVtcGxhdGUsXG5cdFx0XHRzY29wZToge1xuXHRcdFx0XHRhdHRyOiAnQCcsXG5cdFx0XHRcdGhxbDogJ0AnLFxuXHRcdFx0XHR2YWx1ZTogJz0nLFxuXHRcdFx0XHRpbmRleDogJz0nXG5cdFx0XHR9LFxuXHRcdFx0bGluazogZnVuY3Rpb24oc2NvcGUsJGVsbSwkYXR0cnMpe1xuXHRcdFx0XHRzY29wZS5ib2wgPSBmYWxzZTtcblxuXHRcdFx0XHRzY29wZS5vck9yQW5kID0gZnVuY3Rpb24oKXtcblxuXHRcdFx0XHRcdGlmKHR5cGVvZiBzY29wZS52YWx1ZSA9PT0gJ3N0cmluZycgJiYgc2NvcGUudmFsdWUudG9VcHBlckNhc2UoKSA9PT0gJ09SJyAmJiAhc2NvcGUuaHFsKXtcblx0XHRcdFx0XHRcdHNjb3BlLnZhbHVlID0gJ0FORCc7XG5cdFx0XHRcdFx0fSAgIGVsc2UgIGlmKHNjb3BlLnZhbHVlLnRvVXBwZXJDYXNlKCkgPT09ICdBTkQnICYmICFzY29wZS5ocWwpe1xuXHRcdFx0XHRcdFx0c2NvcGUudmFsdWUgPSAnT1InO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblxuXHRcdFx0XHRzY29wZS5lbWl0RGVsZXRlID0gZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRzY29wZS4kZW1pdCgnZGVsZXRlcGxzJyxzY29wZS5pbmRleCk7XG5cdFx0XHRcdH07XG5cblxuXHRcdFx0XHRzY29wZS5nZXRWaXNpYmlsaXR5ID0gZnVuY3Rpb24odmFsKXtcblx0XHRcdFx0XHRyZXR1cm4gISh2YWwgPT0gJ0FORCcgfHwgdmFsID09ICdPUicpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXHRhbmd1bGFyLm1vZHVsZSgnZ3VtZ2EuZGlyZWN0aXZlcy5zZWFyY2guYWR2YW5jZWRsYWJlbCcsW10pXG5cdC5kaXJlY3RpdmUoJ2d1bWdhQWR2YW5jZWRMYWJlbCcsQWR2YW5jZWRMYWJlbClcbn0pKCk7IiwiKGZ1bmN0aW9uKCl7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHRBZHZhbmNlZFNlYXJjaC4kaW5qZWN0ID0gW1wiR3VtZ2FTZWFyY2hIZWxwZXJcIl07XG5cdGZ1bmN0aW9uIEFkdmFuY2VkU2VhcmNoKEd1bWdhU2VhcmNoSGVscGVyKXtcblx0XHR2YXIgdGVtcGxhdGUgPVxuXHRcdCcgICA8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXBcIj4nICtcblx0XHQnICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwic2VhcmNoSW5wdXRUZXh0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBuZy1kaXNhYmxlZD1cImlzUGFuZWxPcGVuXCIgaWQ9XCJ0ZXh0TWFpblwiLz4gJyArXG5cdFx0JyAgICAgICA8c3BhbiBjbGFzcz1cImlucHV0LWdyb3VwLWJ0blwiPicgK1xuXHRcdCcgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJteS1idXR0b24gYnRuLWRlZmF1bHRcIiBuZy1jbGljaz1cInNob3dMaXR0bGVQYW5lbCA9ICFzaG93TGl0dGxlUGFuZWxcIj48c3BhbiBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi1kb3duXCI+PC9zcGFuPjwvYnV0dG9uPicgK1xuXHRcdCcgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJteS1idXR0b24gYnRuLWRlZmF1bHRcIiB0eXBlPVwiYnV0dG9uXCIgbmctY2xpY2s9XCJpc1BhbmVsT3BlbiA9ICFpc1BhbmVsT3BlblwiPjxzcGFuIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1maWx0ZXJcIj48L3NwYW4+JyArXG5cdFx0JyAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cIm15LWJ1dHRvbiBidG4tcHJpbWFyeSBsYXN0XCIgdHlwZT1cImJ1dHRvblwiIG5nLWRpc2FibGVkPVwiaXNQYW5lbE9wZW5cIiBuZy1jbGljaz1cImRvU2VhcmNoKHNlYXJjaElucHV0VGV4dClcIj5TZWFyY2ggPHNwYW4gY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLXNlYXJjaFwiPjwvc3Bhbj4nICtcblx0XHQnICAgICAgIDwvc3Bhbj4nICtcblx0XHQnICAgPC9kaXY+JyArXG5cdFx0JyAgIDxkaXYgY2xhc3M9XCJwYW5lbC1hZHZhbmNlZFwiIG5nLXNob3c9XCJpc1BhbmVsT3BlblwiPicgK1xuXHRcdCcgICAgICAgPGRpdiBjbGFzcz1cInBhbmVsLWJvZHlcIj4nICtcblx0XHQnICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTNcIj4nICtcblx0XHQnICAgICAgICAgICA8aDMgc3R5bGU9XCJtYXJnaW4tdG9wOiAwO21hcmdpbi1ib3R0b206IDBcIj48c21hbGw+QWR2YW5jZWQgU2VhcmNoPC9zbWFsbD48L2gzPicgK1xuXHRcdCcgICAgICAgICAgIDwvZGl2PicgK1xuXHRcdCcgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWlubGluZSBjb2wtbWQtOVwiPicgK1xuXHRcdCcgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPicgK1xuXHRcdCcgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImxpc3QtaG9sZGVyXCI+JyArXG5cdFx0JyAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz1cImxpc3Qtc2VsZWN0YWJsZVwiIG5nLXNob3c9XCJzZWxlY3RBdHRyaWJ1dGVcIj5cXG4nICtcblx0XHQnICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBuZy1yZXBlYXQ9XCJhdHRyIGluIGF0dHJpYnV0ZXNcIiBuZy1jbGljaz1cImF0dHJpYnV0ZUhhc0NoYW5nZWQoYXR0cilcIiBjbGFzcz1cImhvdmVyLWxpc3RcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1saW5rXCI+e3thdHRyLm5hbWV9fTwvYnV0dG9uPjwvbGk+XFxuJyArXG5cdFx0JyAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+XFxuJyArXG5cdFx0JyAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+JyArXG5cdFx0JyAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPWJ1dHRvbiBjbGFzcz1cImJ0biBidG4tZGVmYXVsdFwiIG5nLWNsaWNrPVwic2VsZWN0QXR0cmlidXRlID0gIXNlbGVjdEF0dHJpYnV0ZVwiID57e3F1ZXJ5LmF0dHJpYnV0ZS5uYW1lIHx8IFxcJ0F0dHJpYnV0ZVxcJ319PHNwYW4gY2xhc3M9XCJjYXJldFwiPjwvc3Bhbj48L2J1dHRvbj4nICtcblx0XHQnICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJsaXN0LWhvbGRlclwiPicgK1xuXHRcdCcgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9XCJsaXN0LXNlbGVjdGFibGVcIiBuZy1zaG93PVwic2VsZWN0SFFMXCI+XFxuJyArXG5cdFx0JyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgbmctcmVwZWF0PVwib3B0IGluIGhxbE9wdHNcIiBjbGFzcz1cImhvdmVyLWxpc3RcIiBuZy1jbGljaz1cImhhbmRsZUhxbE9wdGlvbihvcHQpXCI+PGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tbGlua1wiID57e29wdC5sYWJlbH19PC9idXR0b24+PC9saT5cXG4nICtcblx0XHQnICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD5cXG4nICtcblx0XHQnICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4nICtcblx0XHQnICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tZGVmYXVsdFwiIG5nLWNsaWNrPVwic2VsZWN0SFFMID0gIXNlbGVjdEhRTFwiPiB7eyBxdWVyeS5ocWwubGFiZWwgfHwgXFwnSFFMXFwnICB9fSA8c3BhbiBjbGFzcz1cImNhcmV0XCI+PC9zcGFuPjwvYnV0dG9uPiAgJytcblx0XHQnICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwie3t0eXBlSW5wdXR9fVwiIGNsYXNzPVwiZm9ybS1jb250cm9sIGNvbC14LTNcIiBuZy1tb2RlbD1cInF1ZXJ5LnZhbHVlXCIgaWQ9XCJzZWxlY3RhYmxlQWR2YW5jZWRWYWx1ZVwiIG5nLWluaXQ9XCJpbnB1dCA9IHRoaXNcIi8+JyArXG5cdFx0JyAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tZGVmYXVsdFwiIG5nLWNsaWNrPVwiYWRkUXVlcnkocXVlcnkpXCIgbmctZGlzYWJsZWQ9XCJxdWVyeS52YWx1ZS5sZW5ndGggPiAwID8gZmFsc2UgOiB0cnVlXCI+PHNwYW4gY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLXBsdXNcIj48L3NwYW4+PC9idXR0b24+JyArXG5cdFx0JyAgICAgICAgICAgICAgIDwvZGl2PicgK1xuXHRcdCcgICAgICAgICAgIDwvZGl2PicgK1xuXHRcdCcgICAgICAgPC9kaXY+Jytcblx0XHQnICAgICAgICAgICA8aHIvPicgK1xuXHRcdCcgICAgICAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMlwiIHN0eWxlPVwicGFkZGluZy1ib3R0b206IDIlXCI+JyArXG5cdFx0JyAgICAgICA8Z3VtZ2EtYWR2YW5jZWQtbGFiZWwgbmctcmVwZWF0PVwicXVlcnkgaW4gcXVlcmllc1wiIGF0dHI9XCJ7e3F1ZXJ5LmF0dHJpYnV0ZS5uYW1lfX1cIiBocWw9XCJ7e3F1ZXJ5LmhxbC5sYWJlbH19XCIgdmFsdWU9XCJxdWVyeS52YWx1ZVwiIGluZGV4PVwiJGluZGV4XCIgc3R5bGU9XCJtYXJnaW4tcmlnaHQ6IDElXCI+PC9ndW1nYS1hZHZhbmNlZC1sYWJlbD4nICtcblx0XHQnICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTJcIiBzdHlsZT1cIm1hcmdpbi10b3A6IDElO1wiPicgK1xuXHRcdCcgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeSBwdWxsLXJpZ2h0XCIgdHlwZT1cImJ1dHRvblwiIG5nLWRpc2FibGVkPVwicXVlcmllcy5sZW5ndGggPT0gMFwiIG5nLWNsaWNrPVwic2hvd0FycmF5KHF1ZXJpZXMpXCI+QWR2YW5jZWQgU2VhcmNoPHNwYW4gY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLXNlYXJjaFwiPjwvc3Bhbj4nICtcblx0XHQnICAgICAgIDwvZGl2PicgK1xuXHRcdCcgICAgICAgPC9kaXY+JyArXG5cdFx0JyAgICAgICA8ZGl2IGNsYXNzPVwiY2xlYXJmaXhcIiBzdHlsZT1cIm1hcmdpbi1ib3R0b206IDIlXCI+PC9kaXY+JyArXG5cdFx0JyAgIDwvZGl2PicgK1xuXHRcdCc8ZGl2IGNsYXNzPVwibGl0dGxlLXBhbmVsXCIgbmctc2hvdz1cInNob3dMaXR0bGVQYW5lbFwiPicgK1xuXHRcdCcgICA8ZGl2IGNsYXNzPVwicGFuZWwtYm9keVwiPicgK1xuXHRcdCcgICAgICAgPGxhYmVsIG5nLXJlcGVhdD1cImZpZWxkIGluIG5vcm1hbEZpZWxkc1wiIHN0eWxlPVwiZGlzcGxheTogYmxvY2tcIiA+PGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwibW9kZWxzW2ZpZWxkLnZhbHVlXVwiIHN0eWxlPVwibWFyZ2luLXJpZ2h0OiAxJVwiID48c3Bhbj57e2ZpZWxkLnZhbHVlfX08L3NwYW4+PC9sYWJlbD4nICtcblx0XHQnICAgPC9kaXY+JyArXG5cdFx0JzwvZGl2Pic7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHJlc3RyaWN0OiAnRScsXG5cdFx0XHR0ZW1wbGF0ZTogdGVtcGxhdGUsXG5cdFx0XHRzY29wZTogZmFsc2UsXG5cdFx0XHRyZXF1aXJlOiAnXj9ndW1nYVNlYXJjaCcsXG5cdFx0XHRsaW5rOiBmdW5jdGlvbihzY29wZSxlbG0sYXR0cnMsY3RybCl7XG5cdFx0XHRcdHNjb3BlLmlzUGFuZWxPcGVuID0gZmFsc2U7XG5cdFx0XHRcdHNjb3BlLnNlbGVjdEhRTCA9IGZhbHNlO1xuXHRcdFx0XHRzY29wZS5tb2RlbHMgPSB7fTtcblx0XHRcdFx0c2NvcGUuc2VhcmNoRmllbGQgPSAnJztcblx0XHRcdFx0c2NvcGUudHJhbnNsYXRlID0gc2NvcGUuJHBhcmVudC5lbnRpdHlUb1RyYW5zbGF0ZTtcblxuXHRcdFx0XHRzY29wZS4kb24oJ19kb1NlYXJjaCcsZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRpZihzY29wZS5xdWVyaWVzLmxlbmd0aCAhPSAwKXtcblx0XHRcdFx0XHRcdHNjb3BlLnNob3dBcnJheShzY29wZS5xdWVyaWVzKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0aWYoc2NvcGUuc2VhcmNoSW5wdXRUZXh0KXtcblx0XHRcdFx0XHRcdFx0c2NvcGUuZG9TZWFyY2goc2NvcGUuc2VhcmNoSW5wdXRUZXh0KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdHNjb3BlLiRvbignX2ZvY3VzJyxmdW5jdGlvbigpe1xuXHRcdFx0XHRcdGlmKHNjb3BlLmlzUGFuZWxPcGVuKXtcblx0XHRcdFx0XHRcdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZWxlY3RhYmxlQWR2YW5jZWRWYWx1ZScpLmZvY3VzKCk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0ZXh0TWFpbicpLmZvY3VzKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblxuXG5cblx0XHRcdFx0aWYoIXNjb3BlLiRwYXJlbnQubm9ybWFsRmllbGRzLmxlbmd0aCA+IDAgfHwgIXNjb3BlLiRwYXJlbnQuZW50aXR5VG9UcmFuc2xhdGUpe1xuXHRcdFx0XHRcdHRocm93ICdNaXNzaW5nIHNvbWUgcGFyYW1ldGVycyBpbiBHdW1nYVNlYXJjaCc7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzY29wZS5ub3JtYWxGaWVsZHMgPSBzY29wZS4kcGFyZW50Lm5vcm1hbEZpZWxkcy5tYXAoZnVuY3Rpb24oZWxtLCRpbmRleCl7XG5cdFx0XHRcdFx0c2NvcGUubW9kZWxzW2VsbV0gPSBmYWxzZTtcblx0XHRcdFx0XHQkaW5kZXggPT0gMCAmJiAoc2NvcGUubW9kZWxzW2VsbV0gPSB0cnVlKTtcblx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0bmFtZTogZWxtLnNsaWNlKDAsMSkudG9VcHBlckNhc2UoKSArIGVsbS5zbGljZSgxLGVsbS5sZW5ndGgpLnRvTG93ZXJDYXNlKCksXG5cdFx0XHRcdFx0XHR2YWx1ZTogZWxtXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fSk7XG5cblxuXHRcdFx0XHRzY29wZS4kb24oJ3Nob3dQYW5lbCcsZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRzY29wZS5pc1BhbmVsT3BlbiA9ICFzY29wZS5pc1BhbmVsT3Blbjtcblx0XHRcdFx0XHRzY29wZS4kYXBwbHkoKTtcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0c2NvcGUubW9kZWxzLnJldHVyblN0cmluZyA9IGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0dmFyIHR4dCA9ICcnO1xuXHRcdFx0XHRcdGZvcih2YXIga2V5IGluIHRoaXMpIGlmKHRoaXMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiBrZXkgIT0gJ3JldHVyblN0cmluZycgJiYgdGhpc1trZXldKXtcblx0XHRcdFx0XHRcdHR4dCArPSBrZXkgKyAnLCc7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmKHR4dC5sZW5ndGggPT0gMCl7XG5cdFx0XHRcdFx0XHRyZXR1cm4gc2NvcGUubm9ybWFsRmllbGRzWzBdLnZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdHh0LnNsaWNlKDAsLTEpO1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdHNjb3BlLiR3YXRjaCgnaXNQYW5lbE9wZW4nLGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0aWYoc2NvcGUuaXNQYW5lbE9wZW4gPT09IHRydWUpe1xuXHRcdFx0XHRcdFx0c2NvcGUuc2VsZWN0QXR0cmlidXRlID0gdHJ1ZTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c2NvcGUucXVlcmllcyA9IFtdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRzY29wZS5xdWVyeSA9IHt9O1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0c2NvcGUuYXR0cmlidXRlcyA9IHNjb3BlLiRwYXJlbnQuYXR0cmlidXRlcztcblx0XHRcdFx0c2NvcGUuaHFsT3B0cyA9IFtdO1xuXHRcdFx0XHRzY29wZS5xdWVyaWVzID0gW107XG5cblx0XHRcdFx0c2NvcGUuYXR0cmlidXRlSGFzQ2hhbmdlZCA9IGZ1bmN0aW9uKGF0dHJpYnV0ZSkge1xuXHRcdFx0XHRcdHNjb3BlLnF1ZXJ5LmF0dHJpYnV0ZSA9IGF0dHJpYnV0ZTtcblx0XHRcdFx0XHRpZihhdHRyaWJ1dGUudHlwZSA9PT0gJ2RhdGUnKXtcblx0XHRcdFx0XHRcdHNjb3BlLnR5cGVJbnB1dCA9ICdkYXRlJztcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c2NvcGUudHlwZUlucHV0ID0gJ3RleHQnO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRzY29wZS5ocWxPcHRzID0gR3VtZ2FTZWFyY2hIZWxwZXIuZ2V0VHlwZUxpc3RPZkhRTFBvc3NpYmlsaXRpZXMoYXR0cmlidXRlLnR5cGUpO1xuXHRcdFx0XHRcdHNjb3BlLnNlbGVjdEhRTCA9IHRydWUgO1xuXHRcdFx0XHRcdHNjb3BlLnNlbGVjdEF0dHJpYnV0ZSA9IGZhbHNlO1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdHNjb3BlLmhhbmRsZUhxbE9wdGlvbiA9IGZ1bmN0aW9uKGhxKXtcblx0XHRcdFx0XHRzY29wZS5xdWVyeS5ocWwgPSBocTtcblx0XHRcdFx0XHQvLyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2VsZWN0YWJsZUFkdmFuY2VkVmFsdWUnKS5mb2N1cygpO1xuXHRcdFx0XHRcdHNjb3BlLnNlbGVjdEhRTCA9IGZhbHNlO1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2VsZWN0YWJsZUFkdmFuY2VkVmFsdWUnKSlcblx0XHRcdFx0Lm9uKCdrZXlkb3duJyxmdW5jdGlvbihldil7XG5cdFx0XHRcdFx0aWYoZXYua2V5Q29kZSA9PSAxMyAmJiBldi50YXJnZXQudmFsdWUubGVuZ3RoID4gMCl7XG5cdFx0XHRcdFx0XHRzY29wZS5hZGRRdWVyeShzY29wZS5xdWVyeSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHNjb3BlLiRhcHBseSgpO1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RleHRNYWluJykpXG5cdFx0XHRcdC5vbigna2V5ZG93bicsZnVuY3Rpb24oZXYpe1xuXHRcdFx0XHRcdGlmKGV2LmtleUNvZGUgPT0gMTMgJiYgZXYudGFyZ2V0LnZhbHVlLmxlbmd0aCA+IDApe1xuXHRcdFx0XHRcdFx0c2NvcGUuJGVtaXQoJ25vcm1hbCcse2ZpZWxkOiBzY29wZS5tb2RlbHMucmV0dXJuU3RyaW5nKCkscGFyYW06c2NvcGUuc2VhcmNoSW5wdXRUZXh0IHx8ICcnfSk7XG5cdFx0XHRcdFx0XHRpZihzY29wZS5zaG93TGl0dGxlUGFuZWwpe1xuXHRcdFx0XHRcdFx0XHRzY29wZS5zaG93TGl0dGxlUGFuZWwgPSAhc2NvcGUuc2hvd0xpdHRsZVBhbmVsO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0c2NvcGUuYWRkUXVlcnkgPSBmdW5jdGlvbihxdWVyeSl7XG5cdFx0XHRcdFx0aWYoc2NvcGUucXVlcmllcy5sZW5ndGggPT09IDApe1xuXHRcdFx0XHRcdFx0c2NvcGUucXVlcmllcy5wdXNoKHF1ZXJ5KTtcblx0XHRcdFx0XHR9IGVsc2UgaWYoc2NvcGUucXVlcmllcy5sZW5ndGggPj0gMSl7XG5cdFx0XHRcdFx0XHRzY29wZS5xdWVyaWVzLnNwbGljZShzY29wZS5xdWVyaWVzLmxlbmd0aCwxLHt2YWx1ZTogJ0FORCd9LHF1ZXJ5KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0c2NvcGUucXVlcnkgPSB7fTtcblx0XHRcdFx0XHRzY29wZS50eXBlSW5wdXQgPSAndGV4dCc7XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0c2NvcGUuJG9uKCdkZWxldGVwbHMnLGZ1bmN0aW9uKGV2LGRhdGEpe1xuXHRcdFx0XHRcdHNjb3BlLnF1ZXJpZXMuc3BsaWNlKGRhdGEsMSk7XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdHNjb3BlLnNob3dBcnJheSA9IGZ1bmN0aW9uKGFycmF5KXtcblx0XHRcdFx0XHRzY29wZS5pc1BhbmVsT3BlbiA9IGZhbHNlO1xuXHRcdFx0XHRcdHNjb3BlLiRlbWl0KCdhZHZhbmNlZCcsR3VtZ2FTZWFyY2hIZWxwZXIudHJhbnNsYXRlQXJyYXlUb0hRTChhcnJheSkpO1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdHNjb3BlLmRvU2VhcmNoID0gZnVuY3Rpb24odHh0KXtcblx0XHRcdFx0XHRzY29wZS4kZW1pdCgnbm9ybWFsJyx7ZmllbGQ6IHNjb3BlLm1vZGVscy5yZXR1cm5TdHJpbmcoKSxwYXJhbTp0eHQgfHwgJyd9KTtcblx0XHRcdFx0XHRzY29wZS5zZWFyY2hJbnB1dFRleHQgPSAnJztcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHR9O1xuXHR9XG5cdGFuZ3VsYXIubW9kdWxlKCdndW1nYS5kaXJlY3RpdmVzLnNlYXJjaC5hZHZhbmNlZHNlYXJjaCcsWydndW1nYS5kaXJlY3RpdmVzLnNlYXJjaC5zZWFyY2hoZWxwZXInXSlcblx0LmRpcmVjdGl2ZSgnZ3VtZ2FBZHZhbmNlZFNlYXJjaCcsQWR2YW5jZWRTZWFyY2gpXG59KSgpO1xuIiwiKGZ1bmN0aW9uKCl7XG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE5vcm1hbFNlYXJjaC4kaW5qZWN0ID0gW107XG5cdGZ1bmN0aW9uIE5vcm1hbFNlYXJjaCgpe1xuXHRcdHZhciB0ZW1wbGF0ZSA9XG5cdFx0JzxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cFwiPicgK1xuXHRcdCcgICA8aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIG5nLW1vZGVsPVwic2VhcmNoRmllbGRcIiBwbGFjZWhvbGRlcj1cIlNlYXJjaFwiLz4nICtcblx0XHQnICAgPHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC1idG5cIj4nICtcblx0XHQnICAgICAgIDxidXR0b24gY2xhc3M9XCJteS1idXR0b24gYnRuLWRlZmF1bHRcIiBuZy1jbGljaz1cInNob3dMaXR0bGVQYW5lbCA9ICFzaG93TGl0dGxlUGFuZWxcIj48c3BhbiBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi1kb3duXCI+PC9zcGFuPjwvYnV0dG9uPicgK1xuXHRcdCcgICAgICAgPGJ1dHRvbiBjbGFzcz1cIm15LWJ1dHRvbiBidG4tcHJpbWFyeSBsYXN0XCIgdHlwZT1cImJ1dHRvblwiIG5nLWRpc2FibGVkPVwiIXNlYXJjaEZpZWxkXCIgbmctY2xpY2s9XCJkb1NlYXJjaChzZWFyY2hGaWVsZClcIiA+U2VhcmNoIDxzcGFuIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1zZWFyY2hcIj48L3NwYW4+PC9idXR0b24+JyArXG5cdFx0JyAgIDwvc3Bhbj4nICtcblx0XHQnPC9kaXY+JyArXG5cdFx0JzxkaXYgY2xhc3M9XCJsaXR0bGUtcGFuZWxcIiBuZy1zaG93PVwic2hvd0xpdHRsZVBhbmVsXCI+JyArXG5cdFx0JyAgIDxkaXYgY2xhc3M9XCJwYW5lbC1ib2R5XCI+JyArXG5cdFx0JyAgICAgICA8bGFiZWwgbmctcmVwZWF0PVwiZmllbGQgaW4gbm9ybWFsRmllbGRzXCIgc3R5bGU9XCJkaXNwbGF5OiBibG9ja1wiID48aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJtb2RlbHNbZmllbGQudmFsdWVdXCIgc3R5bGU9XCJtYXJnaW4tcmlnaHQ6IDElXCIgPjxzcGFuPnt7ZmllbGQudmFsdWV9fTwvc3Bhbj48L2xhYmVsPicgK1xuXHRcdCcgICA8L2Rpdj4nICtcblx0XHQnPC9kaXY+Jztcblx0XHRyZXR1cm4ge1xuXHRcdFx0cmVzdHJpY3Q6ICdFJyxcblx0XHRcdHRlbXBsYXRlOiB0ZW1wbGF0ZSxcblx0XHRcdGxpbms6IGZ1bmN0aW9uKHNjb3BlLGVsbSxhdHRycyl7XG5cdFx0XHRcdGlmKCFzY29wZS4kcGFyZW50Lm5vcm1hbEZpZWxkcy5sZW5ndGggPiAwIHx8ICFzY29wZS4kcGFyZW50LmVudGl0eVRvVHJhbnNsYXRlKXtcblx0XHRcdFx0XHR0aHJvdyAnTWlzc2luZyBzb21lIHBhcmFtZXRlcnMgaW4gR3VtZ2FTZWFyY2gnO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHNjb3BlLm1vZGVscyA9IHt9O1xuXHRcdFx0XHRzY29wZS5zZWFyY2hGaWVsZCA9ICcnO1xuXHRcdFx0XHRzY29wZS50cmFuc2xhdGUgPSBzY29wZS4kcGFyZW50LmVudGl0eVRvVHJhbnNsYXRlO1xuXHRcdFx0XHRzY29wZS5ub3JtYWxGaWVsZHMgPSBzY29wZS4kcGFyZW50Lm5vcm1hbEZpZWxkcy5tYXAoZnVuY3Rpb24oZWxtLCRpbmRleCl7XG5cdFx0XHRcdFx0c2NvcGUubW9kZWxzW2VsbV0gPSBmYWxzZTtcblx0XHRcdFx0XHQkaW5kZXggPT0gMCAmJiAoc2NvcGUubW9kZWxzW2VsbV0gPSB0cnVlKTtcblx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0bmFtZTogZWxtLnNsaWNlKDAsMSkudG9VcHBlckNhc2UoKSArIGVsbS5zbGljZSgxLGVsbS5sZW5ndGgpLnRvTG93ZXJDYXNlKCksXG5cdFx0XHRcdFx0XHR2YWx1ZTogZWxtXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0c2NvcGUubW9kZWxzLnJldHVyblN0cmluZyA9IGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0dmFyIHR4dCA9ICcnO1xuXHRcdFx0XHRcdGZvcih2YXIga2V5IGluIHRoaXMpIGlmKHRoaXMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiBrZXkgIT0gJ3JldHVyblN0cmluZycgJiYgdGhpc1trZXldKXtcblx0XHRcdFx0XHRcdHR4dCArPSBrZXkgKyAnLCc7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmKHR4dC5sZW5ndGggPT0gMCl7XG5cdFx0XHRcdFx0XHRyZXR1cm4gc2NvcGUubm9ybWFsRmllbGRzWzBdLnZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdHh0LnNsaWNlKDAsLTEpO1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdGVsbS5maW5kKCdpbnB1dCcpXG5cdFx0XHRcdC5iaW5kKCdrZXlwcmVzcycsZnVuY3Rpb24oZXYpe1xuXHRcdFx0XHRcdGlmKGV2LmtleUNvZGUgPT0gMTMgJiYgc2NvcGUuc2VhcmNoRmllbGQubGVuZ3RoID4gMCl7XG5cdFx0XHRcdFx0XHRzY29wZS4kZW1pdCgnbm9ybWFsJyx7ZmllbGQ6IHNjb3BlLm1vZGVscy5yZXR1cm5TdHJpbmcoKSxwYXJhbTpzY29wZS5zZWFyY2hGaWVsZH0pO1xuXHRcdFx0XHRcdFx0aWYoc2NvcGUuc2hvd0xpdHRsZVBhbmVsKXtcblx0XHRcdFx0XHRcdFx0c2NvcGUuc2hvd0xpdHRsZVBhbmVsID0gIXNjb3BlLnNob3dMaXR0bGVQYW5lbDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdHNjb3BlLmRvU2VhcmNoID0gZnVuY3Rpb24odHh0KXtcblx0XHRcdFx0XHRzY29wZS4kZW1pdCgnbm9ybWFsJyx7ZmllbGQ6IHNjb3BlLm1vZGVscy5yZXR1cm5TdHJpbmcoKSxwYXJhbTp0eHQgfHwgJyd9KTtcblx0XHRcdFx0XHRzY29wZS5zaG93TGl0dGxlUGFuZWwgPSAhc2NvcGUuc2hvd0xpdHRsZVBhbmVsO1xuXHRcdFx0XHRcdHNjb3BlLnNlYXJjaEZpZWxkID0gJyc7XG5cdFx0XHRcdH07XG5cblx0XHRcdH1cblx0XHR9O1xuXHR9XG5cdGFuZ3VsYXIubW9kdWxlKCdndW1nYS5kaXJlY3RpdmVzLnNlYXJjaC5ub3JtYWxzZWFyY2gnLFtdKVxuXHQuZGlyZWN0aXZlKCdndW1nYU5vcm1hbFNlYXJjaCcsTm9ybWFsU2VhcmNoKVxufSkoKTsiLCIoZnVuY3Rpb24oKXtcblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0U2VhcmNoLiRpbmplY3QgPSBbXTtcblx0ZnVuY3Rpb24gU2VhcmNoKCl7XG5cdFx0dmFyIHRlbXBsYXRlID1cblx0XHQnPGRpdiBjbGFzcz1cImZ1bGwtd2lkdGgtd2l0aG91dC1wYWRkaW5nXCI+JyArXG5cdFx0JyAgICAgPGRpdiBuZy1pZj1cIiFhZHZcIj4nICtcblx0XHQnICAgICAgICAgPGd1bWdhLW5vcm1hbC1zZWFyY2g+PC9ndW1nYS1ub3JtYWwtc2VhcmNoPicgK1xuXHRcdCcgICAgIDwvZGl2PicgK1xuXHRcdCcgICAgIDxkaXYgbmctaWY9XCJhZHZcIj4nICtcblx0XHQnICAgICAgICAgPGd1bWdhLWFkdmFuY2VkLXNlYXJjaD48L2d1bWdhLWFkdmFuY2VkLXNlYXJjaD4nICtcblx0XHQnICAgICA8L2Rpdj4nICtcblx0XHQnPC9kaXY+Jztcblx0XHRyZXR1cm4ge1xuXHRcdFx0cmVzdHJpY3Q6ICdFJyxcblx0XHRcdHRlbXBsYXRlOiB0ZW1wbGF0ZSxcblx0XHRcdHRyYW5zY2x1ZGU6IHRydWUsXG5cdFx0XHRzY29wZSA6IHtcblx0XHRcdFx0YWR2YW5jZWQ6ICcmYWR2YW5jZWRNZXRob2QnLFxuXHRcdFx0XHRub3JtYWw6ICcmc2VhcmNoTWV0aG9kJyxcblx0XHRcdFx0b25TZWFyY2g6ICcmJyxcblx0XHRcdFx0b25BZHZhbmNlZFNlYXJjaDogJyYnXG5cdFx0XHR9LFxuXHRcdFx0bGluazogZnVuY3Rpb24oc2NvcGUsZWxtLGF0dHJzLGNvbnRyb2xsZXIsdHJhbnNjbHVkZUZuKXtcblx0XHRcdFx0c2NvcGUuYWR2ID0gZmFsc2U7XG5cdFx0XHRcdHNjb3BlLmF0dHJpYnV0ZXMgPSBbXTtcblx0XHRcdFx0c2NvcGUubm9ybWFsRmllbGRzID0gYXR0cnMuZmllbGRzLnNwbGl0KCcsJyk7XG5cdFx0XHRcdHNjb3BlLmVudGl0eVRvVHJhbnNsYXRlID0gYXR0cnMudHJhbnNsYXRlRW50aXR5O1xuXHRcdFx0XHR2YXIgZXZlbnRIYW5kbGVyID0ge1xuXHRcdFx0XHRcdHNlYXJjaDogYXR0cnMub25TZWFyY2ggPyBzY29wZS5vblNlYXJjaCA6IGFuZ3VsYXIubm9vcCxcblx0XHRcdFx0XHRhZHZhbmNlZDogYXR0cnMub25BZHZhbmNlZFNlYXJjaCA/IHNjb3BlLm9uQWR2YW5jZWRTZWFyY2ggOiBhbmd1bGFyLm5vb3Bcblx0XHRcdFx0fVxuXHRcdFx0XHRpZihhdHRycy5hZHZhbmNlZCA9PT0gXCJ0cnVlXCIpe1xuXHRcdFx0XHRcdHNjb3BlLmFkdiA9IHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzY29wZS5nZXRBdHRyaWJ1dGVzID0gZnVuY3Rpb24gKCl7XG5cdFx0XHRcdFx0dHJhbnNjbHVkZUZuKGZ1bmN0aW9uKGNsb25lKXtcblx0XHRcdFx0XHRcdGFuZ3VsYXIuZm9yRWFjaChjbG9uZSxmdW5jdGlvbihjbG9uZUVsKXtcblx0XHRcdFx0XHRcdFx0aWYoY2xvbmVFbC5ub2RlTmFtZSA9PSAnQURWQU5DRUQtRklFTEQnKXtcblx0XHRcdFx0XHRcdFx0XHRzY29wZS5hdHRyaWJ1dGVzLnB1c2goe1xuXHRcdFx0XHRcdFx0XHRcdFx0bmFtZTogY2xvbmVFbC5nZXRBdHRyaWJ1dGUoJ25hbWUnKSxcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGU6IGNsb25lRWwuZ2V0QXR0cmlidXRlKCd0eXBlJylcblx0XHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0c2NvcGUuJG9uKCdhZHZhbmNlZCcsZnVuY3Rpb24oZXYsZGF0YSl7XG5cdFx0XHRcdFx0c2NvcGUuYWR2YW5jZWQoe3BhcmFtOiBkYXRhfSk7XG5cdFx0XHRcdFx0ZXZlbnRIYW5kbGVyLnNlYXJjaCgpO1xuXHQgICAgICAgICAgICAgIC8vZXYuc3RvcFByb3BhZ2F0aW9uKCkgfHwgYW5ndWxhci5ub29wO1xuXHQgICAgICAgICAgICB9KTtcblxuXHRcdFx0XHRzY29wZS4kb24oJ25vcm1hbCcsZnVuY3Rpb24oZXYsZGF0YSl7XG5cdFx0XHRcdFx0c2NvcGUubm9ybWFsKHtmaWVsZDogZGF0YS5maWVsZCxwYXJhbTogZGF0YS5wYXJhbX0pO1xuXHRcdFx0XHRcdGV2ZW50SGFuZGxlci5hZHZhbmNlZCgpXG5cdCAgICAgICAgICAgICAgLy9ldi5zdG9wUHJvcGFnYXRpb24oKSB8fCBhbmd1bGFyLm5vb3A7XG5cdCAgICAgICAgICAgIH0pO1xuXG5cdFx0XHRcdHNjb3BlLmdldEF0dHJpYnV0ZXMoKTtcblx0XHRcdH1cblx0XHR9O1xuXHR9XG5cdGFuZ3VsYXIubW9kdWxlKCdndW1nYS5kaXJlY3RpdmVzLnNlYXJjaC5zZWFyY2gnLFtdKVxuXHQuZGlyZWN0aXZlKCdndW1nYVNlYXJjaCcsU2VhcmNoKVxufSkoKTsiLCIoZnVuY3Rpb24oKXtcblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0U2VhcmNoSGVscGVyLiRpbmplY3QgPSBbXTtcblx0ZnVuY3Rpb24gU2VhcmNoSGVscGVyKCl7XG5cdFx0dmFyIHR5cGVzID17XG5cdFx0XHRcInN0cmluZ1wiOiB7XG5cdFx0XHRcdFwiSFFMUG9zc2liaWxpdGllc1wiOiBbXG5cdFx0XHRcdHtocWw6XCJlcVwiLGxhYmVsOiBcImlndWFsXCIgLCBiZWZvcmU6IFwiPSdcIixhZnRlcjpcIidcIn0sXG5cdFx0XHRcdHtocWw6XCJuZVwiLGxhYmVsOiBcImRpZmVyZW50ZSBkZVwiICwgYmVmb3JlOiBcIiE9J1wiLGFmdGVyOlwiJ1wifSxcblx0XHRcdFx0e2hxbDogXCJjb250YWluc1wiLGxhYmVsOiBcImNvbnTDqW1cIiAsIGJlZm9yZTogXCIgbGlrZSAnXFwlXCIsYWZ0ZXI6XCJcXCUnXCJ9LFxuXHRcdFx0XHR7aHFsOiBcIm5vdF9jb250YWluc1wiLGxhYmVsOlwibsOjbyBjb250w6ltXCIgLCBiZWZvcmU6IFwiIG5vdCBsaWtlICdcXCVcIixhZnRlcjpcIlxcJSdcIn0sXG5cdFx0XHRcdHtocWw6IFwic3RhcnRzX3dpdGhcIixsYWJlbDpcImNvbWXDp2EgY29tXCIgLCBiZWZvcmU6IFwibGlrZSAnXCIsYWZ0ZXI6XCJcXCUnXCJ9LFxuXHRcdFx0XHR7aHFsOiBcImVuZHNfd2l0aFwiLGxhYmVsOiBcInRlcm1pbmEgY29tXCIgLCBiZWZvcmU6IFwibGlrZSAnXFwlXCIsYWZ0ZXI6XCInXCJ9LFxuXHRcdFx0XHR7aHFsOiBcImdlXCIsbGFiZWw6XCJtYWlvciBpZ3VhbFwiICwgYmVmb3JlOiBcIj49J1wiLGFmdGVyOlwiJ1wifSxcblx0XHRcdFx0e2hxbDogXCJsZVwiLGxhYmVsOiBcIm1lbm9yIGlndWFsXCIgLCBiZWZvcmU6IFwiPD0nXCIsYWZ0ZXI6XCInXCJ9XVxuXHRcdFx0fSxcblx0XHRcdFwibnVtYmVyXCI6IHtcblx0XHRcdFx0XCJIUUxQb3NzaWJpbGl0aWVzXCI6IFtcblx0XHRcdFx0e2hxbDpcImVxXCIsbGFiZWw6IFwiaWd1YWxcIiwgYmVmb3JlOiBcIj1cIixhZnRlcjpcIlwifSxcblx0XHRcdFx0e2hxbDpcIm5lXCIsbGFiZWw6IFwiZGlmZXJlbnRlIGRlXCIsIGJlZm9yZTogXCIhPVwiLGFmdGVyOlwiXCJ9LFxuXHRcdFx0XHR7aHFsOiBcImd0XCIsbGFiZWw6XCJtYWlvciBxdWVcIiwgYmVmb3JlOiBcIj5cIixhZnRlcjpcIlwifSxcblx0XHRcdFx0e2hxbDogXCJnZVwiLGxhYmVsOlwibWFpb3IgaWd1YWxcIiwgYmVmb3JlOiBcIj49XCIsYWZ0ZXI6XCJcIn0sXG5cdFx0XHRcdHtocWw6IFwibHRcIixsYWJlbDpcIm1lbm9yIHF1ZVwiLCBiZWZvcmU6IFwiPFwiLGFmdGVyOlwiXCJ9LFxuXHRcdFx0XHR7aHFsOiBcImxlXCIsbGFiZWw6XCJtYWlvciBpZ3VhbFwiLCBiZWZvcmU6IFwiPD1cIixhZnRlcjpcIlwifV1cblx0XHRcdH0sXG5cdFx0XHRcIm1vbmV5XCI6IHtcblx0XHRcdFx0XCJIUUxQb3NzaWJpbGl0aWVzXCI6IFtcblx0XHRcdFx0e2hxbDpcImVxXCIsbGFiZWw6IFwiaWd1YWxcIiwgYmVmb3JlOiBcIj1cIixhZnRlcjpcIlwifSxcblx0XHRcdFx0e2hxbDpcIm5lXCIsbGFiZWw6IFwiZGlmZXJlbnRlIGRlXCIsIGJlZm9yZTogXCIhPVwiLGFmdGVyOlwiXCJ9LFxuXHRcdFx0XHR7aHFsOiBcImd0XCIsbGFiZWw6XCJtYWlvciBxdWVcIiwgYmVmb3JlOiBcIj5cIixhZnRlcjpcIlwifSxcblx0XHRcdFx0e2hxbDogXCJnZVwiLGxhYmVsOlwibWFpb3IgaWd1YWxcIiwgYmVmb3JlOiBcIj49XCIsYWZ0ZXI6XCJcIn0sXG5cdFx0XHRcdHtocWw6IFwibHRcIixsYWJlbDpcIm1lbm9yIHF1ZVwiLCBiZWZvcmU6IFwiPFwiLGFmdGVyOlwiXCJ9LFxuXHRcdFx0XHR7aHFsOiBcImxlXCIsbGFiZWw6XCJtYWlvciBpZ3VhbFwiLCBiZWZvcmU6IFwiPD1cIixhZnRlcjpcIlwifV1cblxuXHRcdFx0fSxcblx0XHRcdFwiYm9vbGVhblwiOiB7XG5cdFx0XHRcdFwiSFFMUG9zc2liaWxpdGllc1wiOiBbe2hxbDpcImVxXCIsbGFiZWw6IFwiaWd1YWxcIiAsIGJlZm9yZTogXCI9J1wiLGFmdGVyOlwiJ1wifV1cblx0XHRcdH0sXG5cdFx0XHRcImRhdGVcIjoge1xuXHRcdFx0XHRcIkhRTFBvc3NpYmlsaXRpZXNcIjogW1xuXHRcdFx0XHR7aHFsOiBcImVxXCIsIGxhYmVsOiBcImlndWFsXCIsIGJlZm9yZTogXCI9J1wiLCBhZnRlcjogXCInXCJ9LFxuXHRcdFx0XHR7aHFsOiBcImdlXCIsIGxhYmVsOiBcIm1haW9yIGlndWFsXCIsIGJlZm9yZTogXCI+PSdcIiwgYWZ0ZXI6IFwiJ1wifSxcblx0XHRcdFx0e2hxbDogXCJsZVwiLCBsYWJlbDogXCJtZW5vciBpZ3VhbFwiLCBiZWZvcmU6IFwiPD0nXCIsIGFmdGVyOiBcIidcIn1dXG5cdFx0XHR9XG5cdFx0fTtcblx0XHRyZXR1cm4ge1xuXHRcdFx0Z2V0VHlwZUxpc3RPZkhRTFBvc3NpYmlsaXRpZXM6IGZ1bmN0aW9uKHR5cGUpe1xuXHRcdFx0XHRpZihhbmd1bGFyLmlzRGVmaW5lZCh0eXBlc1t0eXBlXSkpXG5cdFx0XHRcdFx0cmV0dXJuIHR5cGVzW3R5cGVdLkhRTFBvc3NpYmlsaXRpZXM7XG5cdFx0XHRcdHRocm93ICdUeXBlIGRvZXNuXFwndCBleGlzdCc7XG5cdFx0XHR9LFxuXHRcdFx0dHJhbnNsYXRlQXJyYXlUb0hRTDogZnVuY3Rpb24oYXJyYXkpe1xuXHRcdFx0XHRyZXR1cm4gYXJyYXlcblx0XHRcdFx0Lm1hcChmdW5jdGlvbihlbGVtZW50KSB7XG5cdFx0XHRcdFx0cmV0dXJuIChcblx0XHRcdFx0XHRcdChhbmd1bGFyLmlzRGVmaW5lZChlbGVtZW50LmF0dHJpYnV0ZSkgPyAnb2JqLicgKyBlbGVtZW50LmF0dHJpYnV0ZS5uYW1lIDogJyEnKVxuXHRcdFx0XHRcdFx0KyAnJyArXG5cdFx0XHRcdFx0XHQoYW5ndWxhci5pc0RlZmluZWQoZWxlbWVudC5ocWwpID8gZWxlbWVudC5ocWwuYmVmb3JlIDogJyAhJylcblx0XHRcdFx0XHRcdCsgJycgK1xuXHRcdFx0XHRcdFx0ZWxlbWVudC52YWx1ZVxuXHRcdFx0XHRcdFx0KyAoYW5ndWxhci5pc0RlZmluZWQoZWxlbWVudC5ocWwpID8gZWxlbWVudC5ocWwuYWZ0ZXIgOiAnICEnKSApO1xuXHRcdFx0XHR9KS5tYXAoZnVuY3Rpb24oZWxlbWVudCl7XG5cdFx0XHRcdFx0aWYoZWxlbWVudC5pbmRleE9mKCchJykgIT0gLTEpe1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW1lbnQucmVwbGFjZSgvIS9nLCcnKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW1lbnQ7XG5cdFx0XHRcdH0pLmpvaW4oXCJcIik7XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXHRhbmd1bGFyLm1vZHVsZSgnZ3VtZ2EuZGlyZWN0aXZlcy5zZWFyY2guc2VhcmNoaGVscGVyJyxbXSlcblx0LmZhY3RvcnkoJ0d1bWdhU2VhcmNoSGVscGVyJyxTZWFyY2hIZWxwZXIpXG59KSgpOyIsIihmdW5jdGlvbigpe1xuXHQndXNlIHN0cmljdCc7XG5cdFRyYW5zbGF0ZS4kaW5qZWN0ID0gW1wiJGh0dHBcIiwgXCJUcmFuc2xhdGVIZWxwZXJcIl07XG5cdGZ1bmN0aW9uIFRyYW5zbGF0ZSgkaHR0cCxUcmFuc2xhdGVIZWxwZXIpe1xuXHRcdHZhciBjaCA9IDA7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHJlc3RyaWN0OiAnQUVDJyxcblx0XHRcdHNjb3BlOiBmYWxzZSxcblx0XHRcdGxpbms6IGZ1bmN0aW9uKCRzY29wZSwkZWxtLCRhdHRycyl7XG5cdFx0XHRcdHZhciBsYW5ndWFnZSA9ICRhdHRycy5ndW1nYVRyYW5zbGF0ZS50b0xvd2VyQ2FzZSgpIHx8IG5hdmlnYXRvci5sYW5ndWFnZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRpZighVHJhbnNsYXRlSGVscGVyLmdldFNlc3Npb25TdG9yYWdlSXRlbShsYW5ndWFnZSkpe1xuXHRcdFx0XHRcdCRodHRwLmdldCgnLi9pMThuLycgKyBsYW5ndWFnZSArICcuanNvbicpXG5cdFx0XHRcdFx0LnN1Y2Nlc3MoZnVuY3Rpb24odmFsdWVzKXtcblx0XHRcdFx0XHRcdFRyYW5zbGF0ZUhlbHBlci5zZXRUcmFuc2xhdG9ycyhsYW5ndWFnZSx2YWx1ZXMpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cblx0XHRcdH1cblx0XHR9O1xuXHR9XG5cblx0YW5ndWxhci5tb2R1bGUoJ2d1bWdhLmRpcmVjdGl2ZXMudHJhbnNsYXRlLnRyYW5zbGF0ZScsWydndW1nYS5kaXJlY3RpdmVzLnRyYW5zbGF0ZS50cmFuc2xhdGVoZWxwZXInXSlcblx0LmRpcmVjdGl2ZSgnZ3VtZ2FUcmFuc2xhdGUnLFRyYW5zbGF0ZSk7XG59KSgpOyIsIihmdW5jdGlvbigpe1xuXHQndXNlIHN0cmljdCc7XG5cblx0ZnVuY3Rpb24gVHJhbnNsYXRlSGVscGVyKCl7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGdldFNlc3Npb25TdG9yYWdlSXRlbTogZnVuY3Rpb24oa2V5KXtcblx0XHRcdFx0dmFyIGcgPSB3aW5kb3cuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuXHRcdFx0XHRpZighZyl7XG5cdFx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHRcdH1cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRhbmd1bGFyLmZyb21Kc29uKGcpO1xuXHRcdFx0XHR9Y2F0Y2goZSl7XG5cdFx0XHRcdFx0cmV0dXJuIGc7XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy50cmFuc2xhdG9ycyA9IGFuZ3VsYXIuZnJvbUpzb24oYW5ndWxhci5mcm9tSnNvbihnKSk7XG5cdFx0XHRcdHJldHVybiBhbmd1bGFyLmZyb21Kc29uKGFuZ3VsYXIuZnJvbUpzb24oZykpO1xuXHRcdFx0fSxcblx0XHRcdHRyYW5zbGF0b3JzOiB7fSxcblx0XHRcdHNldFRyYW5zbGF0b3JzOiBmdW5jdGlvbihsYW5ndWFnZSxvYmope1xuXHRcdFx0XHR0aGlzLnRyYW5zbGF0b3JzID0gb2JqO1xuXHRcdFx0XHR0aGlzLnNldFNlc3Npb25TdG9yYWdlSXRlbShsYW5ndWFnZSxKU09OLnN0cmluZ2lmeShvYmopKTtcblx0XHRcdH0sXG5cdFx0XHRzZXRTZXNzaW9uU3RvcmFnZUl0ZW06IGZ1bmN0aW9uKGtleSx2YWx1ZSl7XG5cdFx0XHRcdHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5zZXRJdGVtKGtleSxhbmd1bGFyLnRvSnNvbih2YWx1ZSkpO1xuXHRcdFx0fSxcblx0XHRcdHJldHVyblRyYW5zbGF0aW9uOiBmdW5jdGlvbihzdHJpbmcpe1xuXHRcdFx0XHR2YXIgYXJyYXkgPSBzdHJpbmcuc3BsaXQoJy4nKTtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy50cmFuc2xhdG9yc1thcnJheVswXS50b0xvd2VyQ2FzZSgpLnRyaW0oKV1bYXJyYXlbMV0udG9Mb3dlckNhc2UoKS50cmltKCldO1xuXHRcdFx0XHR9IGNhdGNoKGUpe31cblx0XHRcdH1cblx0XHR9O1xuXHR9XG5cblx0YW5ndWxhci5tb2R1bGUoJ2d1bWdhLmRpcmVjdGl2ZXMudHJhbnNsYXRlLnRyYW5zbGF0ZWhlbHBlcicsW10pXG5cdC5mYWN0b3J5KCdUcmFuc2xhdGVIZWxwZXInLFRyYW5zbGF0ZUhlbHBlcik7XG5cbn0pKCk7XG4iLCIoZnVuY3Rpb24oKXtcbiAgJ3VzZSBzdHJpY3QnO1xuICBUcmFuc2xhdGVUYWcuJGluamVjdCA9IFtcIlRyYW5zbGF0ZUhlbHBlclwiLCBcIiRjb21waWxlXCJdO1xuICBmdW5jdGlvbiBUcmFuc2xhdGVUYWcoVHJhbnNsYXRlSGVscGVyLCRjb21waWxlKXtcbiAgICB2YXIgY2hpbGQ7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSxlbG0sYXR0cnMpe1xuICAgICAgICBpZighYXR0cnMuZ3VtZ2FUcmFuc2xhdGVUYWcpIHRocm93ICdZb3UgbXVzdCBwYXNzIGEgdmFsaWQgdmFsdWUgdG8gZ3VtZ2FUcmFuc2xhdGVUYWcnO1xuICAgICAgICBpZihUcmFuc2xhdGVIZWxwZXIucmV0dXJuVHJhbnNsYXRpb24oYXR0cnMuZ3VtZ2FUcmFuc2xhdGVUYWcpKXtcbiAgICAgICAgICBpZihlbG1bMF0uY2hpbGROb2Rlcy5sZW5ndGggPiAwKXtcbiAgICAgICAgICAgIHNjb3BlLmNoaWxkID0gZWxtWzBdLmNoaWxkTm9kZXNbMF07XG4gICAgICAgICAgICBlbG1bMF0uaW5uZXJIVE1MID0gIFRyYW5zbGF0ZUhlbHBlci5yZXR1cm5UcmFuc2xhdGlvbihhdHRycy5ndW1nYVRyYW5zbGF0ZVRhZyk7XG4gICAgICAgICAgICBlbG0uYXBwZW5kKCRjb21waWxlKHNjb3BlLmNoaWxkKShzY29wZSkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbG1bMF0uaW5uZXJIVE1MID0gVHJhbnNsYXRlSGVscGVyLnJldHVyblRyYW5zbGF0aW9uKGF0dHJzLmd1bWdhVHJhbnNsYXRlVGFnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgIH07XG4gIH1cblxuICBhbmd1bGFyLm1vZHVsZSgnZ3VtZ2EuZGlyZWN0aXZlcy50cmFuc2xhdGUudHJhbnNsYXRldGFnJyxbJ2d1bWdhLmRpcmVjdGl2ZXMudHJhbnNsYXRlLnRyYW5zbGF0ZWhlbHBlciddKVxuICAuZGlyZWN0aXZlKCdndW1nYVRyYW5zbGF0ZVRhZycsVHJhbnNsYXRlVGFnKTtcbn0pKCk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=