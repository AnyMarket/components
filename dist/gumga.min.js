
angular.module('gumga.core',
	['gumga.services',
	'gumga.controllers',
	'gumga.directives']);

(function(){
	'use strict';

	angular.module('gumga.controllers',[]);

})();

(function(){
	'use strict';

	angular.module('gumga.directives',
		[
		'gumga.directives.address',
		'gumga.directives.queries',
		'gumga.directives.alert',
		'gumga.directives.breadcrumb',
		'gumga.directives.counter',
		'gumga.directives.formbuttons',
		'gumga.directives.manytomany',
		'gumga.directives.manytoone',
		'gumga.directives.menu',
		'gumga.directives.nav',
		'gumga.directives.onetomany',
		'gumga.directives.search',
		'gumga.directives.table',
		'gumga.directives.upload',
		'gumga.directives.form',
		'gumga.directives.translate'
		]);

})();

(function(){
	'use strict';

	angular.module('gumga.services',[
		'gumga.services.address',
		'gumga.services.keyboard',
		'gumga.services.base',
		'gumga.services.utils',
		'gumga.services.alert',
		'gumga.services.translate',
		'gumga.services.webstorage',
		'gumga.services.populate',
		'gumga.services.rest'
		]);
})();

(function(){
	'use strict';
	/**
	 * @ngdoc directive
	 * @name gumga.core:gumgaAddress
	 * @restrict E
	 * @description O componente GumgaAddress recebe um objeto que será preenchido com o endereço, que pode ser pesquisado através do CEP (Utilizando um WebService GUMGA),
	 * ou preenchido manualmente pelo usuário. Este objeto de entrada pode ser vazio ou preferivelmente no formato do objeto GUMGA.
       * ## Exemplo
       * Veja um exemplo em funcionamento [aqui](http://embed.plnkr.co/7t9mZtLl9bPuVhmig0oI/).
	 * @param {Object} value Atributo obrigatório que irá conter o nome do objeto no $scope no qual os valores do Endereço serão colocados.
	 * @param {String} name Atributo obrigatório e único que irá conter um nome de identificador para a directive.
	 * @param {String} title Atributo opcional que irá conter o título para o panel da directive.
	 * @param {Function} onSearchCepStart Atributo opcional que irá conter o nome de uma função que será executada quando a busca pelo CEP começar.
	 * @param {Function} onSearchCepSuccess Atributo opcional que irá conter o nome de uma função que será executada quando a busca pelo CEP retornar sucesso.
       *  Pode ser chamada com um atributo com os valores `on-search-cep-success="doSomething($value)"`
	 * @param {Function} onSearchCepError Atributo opcional que irá conter o nome de uma função que será executada quando a busca pelo CEP retornar erro.
       *  Pode ser chamada com um atributo com os valores `on-search-cep-error="doSomething($value)"`
      */
	AddressDirective.$inject = ["GumgaAddressService", "$http"];
      function AddressDirective(GumgaAddressService,$http){
      	var template = [
      	'<div class="address" style="padding-left: 0">',
      	'    <div class="col-md-8 col-sm-12 col-xs-12" style="padding-left: 0">',
      	'          <accordion>',
      	'                <accordion-group style="margin-top: 1%" is-open="true" heading="{{::title}}">',
      	'                      <div class="col-md-12">',
      	'                            <label for="input{{::id}}">CEP</label>',
      	'                            <div class="input-group">',
      	'                                  <input type="text" class="form-control" ng-model="value.zipCode" id="input{{::id}}" ng-keypress="custom($event,value.zipCode)">',
      	'                                  <span class="input-group-btn">',
      	'                                        <button class="btn btn-primary" type="button" ng-click="searchCep(value.zipCode)" ng-disabled="loader{{::id}}" id="buttonSearch{{::id}}">Search <i class="glyphicon glyphicon-search"></i></button>',
      	'                                  </span>',
      	'                            </div>',
      	'                      </div>',
      	'                      <div class="col-md-4">',
      	'                            <label for="tipoLogradouro"><small>Tipo Logradouro</small></label>',
      	'                            <select type="text" ng-model="value.premisseType" class="form-control" ng-options="log for log in factoryData.logs"></select>',
      	'                      </div>',
      	'                      <div class="col-md-5" style="padding-left: 0; padding-right: 0">',
      	'                            <label for="Logradouro"><small>Logradouro</small></label>',
      	'                            <input type="text" ng-model="value.premisse" class="form-control id="oi"/>',
      	'                      </div>',
      	'                      <div class="col-md-3">',
      	'                            <label for="Número"><small> Número </small></label>',
      	'                            <input type="text" ng-model="value.number" class="form-control" id="numberInput{{::id}}"/>',
      	'                      </div>',
      	'                      <div class="col-md-12">',
      	'                            <label for="Complemento"><small>Complemento</small></label>',
      	'                            <input type="text" ng-model="value.information" class="form-control"/>',
      	'                      </div>',
      	'                      <div class="col-md-7">',
      	'                            <label for="Bairro"><small> Bairro </small></label>',
      	'                            <input type="text" ng-model="value.neighbourhood" class="form-control"/>',
      	'                      </div>',
      	'                      <div class="col-md-5">',
      	'                            <label for="Localidade"><small> Localidade </small></label>',
      	'                            <input type="text" ng-model="value.localization" class="form-control"/>',
      	'                      </div>',
      	'                      <div class="col-md-4">',
      	'                            <label for="UF"><small> UF </small></label>',
      	'                            <select ng-model="value.state" class="form-control" ng-options="uf for uf in factoryData.ufs"></select>',
      	'                      </div>',
      	'                      <div class="col-md-4">',
      	'                            <label for="País"><small> País </small></label>',
      	'                            <select ng-model="value.country" class="form-control" ng-options="pais for pais in factoryData.availableCountries"></select>',
      	'                      </div>',
      	'                      <div class="col-md-4" style="padding-top: 2%">',
      	'                            <a class="btn btn-default pull-right" ng-href="{{returnLink(value)}}" target="_blank">Maps <i class="glyphicon glyphicon-globe"></i></a>',
      	'                      </div>',
      	'                </accordion-group>',
      	'          </accordion>',
      	'    </div>',
      	'</div>'];
      	return {
      		restrict: 'E',
      		scope: {
      			value: '=',
      			onSearchCepStart: '&?',
      			onSearchCepSuccess: '&?',
      			onSearchCepError: '&?'
      		},
      		template: template.join('\n'),
      		link: function (scope, elm, attrs, ctrl) {
						function isEmpty(obj){
    					for(var key in obj) if(obj.hasOwnProperty(key)){
        				return false;
    					}
    					return true;
						}
	          if(isEmpty(scope.value)) scope.value = GumgaAddressService.returnFormattedObject();
	          if(!attrs.name) throw "É necessário passar um parâmetro 'name' como identificador para GumgaAddress";
      			scope.title = attrs.title || 'Endereço';
      			scope.id = attrs.name;
      			scope['loader' + scope.id] = false;
            scope.factoryData = {
                ufs: GumgaAddressService.everyUf,
                logs: GumgaAddressService.everyLogradouro,
                availableCountries: GumgaAddressService.availableCountries
            };
            var eventHandler = {
                  searchCepStart: (attrs.onSearchCepStart ? scope.onSearchCepStart : angular.noop),
                  searchCepSuccess: (attrs.onSearchCepSuccess ? scope.onSearchCepSuccess : angular.noop),
                  searchCepError: (attrs.onSearchCepError ? scope.onSearchCepError: angular.noop)
            };
      			scope.custom = function ($event, cep) {
              $event.charCode == 13? scope.searchCep(cep) : angular.noop;
      			};

      			scope.returnLink = function (value) {
      				if (!value.number) {
      					value.number = '';
      				}
      				return 'https://www.google.com.br/maps/place/' + value.premisseType + ' ' + value.premisse + ',' + value.number+ ',' + value.localization;
      			};
      			scope.searchCep = function (cep) {
      				scope['loader' + scope.id] = true;
      				eventHandler.searchCepStart();
      				$http.get('http://www.gumga.com.br/services-api/public/cep/'+cep)
      				.success(function (values) {
      					eventHandler.searchCepSuccess({$value: values});
      					scope['loader' + scope.id] = false;
      					if (parseInt(values.resultado) == 1) {
      						scope.value.premisseType = values.tipo_logradouro;
      						scope.value.premisse = values.logradouro;
      						scope.value.localization = values.cidade;
      						scope.value.neighbourhood = values.bairro;
      						scope.value.state = values.uf;
      						scope.value.country = 'Brasil';
      					}

      				})
      				.error(function(data){
      					eventHandler.searchCepError({$value: data});
      				})
      			};
      			if (scope.value.zipCode) {
      				scope.searchCep(scope.value.zipCode);
      			}
      		}
      	};
      }
      angular.module('gumga.directives.address',['gumga.services.address'])
      .directive('gumgaAddress',AddressDirective);
    })();

(function(){
	'use strict';
	/**
	 * @ngdoc directive
	 * @name gumga.core:gumgaAlert
	 * @restrict EA
	 * @element ANY
	 * @description O componente gumgaAlert serve para criar notificações growl-like e é baseada em eventos.
	 * Para o funcionamento da directive, é necessário incluí-la apenas uma vez no seu código html (de preferência no index.html),
	 * para que os listeners sejam adicionados(Atualmente, na nova versão isto não é mais necessário, ver {@link gumga.core:GumgaAlert}). 
	 *
	 * @example
	 * ## Para que o alerta seja realizado, utilize um dos eventos:
	 * <pre>
	 * 	$scope.$emit('dangerMessage',{title: 'Error' ,message: 'Error 404'});
	 * 	$scope.$emit('successMessage',{title: 'Parabéns!' ,message: 'Sua solicitação foi aceita com sucesso!'});
	 *  $scope.$emit('warningMessage',{title: 'Cuidado!' ,message: 'A área que você está entrando é restrita.'});
   * 	$scope.$emit('infoMessage',{title: 'Salvar' ,message: 'Para salvar, entre em contato com o administrador.'});
	 * </pre>
	 *  Para ver um exemplo em funcionamento, clique [aqui](http://embed.plnkr.co/wdlI7U4nQf9kNhGlyCfU/)
	 */
	Alert.$inject = ["$rootScope"];
	function Alert($rootScope){
		return {
			restrict: 'EA',
			scope: false,
			compile: function(){
				function notify(icon, title, message, type) {
					$.notify({
						icon: icon,
						title: title,
						message: message
					}, {
						type: type,
						offset: 50,
						timer: 100,
						delay: 3500,
						onShow: $rootScope.$broadcast('onNotificationShow'),
						onClose: $rootScope.$broadcast('onNotificationClose'),
						allow_dismiss: true,
						animate: {
							enter: 'animated bounceInRight',
							exit: 'animated bounceOutRight'
						},
						template: '<div data-notify="container" class="col-xs-9 col-sm-3 alert alert-{0}" role="alert">' +
						'<button type="button" aria-hidden="true" class="close" data-notify="dismiss">×</button>' +
						'<span data-notify="icon"></span> ' +
						'<span data-notify="title"><b>{1}</b></span><br> ' +
						'<span data-notify="message">{2}</span>' +
						'</div>'
					});
				}

				$rootScope.$on('dangerMessage', function (ev, data) {
					notify('glyphicon glyphicon-exclamation-sign', data.title, data.message, 'danger');
				});
				$rootScope.$on('successMessage', function (ev, data) {
					notify('glyphicon glyphicon-ok', data.title, data.message, 'success');
				});
				$rootScope.$on('warningMessage', function (ev, data) {
					notify('glyphicon glyphicon-warning-sign', data.title, data.message, 'warning');
				});
				$rootScope.$on('infoMessage', function (ev, data) {
					notify('glyphicon glyphicon-info-sign', data.title, data.message, 'info');
				});
			}
		}
	}
	angular.module('gumga.directives.alert',[])
	.directive('gumgaAlert',Alert);
})();
(function(){
	'use strict';

	Breadcrumb.$inject = ["$rootScope"];
	/**
	 * @ngdoc directive
	 * @name gumga.core:gumgaBreadcrumb
	 * @restrict E
	 * @description O componente GumgaBreadcrumb serve para mostrar ao usuário a lista das páginas visitadas. Este componente atuamente
	 * funciona caso exista dependência do [ui-router](https://github.com/angular-ui/ui-router).
	 * 
	 * O componente GumgaBreadcrumb ouve ao evento `breadChanged`, que recebe os states que estão sendo visitados. Uma das implementações possíveis para esse
	 * evento breadChanged é a seguinte:
	 * <pre>
	 * $rootScope.breadcrumbs = [];
      $rootScope.$on('$stateChangeSuccess', function (event, toState) {
        updateBreadcrumb(toState.name, toState.data.id);
      });
      function updateBreadcrumb(state, id) {
          function get(id) {
              for (var i = 0, len = $rootScope.breadcrumbs.length; i < len; i++) {
                  if ($rootScope.breadcrumbs[i].id === id) {
                      return i;
                  }
              }
          }
          if (id && get(id) >= 0) {
              $rootScope.breadcrumbs.splice(get(id), $rootScope.breadcrumbs.length - get(id), {state: state, id: id});
          } else {
              $rootScope.breadcrumbs.push({state: state, id: id});
          }
          !id ? $rootScope.breadcrumbs = [] : angular.noop;
          $rootScope.$broadcast('breadChanged');
      }
	 * </pre> 
	 * Este código foi colocado dentro do `run` do módulo principal da aplicação.
	 */

	function Breadcrumb($rootScope){
		var template = [
		'<ol class="breadcrumb">',
		'<li ng-repeat="bread in breadcrumbs" ><a ui-sref="{{::bread.state}}">{{::bread.state}}</a></li>',
		'</ol>'
		];
		return {
			restrict: 'E',
			template: template.join('\n'),
			replace: true,
			link: function($scope, $elm, $attrs){
				$scope.$on('breadChanged',function(){
					$scope.breadcrumbs = $rootScope.breadcrumbs.filter(function(e){
						return e.state.split('.').length >=2 ;
					});
				});
			}
		};
	}
	angular.module('gumga.directives.breadcrumb',[])
	.directive('gumgaBreadcrumb',Breadcrumb);
})();
// define = Require.js
(function(){
  'use strict';

    Counter.$inject = ["$compile"];
      /**
       * @ngdoc directive
       * @name gumga.core:gumgaCounter
       * @element input
       * @description O componente gumgaCounter permite escolher um tamanho máximo permitido no campo, também cria um contador de caracteres indicando se os caracteres
       * passaram do limite ou não. 
       * 
       * Caso um valor seja passado para a directive, ela atualizará o contador baseado nesse número. Caso não, ela pegará o valor
       * passado para a directive {@link gumga.core:gumgaMaxLength}
       * 
       * @example
       *  Um exemplo da directive gumgaCounter funcionando pode ser encontrado [aqui](http://embed.plnkr.co/6xJuUuiI456kqbXN3Q6f/).
       * <pre>
       * <input name="example" ng-model="example" gumga-counter="15" />
       * </pre>
      */

      function Counter($compile){
            return{
                restrict: 'A',
                link: function (scope, elem, attrs) {
                    scope._max = parseInt(attrs.gumgaMaxLengthText);
                    if (!isNaN(parseInt(attrs.gumgaCounter))) {
                        scope._max = parseInt(attrs.gumgaCounter);
                    }
                    var template = '<p class="{{_max <= teste.length ? \'text-danger\' : \'text-muted\'}}">{{_max <= '+ attrs.ngModel +'.length ? "Você passou o limite de '+scope._max+' caracteres" : _max - '+ attrs.ngModel +'.length + " caracteres restantes" }}</p>';
                    elem.after($compile(template)(scope));
                }
            };
      }

      angular.module('gumga.directives.counter', [])
        .directive('gumgaCounter', Counter);


})();


(function () {


  angular.module('gumga.directives.form',[
    'gumga.directives.form.form',
    'gumga.directives.form.errors',
    'gumga.directives.form.error',
    'gumga.directives.form.max.date',
    'gumga.directives.form.max.length',
    'gumga.directives.form.max.number',
    'gumga.directives.form.min.date',
    'gumga.directives.form.min.length',
    'gumga.directives.form.min.number',
    'gumga.directives.form.pattern',
    'gumga.directives.form.range.date',
    'gumga.directives.form.range.number',
    'gumga.directives.form.required',
  ])


})();

(function(){
	'use strict';
    /**
     * @ngdoc directive
     * @name gumga.core:gumgaFormButtons
     * @restrict E
     * @description O componente gumgaFormButtons pode ser utilizado para quando necessite de botões para o formulário,
     * tanto de continuar inserindo, de salvar e retroceder.
     *
     *  @param {Function} submit Parâmetro obrigatório que contém uma função que será executada quando o botão de continuar for clicado.
     *  @param {boolean} valid Parâmetro obrigatório que irá conter um valor booleano para validar caso o formulário é válido para liberar o botão de salvar.
     *  @param {Object} continue Object que deverá conter um atributo booleano chamado `value`, para controlar caso continuará inserindo ou não. Essa 
     *  opção aparecerá apenas quando o objeto $stateParams(pertencente ao ui-router) não possuir um id, ou seja, caso esteja numa tela de inserção.
     *  @param {boolean} confirm-dirty Parâmetro não obrigatório que irá conter um booleano para indicar caso deseje ter uma confirmação de saída do formulário
     *  quando este foi alterado alguma vez.
     */
	FormButtons.$inject = ["$state", "$stateParams", "$modal", "$rootScope"];
    function FormButtons($state, $stateParams,$modal,$rootScope) {
        return {
            restrict: 'E',
            scope: {
                do: '&submit',
                valid: '=',
                continue: '=?',
                confirmDirty: '=?'
            },
            template:
            '<div class="full-width-without-margin">'+
            '   <scope></scope>'+
            '   <div ng-class="getPosition()">' +
            '       <label id="continuarInserindo" ng-if="continue" >'+
            '           <input type="checkbox" name="continuar" ng-model="continue.value"/>' +
            '           <span>Continuar Inserindo</span>'+
            '       </label>' +
            '       <button class="btn btn-warning" style="margin-right: 0.8em" ng-click="back()" type="button"><i class="glyphicon glyphicon-floppy-remove"></i> Back</button>' +
            '       <button class="btn btn-primary" style="margin-right: 0" ng-click="do()" ng-disabled="!valid" type="button"><i class="glyphicon glyphicon-floppy-saved"></i> Save</button>' +
            '   </div>'+
            '<div>',
            require: '^form',
            link: function (scope, elm, attrs, ctrl) {
                if(!attrs.confirDirty) scope.confirmDirty = true;
                if(!$stateParams.id) scope.inNew = true;
                if(!attrs.continue) scope.continue = false;

                scope.getPosition = function () {
                    if (attrs.position == 'left') {
                        return 'pull-left';
                    }
                    return 'pull-right';
                };

                scope.back = function () {
                    if(scope.confirmDirty && ctrl.$dirty){
                        var modal = $modal.open({
                            template:
                            '<div>'+
                            '   <section class="modal-body">' +
                            '       <h4>Deseja sair sem salvar as alterações?</h4>' +
                            '   </section>'+
                            '   <div class="modal-footer">'+
                            '       <button class="btn btn-default" ng-click="handleClose(false)">Não</button>' +
                            '       <button class="btn btn-default" ng-click="handleClose(true)">Sim</button>' +
                            '   </div>'+
                            '</div>',
                            backdrop: false,
                            keyboard: false,
                            size: 'sm',
                            controller: ["$scope", "$modalInstance", "$state", "$rootScope", function($scope,$modalInstance,$state,$rootScope){
                                $scope.handleClose = function(_boolean){
                                    _boolean ? $modalInstance.close(true) : $modalInstance.close(false);
                                };  
                                if($state){
                                    $scope.currentState =$state.current.name;
                                    $rootScope.$on('$stateChangeStart',
                                        function(event, toState, toParams, fromState, fromParams){
                                            $modalInstance.dismiss();
                                        })
                                }
                            }]
                        });
                        modal.result.then(function(shouldIGo){
                            if(shouldIGo){
                                $state.go(attrs.back);
                                return 0;
                            }
                        })
                        } else {
                            $state.go(attrs.back);
                        }
                };

            }
        } 
    }

angular.module('gumga.directives.formbuttons',['ui.bootstrap','ui.router'])
.directive('gumgaFormButtons',FormButtons);

})();
(function () {
  'use strict';

  List.$inject = [];

  function List(){
    /**
     * GUIDE:
     *
     * Atributo:
     *  1. Sort {Function} [Função que será chamada para fora da directive para fazer o sort]
     *  2. Class {String} [Classe que será colocada na table **BOOTSTRAP** ***PARA MUDAR PRECISA TER A CLASSE TABLE***]
     *  3. Data {Array} [Array que será mostrado na tabela]
     *  4. OnClick {Function} [Função que será executada quando o usuário clicar em um registro]
     *  5. OnSort {Function} [Função que será executada quando o sort for executado]
     *  6. OnDoubleClick {Function} [Função que será executada quando o usuário clicar duas vezes em um registro]
     *
     * Objeto:
     *  1. Selection {String} [Valor que irá dizer se a seleção é multipla ou única (multi|single)]
     *  2. ItensPerPage {Number} [Valor que irá dizer quantos itens serão selecionados por página] Obs: expõe variável no $scope.
     *  3. SortDefault {String} [Valor que irá dizer qual coluna será a que será ordenada por padrão]
     *  4. SelectedValues {Array} [Variável em que os elementos selecionados irão ficar]
     *  5. Columns {Array de objetos} [array que irá conter as configurações da coluna.]
     *  6. Conditional {Function} [Função que receberá o valor da linha como parâmetro e retornará um JSON para marcar as cores irão para o background]
     *
     * Objeto Column:
     * 1. Title {String} [Valor que será compilado no HTML no lugar do título da coluna]
     * 2. Size {String} [Valor que irá dizer o tamanho da coluna **BOOTSTRAP**]
     * 3. Ordering {Number} [Número que irá ditar para a tabela qual a ordem das colunas, onde 0 é o mais baixo.]
     * 4. Content {String} [Valor que será compilado no HTML no conteúdo da coluna ]
     * 5. Sortable {Boolean} [Valor que irá dizer se a coluna é possível fazer o sort ou não.
     * 6. Conditional {Function} [Função que receberá o valor da linha como parâmetro e retornará um JSON para marcar as cores irão para o background da coluna]
     */

    function ctrl($scope, $element, $attrs, $transclude){
      var vm = this;
      vm.data = vm.data || [];
      vm.config = vm.config || {};

      function verifyEmpty($v,other){return (!$attrs.$v ? other : vm[$v])};
      function ensureColumns(obj){
        var _aux = [], order = 0;
        for(var key in obj) if (obj.hasOwnProperty(key)){
          _aux.push({
            title: key.toUppercase(),
            size: 'col-md-3',
            ordering: (order == 0 ? order : order++),
            content: '{{$value.' + key + '}}',
            sortable: true,
            conditional: angular.noop
          })
        }
        return _aux;
      }

      vm.generalConfig = {
        sort: verifyEmpty('sort',angular.noop),
        class: verifyEmpty('class','table'),
        data: vm.data,
        onClick: verifyEmpty('onClick',angular.noop),
        onDoubleClick: verifyEmpty('onDoubleClick',angular.noop),
        onSort: verifyEmpty('onSort',angular.noop),
        jsConfig: {
            selection: vm.config.selection || 'single',
            itemsPerPage: vm.config.ItensPerPage || 10,
            sortDefault: vm.config.sortDefault || '',
            selectedValues: vm.config.selectedValues || $scope.$parent.selectedValues,
            columns: vm.config.columns || ensureColumns(vm.data[0]),
            conditional: vm.config.conditional || angular.noop
        }
      };
    }
    ctrl.$inject = ["$scope", "$element", "$attrs", "$transclude"];;

    return {
      restrict: 'E',
      scope:{
        sort: '&?',
        class: '&?',
        data: '=',
        onClick: '&?',
        onDoubleClick: '&?',
        onSort: '&?',
        config: '='
      },
      controller: ctrl,
      controllerAs: 'vm',
      bindToController: true
    }
  }

  angular.module('gumga.directives.list',[])
  .directive('gumgaList',List);
})();


(function(){
	'use strict';

	ManyMany.$inject = ["$modal", "$compile", "$timeout"];
	/**
	 * @ngdoc directive
	 * @name gumga.core:gumgaManyToMany
	 * @restrict E
	 * @description
	 * 	O componente gumgaManyToMany é um componente que é utilizado para mostrar duas listas lado a lado, e permitir que um registro seja trocado de uma lista para outra,
	 * 	assim como também visualizado os seus valores(caso seja um objeto). Um exemplo do componente pode ser encontrado [aqui](http://embed.plnkr.co/gyrqAKQQGuEHwp2npv8G/).
	 *
	 * ---
	 * ## Configuração de como será mostrado o valor na lista
	 *
	 *Para que o programador possa escolher como os valores serão demonstrados, foram desenvolvidas duas tags que devem estar dentro do componente manyToMany.
	 * 		<pre> <left-field>{{$value}}</left-field>
	 * 		<right-field>{{$value}}</right-field></pre>
	 *
	 * @param {Array} left-list Parâmetro obrigatório que irá conter uma variável que possuirá um array, para ser mostrado na lista da esquerda.
	 *  *A lista da esquerda será filtrada e não conterá resultados iguais a da lista da direita.*
	 * @param {Array} right-list Parâmetro obrigatório que irá conter uma variável que possuirá um array, para ser mostrado na lista da direita.
	 * @param {Function} left-search Parâmetro obrigatório que irá conter uma variável que possuirá uma função que irá ser executada toda vez
	 * que o usuário digitar algo no input acima da lista. Essa função terá o valor do input como parâmetro. O parâmetro deverá ser este: `left-search="doSearch(text)"`
	 * @param {Function} right-search Parâmetro obrigatório que irá conter uma variável que possuirá uma função que irá ser executada toda vez
	 * que o usuário digitar algo no input acima da lista. Essa função terá o valor do input como parâmetro. O parâmetro deverá ser este: `right-search="doSearch(text)"`
	 * @param {Function} post-method Parâmetro não obrigatório que irá conter uma variável que possuirá uma função que irá ser executada quando o usuário desejar adicionar um valor
	 * caso sua busca não tenha trazido resultados.
	 * @param {Function} on-list-change Parâmetro não obrigatório que irá conter uma variável que possuirá uma função que irá ser executada quando o usuário tiver clicado em um registro
	 * e o mesmo tiver trocado de lista.
	 * @param {Function} on-value-visualization-opened Parâmetro não obrigatório que irá conter uma variável que possuirá uma função que irá ser executada quando o usuário tiver aberto o modal
	 * para visualização de dados
	 * @param {Function} on-value-visualization-closed Parâmetro não obrigatório que irá conter uma variável que possuirá uma função que irá ser executada quando o usuário tiver fechado o modal
	 * para visualização de dados
	 * @param {Boolean} authorize-add Parâmetro não obrigatório que irá conter uma variável que possuirá um booleano que irá fazer o controle para mostrar o botão de adicionar um registro caso a busca não
	 * tenha retornado nenhum registro
	 * @param {String} left-label Parâmetro não obrigatório que irá conter uma String que irá aparecer acima do input e da lista.
	 * @param {String} right-label Parâmetro não obrigatório que irá conter uma String que irá aparecer acima do input e da lista.
	 *

	 */
	function ManyMany($modal,$compile,$timeout){

		return {
			restrict: 'E',
			scope: {
				left: '=leftList',
				right: '=rightList',
				leftFn: '&leftSearch',
				rightFn: '&rightSearch',
				postMethod: '&',
				onListChange: '&?',
				onNewValueAdded: '&?',
				onValueVisualizationOpened: '&?',
				onValueVisualizationClosed: '&?',
				authorizeAdd: '=?'
			},
			transclude: true,
			link: function (scope, elm, attrs, ctrl, transcludeFn) {
				scope.left = scope.left || [];
				scope.right = scope.right || [];
				if (!attrs.authorizeAdd) scope.authorizeAdd = true;
				var mockObject = {};
				scope.texts = {left: '',right: ''};
				scope.template = '';
				scope.labels = {left: attrs.leftLabel,right: attrs.rightLabel};
				var eventHandler = {
					listChange: (attrs.onListChange? scope.onListChange : angular.noop),
					newValueAdded: (attrs.onNewValueAdded ? scope.onNewValueAdded : angular.noop),
					valueVisualizationOpened: (attrs.onValueVisualizationOpened ? scope.onValueVisualizationOpened :angular.noop),
					valueVisualizationClosed: (attrs.onValueVisualizationClosed ? scope.onValueVisualizationClosed :angular.noop)
				};
				transcludeFn(scope,function(cloneEl){
					angular.forEach(cloneEl,function(cl){
						var element = angular.element(cl)[0];
						switch(element.nodeName){
							case 'LEFT-FIELD':
							scope.texts.left = element.innerHTML;
							break;
							case 'RIGHT-FIELD':
							scope.texts.right = element.innerHTML;
							break;
						}
					});
					checkErrors();
				});
				mountRenderedContent();
				scope.$watch('left',function(){
					checkErrors();
					copyObject(scope.left[0]);
				});
				function copyObject(obj) {
					for (var key in obj) if (obj.hasOwnProperty(key)) {
						mockObject[key] = null;
					}
				}
				function checkErrors(){
					var errorTexts = [];
					if(!scope.texts.left || !scope.texts.right){
						errorTexts.push('You have\'nt provided the content to GumgaManyToMany directive');
					}
					errorTexts.forEach(function(txt){
						throw txt;
					});
					removeDuplicates();
				}
				function removeDuplicates(){
					function filterOnRight(text){
						return scope.right.filter(function($elm){
							return $elm[attrs.filterParameter] == text;
						}).length
					}
					scope.leftAux = scope.left.filter(function(elm){
						if(filterOnRight(elm[attrs.filterParameter]) == 0){
							return elm;
						}
					});
				}
				function mountRenderedContent(){
					var text =
					'<div class="full-width-without-padding">\n'+
					'   <div class="col-md-6" style="padding-left: 0">\n'+
					'       <strong><small>{{::labels.left}}</small></strong>\n' +
					'       <div class="{{showClass()}}">'+
					'           <input type="text" name="manymanyleft" ng-model="leftFilter" novalidate class="form-control"' + doesItHaveFunction('left',0) + ' ng-change="leftFn({param: leftFilter})" ng-model-options="{ updateOn: \'default blur\', debounce: {\'default\': 300, \'blur\': 0} }"/>\n' +
					'           <span class="input-group-addon" ng-show="showPlus(leftFilter)"> ' +
					'               <button type="button" style="border: 0;background-color: #EEE" ng-click="addNew(leftFilter)"><i class="glyphicon glyphicon-plus"></i></button>' +
					'           </span>' +
					'       </div>' +
					'       <ul class="list-group" style="max-height: 200px;overflow: auto;">\n' +
					'           <li class="list-group-item" style="display:flex;padding: 7px 15px;" ng-repeat="$value in leftAux ' + doesItHaveFunction('left',1) + '">' +
					'               <a class="inside-list-anchor" ng-click="removeFromAndAddTo(leftAux,right,$value)">' + scope.texts.left + '</a>' +
					'              <button class="badge" style="background-color: #81AEDA;cursor: pointer;border: 0" ng-click="halp($value)"><i class="glyphicon glyphicon-resize-full"></i></button>' +
					'           </li>\n'+
					'       </ul>'+
					'   </div>\n'+
					'   <div class="col-md-6" style="padding-right: 0">\n'+
					'       <strong><small>{{::labels.right}}</small></strong>\n'+
					'       <input type="text" name="manymanyleft" ng-model="rightFilter" novalidate class="form-control"' + doesItHaveFunction('right',0) + '/>\n'+
					'       <ul class="list-group" style="max-height: 200px;overflow: auto;">\n' +
					'           <li class="list-group-item" style="display:flex;padding: 7px 15px;" ng-repeat="$value in right ' + doesItHaveFunction('right',1) + '">' +
					'               <a class="inside-list-anchor" ng-click="removeFromAndAddTo(right,leftAux,$value)">' + scope.texts.right + '</a>' +
					'              <button class="badge badge-helper" ng-click="halp($value)"><i class="glyphicon glyphicon-resize-full"></i></button>' +
					'           </li>\n'+
					'       </ul>\n'+
					'   </div>\n'+
					'</div>\n';
					elm.append($compile(text)(scope));
				}
				scope.removeFromAndAddTo = function(removeFrom,addTo,value){
					removeFrom.splice(removeFrom.indexOf(value),1);
					eventHandler.listChange({$value:value});
					addTo.push(value);
				};
				scope.addNew = function(text){
					scope.leftFilter = '';
					scope.postMethod({value: text });
					eventHandler.newValueAdded();
				};
				scope.showClass = function(){
					if(scope.showPlus()){
						return 'input-group';
					}
					return '';
				};
				scope.halp = function(obj){
					scope.template =
					'<div class="modal-body">\n';
					for (var key in obj) if (obj.hasOwnProperty(key) && key != '$$hashKey' && key != 'oi' && key != 'version') {
						scope.template += '   <div class="form-group">\n';
						scope.template += '       <label><small>'+ key +'</small></label>\n';
						scope.template += '       <input type="text" ng-model="$value.' + key +'" disabled class="form-control"/>\n';
						scope.template += '   </div>\n';
					}
					scope.template += '   <div class="modal-footer">\n';
					scope.template += '       <button type="button" class="btn btn-warning" ng-click="back()">Back</button>\n';
					scope.template += '   </div>\n';
					scope.template += '</div>\n';
					eventHandler.valueVisualizationOpened();
					var mi = $modal.open({
						template: scope.template,
						size: 'sm',
						controller: ["$scope", "$value", "$modalInstance", function($scope,$value,$modalInstance){
							$scope.$value = $value;
							$scope.back = function(){
								$modalInstance.dismiss();
							}
						}],
						resolve: {
							$value: function(){
								return obj;
							}
						}
					});

					mi.result.then(function(){
						eventHandler.valueVisualizationClosed();
					})
				};
				scope.showPlus = function(){
					function filterLeft(){
						return scope.leftAux.filter(function(el){
							return el[attrs.filterParameter] == scope.leftFilter;
						}).length < 1;
					}
					function filterRight(){
						return scope.right.filter(function(el){
							return el[attrs.filterParameter] == scope.leftFilter;
						}).length < 1;
					}
					if(scope.authorizeAdd == true){
						return filterLeft() && filterRight();
					}
					return false;
				};

				scope.doesItHaveClass = function(){
					if(scope.left.length > 0){
						return '';
					}
					return 'input-group';
				};
				function doesItHaveFunction(field,place){
					if(place == 0){
						if(field == 'left' && attrs.leftFn){
							return  'ng-change= "' + attrs.leftFn  +'({text: leftFilter})" ';
						}
						if(field == 'right' && attrs.rightFn){
							return  'ng-change= "' + attrs.leftFn  +'({text: rightFilter})" ';
						}
						return '';
					} else {
						if(field == 'left' && !attrs.leftFn){
							return ' | filter: leftFilter';
						}
						if(field == 'right' && !attrs.rightFn){
							return ' | filter: rightFilter'
						}
						return '';
					}
				}
			}
		}
	}

		angular.module('gumga.directives.manytomany',['ui.bootstrap'])
		.directive('gumgaManyToMany',ManyMany)
	})();

(function(){
    'use strict';

    ManyToOne.$inject = ["$templateCache", "GumgaKeyboard", "$modal"];
    /**
     * @ngdoc directive
     * @name gumga.core:gumgaManyToOne
     * @restrict E
     * @description
     *  A directive gumgaManyToOne pode ser usada para quando o programador precise de um select que filtre uma lista assíncronamente.
     *  Ela também permite adicionar um registro caso a busca retorne uma lista vazia e permite também visualizar os atributos do registro selecionado.
     *  ---
     *  #Exemplo básico de utilização do GumgaManyToOne
     *  O exemplo desse componente pode ser encontrado [aqui](http://embed.plnkr.co/NYL3gItVsWLFcGxt5itz/).
     *
     * @param {Object} value Parâmetro obrigatório que irá conter uma variável que será o registro escolhido na lista.
     * @param {Array} list Parâmetro obrigatório que irá conter uma lista dos registros que foram buscados.
     * @param {Function} search-method Parâmetro obrigatório que irá conter uma função que fará a busca na lista assíncronamente. `search-method="getSearch(param)"`
     * @param {Function} post-method Parâmetro obrigatório que irá conter uma função que dependendo do parâmetro `async`, chamará a função async com o parâmetro
     * `post-method="post(value)"` e caso o parâmetro async não esteja presente ou seja falso, fará um push na lista.
     * @param {String} field Parâmetro obrigatório que irá conter o atributo do registro que está sendo procurado e o que estará na lista.
     * @param {Boolean} authorize-add Parâmetro não obrigatório que irá conter uma variável que possuirá um booleano que irá fazer o controle para mostrar o botão de adicionar um registro caso a busca não
     * tenha retornado nenhum registro
     * @param {Btava veoolean} async Parâmetro não obrigatório que irá dizer caso componente fará um post chamando a função passada ou um push na lista. Por default, o valor é
     * @param {Function} on-new-value-added Parâmetro não obrigatório que irá conter uma variável que possuirá uma função que irá ser executada quando o usuário adicionar um novo valor.
     * @param {Function} on-value-visualization-opened Parâmetro não obrigatório que irá conter uma variável que possuirá uma função que irá ser executada quando o usuário tiver aberto o modal
     * para visualização de dados
     * @param {Function} on-value-visualization-closed Parâmetro não obrigatório que irá conter uma variável que possuirá uma função que irá ser executada quando o usuário tiver fechado o modal
     * para visualização de dados
     */



    function ManyToOne($templateCache,GumgaKeyboard,$modal){
        $templateCache.put('mtoItem.html',
            '<span bind-html-unsafe="match.label | typeaheadHighlight:query" style="cursor: pointer;"></span>');
        var template ='<div class="full-width-without-padding">';
        template += '   <div class="form-group">';
        template += '       <div ng-class="showFullView() || authorizeAdd ? \'input-group\' : \'\'">';
        template += '           <input class="form-control"  ng-model="model" type="text" typeahead="$value as $value[field] for $value in proxySearchMethod()">';
        template += '           <span class="input-group-addon" style="background-color: transparent; padding: 3px 12px;border-left:0" ng-show="showFullView()"> ';
        template += '               <button class="badge" style="background-color: #6ECFFF;border: 0" ng-click="halp(model)" ><i class="glyphicon glyphicon-resize-full"></i></button>';
        template += '           </span>';
        template += '           <span class="input-group-addon" style="padding: 0 0.25%" ng-show="authorizeAdd"> ';
        template += '               <button type="button" style="border: 0;background-color: transparent" ng-click="addNew(model)" ><i class="glyphicon glyphicon-plus"></i></button>';
        template += '           </span>';
        template += '       </div>';
        template += '   </div>';
        template += '</div>';
        return {
            restrict : 'E',
            template: template,
            require: '^form',
            scope : {
                model:'=value',
                list: '=',
                searchMethod: '&',
                postMethod: '&addMethod',
                field: '@',
                onNewValueAdded: '&?',
                onValueVisualizationOpened: '&?',
                onValueVisualizationClosed: '&?'
            },
            link: function(scope, elm, attrs,ctrl){
                scope.formCtrl = ctrl;
                var ngModelCtrl = elm.find('input').controller('ngModel'),
                eventHandler = {
                    newValueAdded: (attrs.onNewValueAdded ? scope.onNewValueAdded : angular.noop),
                    valueVisualizationOpened: (attrs.onValueVisualizationOpened ? scope.onValueVisualizationOpened :angular.noop),
                    valueVisualizationClosed: (attrs.onValueVisualizationClosed ? scope.onValueVisualizationClosed :angular.noop)
                },
                async;
                !attrs.authorizeAdd ? scope.authorizeAdd = true : scope.authorizeAdd = JSON.parse(attrs.authorizeAdd);
                !attrs.async ? async = true : async = JSON.parse(attrs.async);
                scope.list = scope.list || [];
                function checkIfItIsString(string){
                    return ((typeof string).toUpperCase().trim()) === 'string'.toUpperCase().trim() && string.length > 1;
                }
                scope.$watch('model',function(){
                    checkIfItIsString(scope.model) ?
                    ctrl.$setValidity('GumgaManyToOne',false) : ctrl.$setValidity('GumgaManyToOne',true);
                });
                try {
                    GumgaKeyboard.bindToElement(elm.find('input')[0],'down',function(){ngModelCtrl.$setViewValue(' ')});
                } catch(e){

                }

                scope.showFullView = function(){
                    return ((typeof scope.model).toUpperCase().trim()) === 'object'.toUpperCase().trim() && scope.model != undefined;
                };

                scope.showPlus = function(){
                    return (((typeof scope.model).toUpperCase().trim()) === 'string'.toUpperCase().trim() && scope.authorizeAdd === true) ;
                };

                scope.proxySearchMethod = function(){
                  return scope.searchMethod({param: ngModelCtrl.$viewValue});
                };
                scope.addNew = function(text){
                    if(async) {
                        scope.postMethod({value: text})
                        .then(function(values){
                          scope.model = values.data.data;
                        })
                    } else {
                        scope.list.push(text);
                    }
                };
                scope.halp = function(obj){
                    var template = '';
                    template =
                    '<div class="modal-body">\n';
                    for (var key in obj) if (obj.hasOwnProperty(key) && key != '$$hashKey' && key != 'oi' && key != 'version' && key != 'password' && typeof obj[key] != 'object') {
                        template += '   <div class="form-group">\n';
                        template += '       <label><small>'+ key +'</small></label>\n';
                        template += '       <input type="text" ng-model="$value.' + key +'" disabled class="form-control"/>\n';
                        template += '   </div>\n';
                    }
                    template += '   <div class="modal-footer">\n';
                    template += '       <button type="button" class="btn btn-warning" ng-click="back()">Back</button>\n';
                    template += '   </div>\n';
                    template += '</div>\n';
                    eventHandler.valueVisualizationOpened();
                    var mi = $modal.open({
                        template: template,
                        size: 'sm',
                        controller: ["$scope", "$value", "$modalInstance", function($scope,$value,$modalInstance){
                            $scope.$value = $value;
                            $scope.back = function(){
                                $modalInstance.dismiss();
                            }
                        }],
                        resolve: {
                            $value: function(){
                                return obj;
                            }
                        }
                    });
                    mi.result.then(function(){
                        eventHandler.valueVisualizationClosed();
                    })
                };
            }
        }
    }
        angular.module('gumga.directives.manytoone',['ui.bootstrap','gumga.services.keyboard'])
        .directive('gumgaManyToOne',ManyToOne);
    })();


(function(){
	'use strict';
	Menu.$inject = ["$http", "$compile"];
	/**
	 * @ngdoc directive
	 * @name  gumga.core:gumgaMenu
	 * @restrict E
	 * @description
	 *  O componente gumgaMenu é uma directive que cria um menu na lateral esquerda da tela para facilitar a navegação do usuário no sistema.
	 *  Seus itens são carregados de forma dinâmica através de um arquivo `json` que é carregado através de uma requisição HTTP. Além disso,
	 *  ele faz um filtro de acordo com as keys passadas para ele também através de um arquivo `json`.
	 *  ## Exemplo
     *  Veja um exemplo em funcionamento [aqui](http://embed.plnkr.co/UcMtAor6sUA6s0oZnJiu/preview).
	 *  @param {String} menu-url Parâmetro obrigatório que irá conter uma variável com o endereço do arquivo `json` para que seja carregada as entradas do menu.
	 *  @param {String} keys-url Parâmetro obrigatório que irá conter uma variável com o endereço do arquivo `json` para que seja carregada as chaves que farão o filtro do menu.
	 *  @param {String} image Parâmetro obrigatório que irá conter uma variável com o endereço da imagem que ficará no menu.
	 *
 	 * ## Example
	 * 	###Exemplo de json para o menu:
	 * <pre>
    [
      {
        "label": "Home",
        "URL": "welcome",
        "key": "CRUD-BASE",
        "icon": "glyphicon glyphicon-home",
        "icon_color": "",
        "imageUrl": "",
        "imageWidth": "",
        "imageHeight": "",
        "filhos": []
      }
    ]
	 * 	</pre>
	 * 	###Exemplo de json para as keys:
	 * 	<pre>
    [
      "CRUD-BASE",
      "CRUD-User"
    ]
	 * 	</pre>
	 *
	 *
	 *  @param {String} menu-url Parâmetro obrigatório que irá conter uma variável com o endereço do arquivo `json` para que seja carregada as entradas do menu.
	 *  @param {String} keys-url Parâmetro obrigatório que irá conter uma variável com o endereço do arquivo `json` para que seja carregada as chaves que farão o filtro do menu.
	 *  @param {String} image Parâmetro obrigatório que irá conter uma variável com o endereço da imagem que ficará no menu.
	 *

	 */
	function Menu($http, $compile) {
		return {
			restrict: 'E',
			replace: true,
			scope: {},
			link: function (scope, el, attrs) {
				scope.v = [];
				var indexs = [];
				var count = 0;

				var menuOpen = false;

				$http.get(attrs.menuUrl).then(function (data) {
					scope.dados = data.data;
				}, function (data) {
					throw 'Erro:' + data;
				});

				$http.get(attrs.keysUrl).then(function (data) {
					scope.keys = data.data;
				}, function (data) {
					throw 'Erro:' + data;
				});

				scope.$watchGroup(['dados', 'keys'], function () {
					if (scope.dados && scope.keys) {
						gerateMenus();
					}
				});

				var gerateMenus = function () {
					var template = ['<div>'];
					template.push('<button id="btn-menu" class="btn btn-link" ng-click="mostrarMenu()"><i class="glyphicon glyphicon-align-justify"></i></button>');
					template.push('<nav id="menu" class="col-sm-3" name="menu">');
					template.push('<ul class="menu-holder">');
					template.push('<img ng-src="' + attrs.image + '" alt="logo" width="40%" class="img-centered">');
					for (var i = 0; i < scope.dados.length; i++) {
						if (keyIsValid(scope.dados[i].key)) {
							template.push(gerarNavPill(scope.dados[i], 'menu', {count: -1, label: null}));
						}
					}
					template.push('</ul>');
					template.push('</nav>');
					template.push('</div>');
					template = template.join('\n');
					el.append($compile(template)(scope));
				};

				var gerarNavPill = function (param, type, parent) {

					scope.v[count] = {
						isActive: false,
						parent: parent.count
					};

					var urlSelected = location.hash;
					var url = angular.copy(param.URL);
					url = '#/'+url.replace('.','/')
					if (urlSelected==url) {
							var template = ['<li class="' + type + '-option" style="background: #4ca089" >'];
					} else {
							var template = ['<li class="' + type + '-option">'];
					}

					if (param.filhos.length > 0 && verificarPermicaoFilho(param.filhos)) {
						template.push('<i  ng-class="v[' + count + '].isActive ? \' glyphicon glyphicon-chevron-down \' : \'glyphicon glyphicon-chevron-right\'" class="fa ' + type + '-color"  ng-click="resetarMenu(' + count + ')"></i>');
					} else {
						if (param.icon) {
							if (param.icon_color) {
								template.push('<i  class=" ' + param.icon + ' " style="color: ' + param.icon_color + '" ng-click="resetarMenu(' + count + ')"></i>');
							} else {
								template.push('<i  class=" ' + param.icon + ' " style="color: #fff" ng-click="resetarMenu(' + count + ')"></i>');
							}
						}
					}

					template.push('<a ui-sref="' + param.URL + '" ng-class="v[' + count + '].isActive ? \'is-active\' : \' \'"');
					if (parent.label === null || param.filhos.length > 0) {
						template.push('gumga-translate-tag="' + param.label.toLowerCase() + '.menuLabel">');
					} else if (param.filhos.length === 0) {
						template.push('gumga-translate-tag="' + parent.label.toLowerCase() + '.' + param.label.toLowerCase() + '">');
					}
					template.push(param.label);
					template.push('</a>');

					if (param.imageUrl) {
						if(param.imageWidth && param.imageHeight){
							template.push('<a ui-sref="' + param.URL + '"><img  src="' + param.imageUrl + '" style="width: '+param.imageWidth+'; height: '+param.imageHeight+';" ng-click="resetarMenu(' + count + ')"></i></a>');
						}else
						template.push('<a ui-sref="' + param.URL + '"><img  src="' + param.imageUrl + '" style="width: 20px; height: 20px;" ng-click="resetarMenu(' + count + ')"></i></a>');
					}

					var aux = count;

					count++;
					if (param.filhos.length > 0) {
						template.push('<ul ng-class="v[' + (count - 1) + '].isActive ? \' submenu-group-ativo\' : \'submenu-group\'" class="menu-holder">');
						for (var i = 0; i < param.filhos.length; i++) {
							if (keyIsValid(param.filhos[i].key)) {
								template.push(gerarNavPill(param.filhos[i], 'submenu', {count: aux, label: param.label}));
							}
						}
						template.push('</ul>');
					}
					template.push('</li>');
					return template.join('\n');
				};


				scope.resetarMenu = function (index) {
					var i;
					if (scope.v[index].isActive) {
						for (i = 0; i < scope.v.length; i++) {
							scope.v[index].isActive = false;
						}
						setarTrue(scope.v[index].parent);

					} else {
						for (i = 0; i < scope.v.length; i++) {
							scope.v[i].isActive = false;
						}
						setarTrue(index);
					}

				};

				var keyIsValid = function (key) {
					return scope.keys.indexOf(key) != -1;
				};

				function setarTrue(index) {
					if (index >= 0) {
						scope.v[index].isActive = true;
						setarTrue(scope.v[index].parent);
					}
				}

				scope.mostrarMenu = function () {
					menuOpen = !menuOpen;

					var elm = el.find('nav');
					if (menuOpen) {
						elm.addClass('open-menu');
					} else {
						elm.removeClass('open-menu');
					}
				};

				function verificarPermicaoFilho(filhos) {
					for (var i = 0; i < filhos.length; i++) {
						for (var j = 0; j < scope.keys.length; j++) {
							if (filhos[i].key == scope.keys[j]) {
								return true;
							}
						}
					}
					return false;
				}

			}
		};
	}

	angular.module('gumga.directives.menu',[])
	.directive('gumgaMenu',Menu);

})();

(function(){
    'use strict';
     Nav.$inject = ["$state", "GumgaWebStorage", "$modal", "$rootScope", "$timeout"];
     /**
      * @ngdoc directive
      * @name  gumga.core:gumgaNav
      * @restrict E
      * @description O componente gumgaNav é uma directive que cria uma barra de navegação superior, para ajudar o usuário. Dentro da barra de navegação, 
      *  possuímos uma busca que, quando o botão ENTER é pressionado, ele redireciona para a página de Busca Multi-entidades. Possui também informações sobre o usuário que está logado,
      *  uma opção para fazer o logout e outra para alterar a senha.
      *  ## Exemplo
      *  Veja um exemplo em funcionamento [aqui](http://embed.plnkr.co/PeJHAS6viutuekw614ZL/preview).   
      *  @param {String} title Parâmetro não obrigatório que contém uma string que será o título que aparecerá na barra de navegação. 
      *  @param {Boolean} multi-entity Parâmetro nao obrigatório que contém um valor booleano para compilar ou não a busca multientidade. Por padrão, o valor é true.
      *  @param {String} put-url Parâmetro não obrigatório que contém uma String ou uma variável que estará no $scope da directive para atribuir uma url para fazer o put do alterar a senha.
      *  @param {String} state Parâmetro obrigatório que contém uma String com o $state para qual será redirecionado quando o usuário clicar em Logout.
      */
     function Nav($state, GumgaWebStorage, $modal, $rootScope, $timeout) {
                 var template = [
                     '<nav id="navbar">',
                     '   <a href="#" class="navbar-logo" style="  float: left;">{{title | uppercase}}</a>' +
                             '   <span style="color: white; font-size: 1.4em;margin-left: 2%;float: left;"><small>{{info.organization}}</small></span>',
                     ' <div class="navbar-form navbar-left" ng-transclude></div>',
                     '   <b class="pull-right"><img ng-show="info.picture" class="img-circle" style="width: 40px;height: 40px;margin-right:10px;" src="{{info.picture}}" /> <a href ng-blur="hidePanel()" class="status-navbar" ng-click="showPanelNavBar()"><small  style="font-size: 85%;">{{info.name}} &nbsp;&nbsp; <i class="glyphicon glyphicon-triangle-bottom" style="margin-left: 1px"></i> </small></a></b>',
                     '    <span ng-if="multientity" ng-click="treatUrl()"  class="glyphicon glyphicon-search btn  pull-right" style="color:#fff;  padding-top: 1%;margin-right: 5%;height: 100%;"></span>',
                     '    <input ng-if="multientity" type="text" id="inputSearch" ng-blur="inputVisible = false" ng-keyup="submitSearch($event)" style="  background: none repeat scroll 0 0 rgba(244, 214, 214, 0.15); ',
                     '            border: double; ',
                     '            font-size: 14px; ',
                     '            outline: 0; ',
                     '            color: #fff;  ',
                     '            height: 100%; ',
                     '            margin: 0; ',
                     '            border-color: rgba(0, 0, 0, 0); ',
                     'z-index: 2000;" ng-model="search" ng-show="inputVisible" class="navbar-input flip-right" placeholder="Search">',
                     '</nav>',
                     '<div class="nav-panel" ng-show="showPanelNav">',
                     '   <div class="panel-body" id="navPanelBody">',
                     '           <button ng-repeat="link in navlinks" ng-click="handle(link)" class="btn btn-link" style="display:block;width: 100%;color: black; font-size: 0.9em;"><i class="{{link.glyphicon}}"> </i>{{link.text}} </button>',
                     '   </div>',
                     '</div>'
                 ];

                 var modalTemplate = [
                     '<div class="modal-header">Change Password</div>',
                     '<div class="modal-body">' +
                             '   <form name="ModalForm" novalidate>' +
                             '   <label> <small>Old Password</small></label>' +
                             '   <input type="password" ng-keyup="validPassword(user.newpass, user.oldpass)" ng-focus="oldPasswordInvalid=false" class="form-control" ng-model="user.oldpass" required/>' +
                             '   <label class="text-danger" style="width: 100%;"  ng-show="oldPasswordInvalid">Esta não é sua senha antiga</label>' +
                             '   <label><small> New Password</small></label>' +
                             '   <input type="password" class="form-control" ng-keyup="validPassword(user.newpass, user.oldpass)" ng-model="user.newpass" required/>' +
                             '   <label class="text-danger" style="width: 100%;"  ng-show="newPasswordInvalid">Por favor insira uma senha diferente da antiga.</label>' +
                             '   <label><small> New Password (again)</small></label>' +
                             '   <input type="password" class="form-control" ng-keyup="validPasswordConfirm(user.newpass,user.newpasscheck)" ng-model="user.newpasscheck" required/>' +
                             '   <label class="text-danger" style="width: 100%;"  ng-show="newPasswordConfirm">Repita a nova senha corretamente.</label>' +
                             '</div>',
                     '<div class="modal-footer">' +
                             '   <button class="btn btn-primary" ng-click="ok(user)" type="submit" ng-disabled="ModalForm.$invalid || !btnEnabled"> Save</button>' +
                             '   <button class="btn btn-warning" ng-click="cancel()" type="button"> Cancel</button>' +
                             '</div>' +
                             '</form>'];
                 return {
                     restrict: 'E',
                     scope: false,
                     transclude: true,
                     template: template.join('\n'),
                     link: function (scope, el, attrs) {
                        var putUrl = attrs.putUrl;
                        if(attrs.multiEntity == "true" || !attrs.multiEntity) scope.multientity = true;
                        (!scope[attrs.putUrl]) ? putUrl = scope[attrs.putUrl] : angular.noop;
                         scope.info = GumgaWebStorage.getSessionStorageItem('user');
                         scope.navlinks = [{text: 'Change Password', glyphicon: 'glyphicon glyphicon-user', value: 'pass'}, {text: 'Logout', glyphicon: 'glyphicon glyphicon-log-out', value: 'logout'}];
                         scope.inputVisible = false;    
                         scope.title = attrs.title || '';
                         scope.treatUrl = function () {
                             scope.inputVisible = true;
                             $timeout(function () {
                                 document.getElementById('inputSearch').focus();
                             }, 200);

                         };
                         scope.$on('close', function () {
                             scope.showPanelNav = false;
                         });
                         scope.showPanelNavBar = function () {
                             scope.showPanelNav = !scope.showPanelNav;
                         };
                         var obj = {};

                         scope.submitSearch = function (event) {
                             var key_code = event.keyCode;
                             if (key_code === 13)
                                 $state.go('multientity', {'search': scope.search})
                         }

                         scope.hidePanel = function () {
                             $timeout(function () {
                                 scope.showPanelNav = false;
                             }, 200);
                         };

                         scope.handle = function (link) {
                             scope.showPanelNav = !scope.showPanelNav;
                             switch (link.value) {
                                 case 'pass':
                                     var modalInstance = $modal.open({
                                         template: modalTemplate.join('\n'),
                                         size: 'sm',
                                         controller: ["$scope", "$modalInstance", "$http", "GumgaWebStorage", function ($scope, $modalInstance, $http, GumgaWebStorage) {
                                             var userSession = GumgaWebStorage.getSessionStorageItem('user');
                                             $scope.btnEnabled = false;
                                             $scope.oldPasswordInvalid = false;
                                             $scope.newPasswordConfirm = false;
                                             $scope.newPasswordInvalid = false;

                                             $scope.validPasswordConfirm = function (password, confimPassword){
                                                 if(password !== confimPassword){
                                                     $scope.newPasswordConfirm = true;
                                                 }else{
                                                     $scope.newPasswordConfirm = false;
                                                 }
                                                 $scope.enabledBtn();
                                             }

                                             $scope.validPassword = function (password, oldPassword){
                                                 $scope.user.newpasscheck = '';
                                                 if(password == oldPassword && password){
                                                     $scope.newPasswordInvalid = true;
                                                 }else{
                                                     $scope.newPasswordInvalid = false;
                                                 }
                                                 $scope.enabledBtn();
                                             }

                                             $scope.enabledBtn = function (){
                                                 if(!$scope.newPasswordConfirm && !$scope.newPasswordInvalid){
                                                      $scope.btnEnabled = true;
                                                 }else{
                                                      $scope.btnEnabled= false;
                                                 }
                                             }

                                             $scope.ok = function (user) {
                                                 $http.put(attrs.putUrl, {
                                                     user: userSession.user,
                                                     password: user.oldpass,
                                                     newPassword: user.newpass})
                                                         .success(function (data) {
                                                             if (data.response == 'BAD_PASSWORD') {
                                                                 $scope.oldPasswordInvalid = true;
                                                             } else if (data.response == 'OK') {
                                                                 $scope.$emit('successMessage', {
                                                                     title: 'Senha alterada',
                                                                     message: 'Sua senha foi alterada com sucesso.'
                                                                 })
                                                                 $modalInstance.close();
                                                             } else {
                                                                 $modalInstance.close();
                                                             }
                                                         });
                                             };
                                             $scope.cancel = function () {
                                                 $modalInstance.dismiss();
                                             };

                                         }],
                                         resolve: {}
                                     });
                                     modalInstance.result.then(function (selectedItem) {
                                         scope.selected = selectedItem;
                                     });
                                     break;
                                 case 'logout':
                                     $state.go(attrs.state);
                                     break;
                             }
                         };
                         el.find('input')
                                 .on('keypress', function (k) {
                                     if (k.keyCode == 13)
                                         scope.treatUrl()
                                 });
                     }
                 };
             }

    angular.module('gumga.directives.nav',['ui.bootstrap'])
    .directive('gumgaNav',Nav)
})();

(function(){
	'use strict';

	OneToMany.$inject = ["$modal", "$populate"];
	/**
	 * @ngdoc directive
	 * @name gumga.core:gumgaOneToMany
	 * @restrict E
	 * @description
	 * 	A directive gumgaOneToMany pode ser usada quando é necessária a criação de uma lista de objetos dentro do formulário, especialmente quando esses
	 * 	objetos acessam outros Services. Ela lança um modal para a criação destes objetos, que podem ser recursivos. Além disso, possui suporte a edição e remoção
	 * 	destes registros.
	 * @param {Array} children Parâmetro obrigatório que irá conter um Array que será utilizado para construir a lista.
	 * @param {String} template-url Parâmetro obrigatório que irá conter uma string referenciando a url na qual o template do modal estará.
	 * @param {String} property Parâmetro obrigatório que irá conter uma string com a propriedade do objeto que será mostrada na lista.
	 * @param {String} name *Utilizar modal-title*.
	 * @param {String} modal-title Parâmetro não obrigatório que irá conter uma string com o título que será passado para o controller
	 * @param {String} controller Parâmetro obrigatório que irá conter uma String que referenciará o nome do controller que será atribuido ao modal.
	 * *Este controller necessita injetar além do $scope, as propriedades **entity** e **title** *
	 * @param {Function} on-delete Parâmetro não obrigatório que irá conter uma variável que irá conter uma função que será chamada quando um elemento da lista for deletado.
	 * A função que está no on-delete
   * @param {Function} on-value-visualization-opened Parâmetro não obrigatório que irá conter uma variável que possuirá uma função que irá ser executada quando o usuário tiver aberto o modal
   * para visualização de dados
   * @param {Function} on-value-visualization-closed Parâmetro não obrigatório que irá conter uma variável que possuirá uma função que irá ser executada quando o usuário tiver fechado o modal
   * para visualização de dados
	 *
	 */
	function OneToMany($modal,$populate){
		var template = [
		'<div class="col-md-12" style="padding-left: 0;padding-right: 0">',
		'   <button type="button" class="btn btn-default" ng-click="newModal()">New</button>',
		'   <ul class="list-group">',
		'       <li ng-repeat="child in children" class="list-group-item">',
		'           {{::child[property]}}',
		'           <button type="button" class="btn btn-default pull-right btn-sm" ng-click="newModal(child)"><i class="glyphicon glyphicon-pencil"></i></button>',
		'           <button type="button" class="btn btn-danger pull-right btn-sm" ng-click="removeFromList(child)"><i class="glyphicon glyphicon-remove"></i></button>',
		'       <div class="clearfix"></div></li>',
		'   <ul>',
		'</div>',
		'<div class="clearfix"></div>'
		];

		return {
			restrict: 'E',
			template: template.join('\n'),
			scope: {
				children: '=',
				templateUrl: '@',
				property: '@displayableProperty',
				name: '@',
				controller: '@',
				onDelete: '&?',
				onValueVisualizationOpened: '&?',
				onValueVisualizationClosed: '&?',
				modalTitle: '@'
			},
			link: function (scope,elm,attrs) {
				var eventHandler = {
					valueVisualizationOpened: (attrs.onValueVisualizationOpened ? scope.onValueVisualizationOpened :angular.noop),
					valueVisualizationClosed: (attrs.onValueVisualizationClosed ? scope.onValueVisualizationClosed :angular.noop),
					delete: (attrs.onDelete ? scope.onDelete : angular.noop)
				};
				scope.newModal = newModal;
				scope.removeFromList = removeFromList;
				scope.getFromModal = getFromModal;
				var name = attrs.name || 'New';
				if(!scope.children) throw 'You must provide a list to GumgaOneToMany';
				if(!scope.templateUrl) throw 'You must provide a templateUrl for the modal';
				if(!scope.property) throw 'You must provide a property to display in GumgaOneToMany';
				if(!scope.controller) throw 'You must provide a controller to the modal';
				function getFromModal(selected){
					eventHandler.valueVisualizationClosed();
					if(JSON.stringify(scope.etty) !== '{}'){
						scope.children.splice(scope.children.indexOf(scope.etty),1,selected);
					} else {
						scope.children.push(selected);
					}
				}
				function removeFromList(obj){
					eventHandler.delete({$value: obj});
					scope.children.splice(scope.children.indexOf(obj),1);
				}
				function newModal(obj){
					scope.etty = {};
					if(obj){
						scope.etty= obj;
					}
					eventHandler.valueVisualizationOpened();
					var modalInstance = $modal.open({
						templateUrl: scope.templateUrl,
						controller: scope.controller,
						resolve: {
							entity: function(){
								return scope.etty;
							},
							title: function(){
								return scope.name;
							},
							populateScope: function(){
								return $populate.populateScope;
							}
						}
					});
					modalInstance.result.then(getFromModal);
				}


			}
		};
	}

	angular.module('gumga.directives.onetomany',['gumga.services.populate'])
		.directive('gumgaOneToMany',OneToMany)


})();

(function () {
  'use strict';

  Query.$inject= [];
  function Query(){
    var _template =
    '<div class="col-md-12" ng-show="hasQueries && $parent.searchQueries.length > 0">'+
    '   <label><small>{{::label}}</small></label>'+
    '<div class="col-md-12">'+
    '<gumga-advanced-label ng-repeat="query in $parent.searchQueries"'+
    '                      attr="{{query.attribute.name}}"'+
    '                      hql="{{query.hql.label}}"'+
    '                      value="query.value"'+
    '                      index="$index"'+
    '                      disabled="true"'+
    '                      style="margin-right: .5%">'+
    '</gumga-advanced-label>'+
    '<div class="form-inline">'+
    ' <div class="input-group">'+
    '   <input type="text" class="form-control" placeholder="{{::inputPlaceholder}}"/>'+
    '   <span class="input-group-btn">'+
    '    <button class="btn btn-primary" ng-click="saveQuery({query: $parent.searchQueries})"><i class="glyphicon glyphicon-floppy-save"></i></button>'
    '   </span>'
    ' </div>'+
    '</div>'+
    ' </div>'+
    '</div>';
    return {
      restrict: 'E',
      scope:{
        saveQuery: '&',
        inputPlaceholder: '@?'
      },
      template: _template,
      link: function (scope,elm,attrs) {
        scope.label = attrs.label || 'Busca ativa:';

        if(scope.$parent.searchQueries){
          scope.hasQueries = true;
        }
      }
    }
  }

  angular.module('gumga.directives.queries',['gumga.directives.search.advancedlabel'])
  .directive('gumgaQueries',Query);
})();

(function(){
	'use strict';
	/**
	 * @ngdoc directive
	 * @name gumga.core:gumgaSearch
	 * @restrict E
	 * @description A directive gumgaSearch pode ser utilizada para fazer montar queries de busca, sejam essas buscas normais ou avançadas. É possível escolher
	 * quais campos no qual a busca será feita, assim como na busca avançada.
	 * ## Exemplo
     * Veja um exemplo em funcionamento [aqui](http://embed.plnkr.co/ezZITh3ZfmwVao0Xz1w6/preview).    
	 *
	 * O componente utiliza-se de tags que só funcionam dentro das tags do componente, que são as tags `<advanced-field></advanced-field>`. A tag de advanced-field 
	 * 	recebe dois atributos como parâmetro: `name` e `type` que recebem , respectivamente, o nome do atributo a ser pesquisado e qual seu tipo.
	 * 	<pre>
	 *  		<advanced-field name="nome" type="string"></advanced-field>
	 *  		<advanced-field name="idade" type="number"></advanced-field>
	 *  </pre>
	 * 
	 * @param {Function} advanced-method Parâmetro obrigatório que irá conter uma função que será utilizada para fazer a busca avançada.
	 * Para receber a query avançada, basta passar um parâmetro `param` para a função. `advanced-method="function(param)"`
	 * @param {Function} search-method Parâmetro obrigatório que irá conter uma função que será utilizada para fazer a busca simples.
	 * Para receber o campo e a pesquisa que foi feita, basta passar os parâmetros `field` e `param` para a função. `search-method="function(field,param)"`.
	 * @param {String} fields Parâmetro obrigatório que irá conter uma sequência de campos com o qual o componente irá criar a lista de atributos que serão pesquisáveis.
	 * Exemplo: `fields="id,name,company,age"`
	 * @param {Boolean} advanced Parâmetro não obrigatório que irá conter um valor booleano para controlar se o componente irá ou não fazer busca avançada
	 * @param {Function} on-search Parâmetro não obrigatório que irá conter uma função que será chamada quando uma busca simples for feita. 
	 * @param {Function} on-advanced-search Parâmetro não obrigatório que irá conter uma função que será chamada quando uma busca avançada for feita. 
	 *
	 * 
	 */
	angular.module('gumga.directives.search',
		[
		'gumga.directives.search.search',
		'gumga.directives.search.normalsearch',
		'gumga.directives.search.advancedsearch',
		'gumga.directives.search.advancedlabel',
		'gumga.directives.search.searchhelper',
		]);

})();

(function(){
  'use strict';
  /**
   * @ngdoc directive
   * @name gumga.core:gumgaTable
   * @restrict E
   * @description O componente **GumgaTable** serve para expor dados em forma de tabela.
   * O componente expõe no $scope.selectedEntities um array contendo os objetos das linhas selecionadas para que o desenvolvedor possa usa-los em ações.
   *
   * @example
   * Um exemplo da directive gumgaTable funcionando pode ser encontrado [aqui](http://embed.plnkr.co/SALkp5bKRZ1aywsrpmEX).
   *  <pre>
   *    <gumga-table values="list" columns="name,age"></gumga-table>
   *    <script>
   *    $scope.list = [{name: 'Guilherme', age: 28},{name: 'Igor', age: 19}];
   *    </script>
   *  </pre>
   *
   * @param {String} values Atributo obrigatório. Deve ser o nome do array exposto no $scope para popular a tabela.
   * @param {String} columns Atributo obrigatório. As propriedades do objeto que serão apresentados como colunas na tabela,
   * @param {String} size Possuem 3 opções de tamanhos, **large**, **medium** e **small**, que respectivamente ocupam, todo o espaço da row, dois terços e
   * um terço. O valor padrão é large.
   * @param {String} translate-entity Nome da entidade.
   * @param {Array} pages Deve conter os valores para apresentar opções de registros por página.
   * @param {String} table-class Possuem 3 opções, **bordered**, **striped** e **condensed**, que respectivamente, adiciona bordas a tabela,
   * alterna cores das linhas e diminui o espaçamento interno das linhas e colunas. O valor padrão é bordered.
   * o componente seguirá a ordem de colunas adicionada ao atributo.
   * @param {Boolean} multi-selection É true por padrão, determina a possibilidade da seleção de várias entidades ou apenas
   * uma por vez.
   * @param {Function} sort-function Nome da função atribuida ao $scope para manipular a ordenação, a função recebe dois
   * parâmetros, **field** e **way** que serão, a coluna e a direção da ordenação respectivamente, existem duas direções,
   * **asc** ou **desc**.
   * @param {String} sort-default Deve conter a **coluna** e a **direção** separados por virgula, será a ordenação padrão na primeira exibição da tabela.
   * @param {Expression} row-class Deve conter uma expressão condicional para marcar determinadas linhas correspondentes como
   * verdadeiras perante a expressão.
   * @param {Function} onSelect Nome da função que será executada ao evento click.
   * @param {Function} onSort Nome da função que será executada ao evento de sort.
   */
   Table.$inject = ["GumgaUtils", "$compile", "$rootScope", "$state", "GumgaKeyboard", "$timeout"];
   function Table(GumgaUtils, $compile,$rootScope,$state,GumgaKeyboard,$timeout) {
    return {
      restrict: 'E',
      scope: {
        multi: '=?multiSelection',
        list: '=values',
        pages: '=pages',
        sort: '&?sortFunction',
        rowClass: '=?',
        onSelect: '&?',
        onSort: '&?'
      },
      link: LinkFn,
      transclude: true
    };

    function LinkFn(scope, elm, attrs, ctrl, transcludeFn) {
      var eventHandler = {
        select: (attrs.onSelect ? scope.onSelect : angular.noop),
        sort: (attrs.onSort ? scope.onSort: angular.noop)
      };

      scope.$on('_clean',function(){
       scope.cleanSearch();
     });

      var ColumnObject = {};
      scope.indexes = [];
      scope.trs = [];
      scope.$parent.selectedEntities = [];
      scope.objectColumn = [];
      scope.conditionalColumns = [];
      var rawTableConfig = {
        multi: scope.multi,
        list: [],
        pages: scope.pages || [10, 25, 50],
        sortFn: attrs.sort? scope.sort : angular.noop,
        sortDf: !!attrs.sortDefault? attrs.sortDefault.split(',') : false,
        size: attrs.size || 'large',
        class: attrs.tableClass || 'bordered',
        columns: attrs.columns.split(','),
        headings: [],
        translate: attrs.translateEntity,
      };
      var itemsPerPage = window.sessionStorage.getItem('itemsPerPage') || rawTableConfig.pages[0];
      scope.itemsPerPage = itemsPerPage;
      scope.$parent.itemsPerPage = itemsPerPage;

      scope.$watch('list', function () {
        if (scope.list) {
          scope.$parent.selectedEntities = [];
          scope.tableconfig.list = scope.list;
          scope.indexes = [];

        }
      });

      setColumnConfig(rawTableConfig);

      function setColumnConfig(rawConfig) {
        rawConfig.columns.forEach(function (elm) {
          var obj = {
            label: GumgaUtils.camelCase(elm),
            field: elm
          };
          rawConfig.headings.push({label: obj.label, way: null});
          rawConfig.columns.splice(rawConfig.columns.indexOf(elm), 1, obj);
        });

        transcludeFn(function (clone) {
          angular.forEach(clone, function (cloneEl) {
            if (cloneEl.nodeName != "#text") {
              switch (cloneEl.nodeName) {
                case 'GUMGA-BOOLEAN-MASK':
                rawConfig.columns.forEach(function (obj) {
                  if (obj.field == cloneEl.getAttribute('column')) {
                    $.extend(obj, {
                      trueValue: cloneEl.getAttribute('boolean-true'),
                      falseValue: cloneEl.getAttribute('boolean-false')
                    });
                  }
                });
                break;
                case 'BUTTONS-COLUMN':
                scope.buttonElements = cloneEl.children;
                rawConfig.headings.push({label: ' ', way: null});
                break;
                case 'EXTRA-COLUMN':
                scope.extraElements = cloneEl.children;
                rawConfig.headings.push({label: ' ', way: null});
                break;
                case 'OBJECT-COLUMN':
                scope.objectColumn.push({column: cloneEl.getAttribute('column'),value: cloneEl.getAttribute('property')});
                break;
                case 'COLUMN-CLASS':
                scope.conditionalColumns.push({column: cloneEl.getAttribute('column'),conditional: cloneEl.getAttribute('conditional-class')});
                break;

              }
            }
          });
});
scope.tableconfig = rawConfig;
generateTable(scope.tableconfig);
}
function getConditions(){
  var conditionText = attrs.rowClass || '';
  return conditionText.replace(/{/,'').replace(/}/,'').split(',');
}
function generateTable(config) {
  var template = [];
  if (scope.pages) {
    var pagination =
    '<select ng-model="itemsPerPage" ng-change="changeItemsPerPage(itemsPerPage)">' +
    '<option ng-repeat="p in pages" value="{{ p }}" ng-selected="p == itemsPerPage">{{ p }}</option>' +
    '</select>';
    template.push(pagination);
  }
  switch (config.size) {
    case 'large':
    template.push(
      '<div class="full-width-without-padding" style="margin-top: 1%">' +
      '<button class="btn btn-default btn-xs" style="margin-bottom: 0.25%" ng-click="selectAll()">Selecionar todos</button>' +
      '<button class="btn btn-default btn-xs" style="margin-bottom: 0.25%;margin-left:0.25%" ng-click="cleanSearch()"> Limpar pesquisa</button>' +
      '<table class="table table-' + config.class + ' ">');
    break;
    case 'medium':
    template.push(
      '<div class="col-md-8" style="padding-left:0;padding-right: 0;">' +
      '<table class="table table-' + config.class + '">');
    break;
    case 'small':
    template.push(
      '<div class="col-md-4" style="padding-left:0;padding-right: 0;">' +
      '<table class="table table-' + config.class + '">');
    break;
  }
  template.push('<thead>');
  template.push('<tr>');
  if (attrs.sortFunction) {
    template.push(' <td ng-repeat="head in tableconfig.headings track by $index" ng-click="head.label !== \' \' ? sortAux(head) : \'\'"');
    template.push('     ng-class="head.label != \' \' ? \'clickable-td\' : \' \' ">');
    template.push('         <small>{{::head.label}}<i ng-class="(head.way != null && head.label !== \' \') ? (head.way === true ? \'glyphicon glyphicon-menu-up\' : \'glyphicon glyphicon-menu-down\') : \'\'"></i></small></td>');
  } else {
    template.push('<td ng-repeat="head in tableconfig.headings track by $index">{{::head.label}}');
  }
  template.push(' </td>');
  template.push('</tr>');
  template.push('</thead>');
  template.push('<tbody>');
  if (config.multi === false) {
    template.push('<tr style="{{::getClassFromConditionalRow(entity)}}" ng-class="returnClass($index)" ng-repeat="entity in tableconfig.list" class="used" ng-click="handleSingle(entity,$index)" ng-dblclick="goToEdit(entity.id)">' + generateTableCell(config) + '</tr>');
  } else {
    template.push('<tr style="{{::getClassFromConditionalRow(entity)}}" ng-class="returnClass($index)" ng-repeat="entity in tableconfig.list" class="used" ng-click="handleMultiple(entity,$index)" ng-dblclick="goToEdit(entity.id)" >' + generateTableCell(config) + '</tr>');
  }
  template.push('</tbody>');
  template.push('</table></div>');
  elm.append($compile(template.join('\n'))(scope));

}
var selected = false;

scope.goToEdit = function(index){
  $state.go(scope.tableconfig.translate + '.' + 'edit',{id: index});
};
scope.changeItemsPerPage = function(itemsPerPage){
  window.sessionStorage.setItem('itemsPerPage', itemsPerPage);
  scope.$parent.itemsPerPage = itemsPerPage;
};
scope.selectAll = function(){
  if(!selected){
    for(var i = 0, len = scope.tableconfig.list.length;i < len;i++){
      scope.indexes.push(i);
    }
    scope.$parent.selectedEntities = scope.tableconfig.list;
  } else {
    scope.indexes = [];
    scope.$parent.selectedEntities = [];
  }
  selected = !selected;
};


scope.cleanSearch = function(){
  $rootScope.$broadcast('normal',{field:scope.tableconfig.columns[1],param: ''});
  $rootScope.$broadcast('advanced',{hql: ''});
  scope.tableconfig.headings.forEach(function(elm){
    elm.way = null;
  })
};

scope.getClassFromConditionalRow = function (entity){
  var HelperObject = {};
  var conditionsFromTag = getConditions();
  conditionsFromTag.forEach(function(elm){
    HelperObject[elm.split(':')[0]] = eval(elm.split(':')[1]);
  });
  for(var key in HelperObject) if(HelperObject.hasOwnProperty(key) && HelperObject[key] === true){
    return 'border-left: 3px solid ' + key.trim();
  }
  return '';
};

function checkObject(field){
  for(var i = 0; i < scope.objectColumn.length;i++){
    if(scope.objectColumn[i].column === field){
      return '{{::entity.'+  scope.objectColumn[i].value +'}}';
    }
  }
  return -1;
}

function getClassFromConditionalCell(column,entity){
  scope.conditionalColumns.forEach(function(elm){
    if(elm.column.toLowerCase().trim() === column.toLowerCase().trim()){
      ColumnObject[elm.column] = {};
      elm.conditional.replace(/{/,'').replace(/}/,'').split(',')
      .forEach(function(arg){
        var x = arg.split(':');
        ColumnObject[elm.column][x[0].trim().replace(/"/g,'')] = x[1].trim();
      })
    }
  });
}


scope.getStyleFromCell = function(entity,column){
  if(ColumnObject[column.trim().toLowerCase()]){
    var auxObj = ColumnObject[column.trim().toLowerCase()];
    for(var key in auxObj) if(auxObj.hasOwnProperty(key) && eval(auxObj[key]) === true){
      return 'border-left: 3px solid ' + key.trim();
    }
  }
};

function generateTableCell(config) {
  var template = [];
  config.columns.forEach(function (elm) {
    getClassFromConditionalCell(elm.field);
    if (elm.trueValue) {
      template.push('<td style="{{::getStyleFromCell(entity,\' '+ elm.field + ' \')}}">{{::entity.' + elm.field + ' === true? \'' + elm.trueValue + '\' : \'' + elm.falseValue + '\'}}</td>');
    } else if(checkObject(elm.field) != -1){
      template.push('<td style="{{::getStyleFromCell(entity,\' '+ elm.field + ' \')}}">' + checkObject(elm.field) +' </td>');
    } else {
      template.push('<td style="{{::getStyleFromCell(entity,\' '+ elm.field + ' \')}}">{{::entity.'+ elm.field + '}} </td>');
    }
  });
  if (scope.buttonElements) {
    template.push('<td style="{{::getStyleFromCell(entity,\' '+ elm.field + ' \')}}">' + getSpecial(scope.buttonElements) + '</td>');
  }
  if (scope.extraElements) {
    template.push('<td style="{{::getStyleFromCell(entity,\' '+ elm.field + ' \')}}">' + getSpecial(scope.extraElements) + '</td>');
  }
  return template.join(' ');
}


function getSpecial(array) {
  var txt = [];
  angular.forEach(array, function (elm) {
    txt.push(elm.outerHTML);
  });
  return txt.join(' ');
}

            // Negação dupla transforma em boolean
            if (!!rawTableConfig.sortDf) {
              // Se houver o atributo sort-default monta o objeto e dispara o evento
              var objSortDefault = {
                field: rawTableConfig.sortDf[0],
                way: rawTableConfig.sortDf[1]
              };
              eventHandler.sort({field: objSortDefault.field});
              scope.sort(objSortDefault);
            }

            scope.sortAux = function (obj) {
                //Quando ele clica, ele verifica se já existe alguma coluna com sort, se já existir, retorna ela para null
                scope.tableconfig.headings.forEach(function (key) {
                  if (key != obj) {
                    if (key.way === true || key.way === false) {
                      key.way = null;
                    }
                  }
                });
                // Pega o index do objeto
                var index = scope.tableconfig.headings.indexOf(obj);
                //Seta o sort dele pra false ou true
                obj.way = !obj.way;
                //Remove da lista anterior o antigo e coloca o novo
                scope.tableconfig.headings.splice(index, 1, obj);
                var aux;
                // Se for true, é ascendente
                if (obj.way === true) {
                  aux = 'asc';
                } else {
                  aux = 'desc';
                }
                // Dispara o evento
                eventHandler.sort({field: obj.label.toLowerCase()});
                scope.sort({field: obj.label.toLowerCase(), way: aux});
              };

              scope.handleMultiple = function (entity, index) {
                if (GumgaUtils.areNotEqualInArray(scope.indexes, index) || scope.indexes.length < 1) {
                  scope.indexes.push(index);
                  scope.$parent.selectedEntities.push(entity);
                } else {
                  scope.indexes.splice(scope.indexes.indexOf(index), 1);
                  scope.$parent.selectedEntities.splice(scope.$parent.selectedEntities.indexOf(entity), 1);
                }
                eventHandler.select({selected: scope.$parent.selectedEntities});
              };

              scope.handleSingle = function (entity, index) {
                if (scope.indexes.length >= 1) {
                  scope.indexes = [];
                  scope.$parent.selectedEntities = [];
                }
                scope.selectedIndex = index;
                scope.indexes.push(index);
                scope.$parent.selectedEntities.push(entity);
                eventHandler.select({selected: scope.$parent.selectedEntities});
              };

              scope.returnClass = function (index) {
                if (!GumgaUtils.areNotEqualInArray(scope.indexes, index)) {
                  return 'info';
                }
                return '';
              };
            }
          }

          angular.module('gumga.directives.table',[])
          .directive('gumgaTable',Table);
        })();


(function(){
	'use strict';
	TranslateTag.$inject = ["GumgaTranslateHelper", "$compile"];
	function TranslateTag(GumgaTranslateHelper,$compile){
		var child;
		return {
			restrict: 'A',
			link: function(scope,elm,attrs){
				if(!attrs.gumgaTranslateTag) throw 'You must pass a valid value to gumgaTranslateTag';
				scope.__valueToTranslate = attrs.gumgaTranslateTag;
				if(GumgaTranslateHelper.getTranslate(scope.__valueToTranslate)){
					if(elm[0].childNodes.length > 0){
						scope.child = elm[0].childNodes[0];
						elm[0].innerHTML =  GumgaTranslateHelper.getTranslate(scope.__valueToTranslate);
						elm.append($compile(scope.child)(scope));
					} else {
						elm[0].innerHTML = GumgaTranslateHelper.getTranslate(scope.__valueToTranslate);
					}
				}
			}

		};
	}

	angular.module('gumga.directives.translatetag',['gumga.services.translate.helper','gumga.services.translate'])
		.directive('gumgaTranslateTag',TranslateTag);
})();
(function(){
	'use strict';
	angular.module('gumga.directives.translate',
		[
			'gumga.directives.translate.translatehelper',
			'gumga.directives.translate.translate',
			'gumga.directives.translate.translatetag'
		])
})();

(function(){
	'use strict';
	Upload.$inject = ["$http", "$parse", "$timeout"];
	/**
	 * @ngdoc directive
	 * @name gumga.core:gumgaUpload
	 * @restrict
	 * @description 
	 * 	O componente gumgaUpload pode ser utilizado para fazer upload de imagens. O framework GUMGA usa um método de upload
	 * 	de imagens que faz o upload do arquivo para uma pasta temporária e retorna um token. Quando o registro é salvo, o framework gumga 
	 * 	faz o bind da string que está no atributo com o arquivo temporário.
	 * 	@param {Objet} model Objeto que irá conter as informações da imagem.
	 * 	@param {Function} upload-method Função que será executada para fazer o upload da imagem para o arquivo temporário.
	 * 	@param {Function} delete-method Função que será executada para deletar a imagem do espaço temporário.
	 * 	@param {String} tooltip-text Mensagem que irá aparecer no tooltip da imagem.
	 */
	function Upload($http,$parse,$timeout){  

		var img = 	
		'<div ng-click="fireClick()" ng-show="flag" class="col-md-1" tooltip="{{::tooltipText}}" tooltip-placement="right">'+
		'	<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="128px" height="128px" viewBox="0 0 512 512" enable-background="new 0 0 512 512" xml:space="preserve">'+
		'		<path id="avatar" fill="#cccccc" d="M490.579,383.029c-14.152-22.086-61.763-35.824-108.835-55.453c-47.103-19.633-58.268-26.439-58.268-26.439'+
		'			l-0.445-45.182c0,0,17.646-13.557,23.127-56.074c11.01,3.198,22.619-16.461,23.237-26.824c0.625-9.98-1.508-37.662-14.981-34.877' +
		'			c2.754-20.845,4.741-39.586,3.764-49.505c-3.495-36.295-39.23-74.578-94.182-74.578c-54.95,0-90.7,38.283-94.193,74.578' +
		'			c-0.978,9.919,1.019,28.661,3.758,49.505c-13.455-2.785-15.587,24.897-14.979,34.877c0.635,10.363,12.196,30.021,23.255,26.824' +
		'			c5.462,42.517,23.122,56.074,23.122,56.074l-0.441,45.182c0,0-11.178,6.807-58.268,26.439' +
		'			c-47.104,19.629-94.683,33.367-108.851,55.453c-12.7,19.777-8.882,114.875-8.882,114.875h470.946' +
		'			C499.462,497.904,503.281,402.806,490.579,383.029z"/>' +
		'	</svg>' +
		'</div>'
;loca

		var template =
		'<div class="full-width-without-padding">' +
		img + 
		'   <img src="#" alt="Uploaded Image" ng-show="!flag" class="img-rounded" style="object-fit: cover"/>' +
		'   <input type="file" id="upload" ng-hide="true"/>' +
		'   <div class="col-md-12" style="padding-left: 0">' +
		'   <button type="button" class="btn btn-link" ng-hide="flag" ng-click="deleteImage()"> Delete Image <span class="glyphicon glyphicon-trash"></span></button>' +
		'</div>' +
		'</div>';
		return {
			restrict: 'AE',
			scope: {
				model: '=attribute',
				uploadMethod: '&',
				deleteMethod: '&',
				tooltipText: '@'
			},
			template: template,
			link:function(scope,elm,attrs){
				var model = $parse(attrs.attribute),
				modelSetter = model.assign,
				element = elm.find('input'),
				image = elm.find('img')[0],
				reader = new FileReader();


				scope.fireClick = function(){
					$timeout(function(){
						document.getElementById('upload')
							.click();	
					});
				}

				scope.$watch('model',function(){
					if(scope.model){
						if(scope.model.bytes){
							scope.flag = false;
							image.src = 'data:' + scope.model.mimeType + ';base64,' + scope.model.bytes;
							image.width = 200;
							image.height = 200;
						}
					} else {
						scope.model = {};
					}
				});

				if(!attrs.attribute){
					throw 'You must pass an attribute to GumgaUpload';
				}

				scope.flag = true;

				function scaleSize(maxW, maxH, currW, currH){
					var ratio = currH / currW;
					if(currW >= maxW && ratio <= 1){
						currW = maxW;
						currH = currW * ratio;
					} else if(currH >= maxH){
						currH = maxH;
						currW = currH / ratio;
					}
					return [currW, currH];
				}

				scope.deleteImage = function(){
					image.src = '';
					scope.flag = true;
					element[0].files = [];
					scope.deleteMethod();
				};

				element.bind('change',function(){
					scope.$apply(function(){
						var x;
						modelSetter(scope,element[0].files[0]);
						scope.flag = false;
						reader.onloadend = function(){
							image.src = reader.result;
							image.width = 200;
							image.height =200;
							var x = attrs.attribute.split('.');
							scope.uploadMethod({image: scope[x[0]][x[1]]})
							.then(function(val){
								scope.model.name = val.data;
							});
						};
						reader.readAsDataURL(element[0].files[0]);
					});
				});
			}
		};
	}

	angular.module('gumga.directives.upload',[])
		.directive('gumgaUpload',Upload);

})();
(function(){
	'use strict';
	AddressService.$inject = [];
	function AddressService(){
		return {
			everyUf: ['AC', 'AL', 'AM', 'AP', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MG', 'MS', 'MT', 'PA', 'PB', 'PE', 'PI', 'PR',
			'RJ', 'RN', 'RR', 'RS', 'SC', 'SE', 'SP', 'TO'],
			everyLogradouro: [	'Outros', 'Aeroporto', 'Alameda', 'Área', 'Avenida', 'Campo', 'Chácara', 'Colônia', 'Condomínio', 'Conjunto', 'Distrito',
			'Esplanada', 'Estação', 'Estrada', 'Favela', 'Fazenda', 'Feira', 'Jardim', 'Ladeira', 'Largo', 'Lago', 'Lagoa', 'Loteamento',
			'Núcleo', 'Parque', 'Passarela', 'Pátio', 'Praça', 'Quadra', 'Recanto', 'Residencial', 'Rodovia', 'Rua', 'Setor', 'Sítio',
			'Travessa', 'Trevo', 'Trecho', 'Vale', 'Vereda', 'Via', 'Viaduto', 'Viela', 'Via'],
			availableCountries: ['Brasil'],
			returnFormattedObject: function(){
				return {
					zipCode : null,
					premisseType: null,
					premisse: null,
					number: null,
					information: null,
					neighbourhood: null,
					localization: null,
					state: null,
					country: null
				}
			}
		}
	}

		angular.module('gumga.services.address',[])
		.factory('GumgaAddressService',AddressService);

	})();

(function(){
	'use strict';

	Alert.$inject = []
	/**
	 * @ngdoc service
	 * @name gumga.core:GumgaAlert
	 * @description O service GumgaAlert é uma nova versão da directive {@link gumga.core:gumgaAlert} e é utilizado para criar
	 * notificações growl-like. Para utilizar o service, basta incluir GumgaAlert como dependência.
	 * 
	 * *Observação: Para utilização do service no config do módulo, utilizar `GumgaAlertProvider`*
	 *
	 *
	 * ## Métodos
	 *
	 * O service GumgaAlert possui quatro métodos de criação de alerta, porém todos recebem o mesmo parâmetro. Foi optado por criar quatro
	 * métodos diferentes para aumentar a legibilidade.
	 * - createWarningMessage(title,message,options)
	 * - createDangerMessage(title,message,options)
	 * - createSuccessMessage(title,message,options)
	 * - createInfomessage(title,message,options)
	 *
	 *  ### Parâmetros
	 *  - `title`: Uma string que irá conter o título da mensagem que será criada.
	 *  - `message`: Uma string que irá conter o corpo da mensagem que será criada.
	 *  - `options`: Um objeto com opções adicionais para o alerta. Os atributos que podem ser passados para este objeto são:
	 *  	<pre>
	 *   		var config = {
	 *   		 offset: 50, //Tamanho da distância entre o alerta e tela.
	 *   		 timer: 100, //Tempo que irá demorar para a mensagem aparecer após
	 *   		 delay: 3500,
	 *   		 alowDismiss:true,
	 *   		 animationEnter: 'animated bounceInRight',
	 *   		 animationExit: 'animated bounceOutRight'
	 *   		}
	 * 		</pre> *Objeto com os valores padrões do alerta*
	 * 		
	 */
	function Alert(){
		return {
			$get: function(){
				return this;
			},
			__config: {
				warn: {
					icon: 'glyphicon glyphicon-warning-sign',
					type: 'warning'
				},
				danger: {
					icon: 'glyphicon glyphicon-exclamation-sign',
					type: 'danger' 
				},
				success: {
					icon:'glyphicon glyphicon-ok',
					type: 'success'
				},
				info: {
					icon: 'glyphicon glyphicon-info-sign',
					type: 'info'
				}
			},
			_notify: function(type,title,message,options){
				var config = this.__config[type]
				,		offset = options.offset || 50
				,		timer = options.timer || 100
				,		delay = options.delay || 3500
				,		alowDismiss = options.alowDismiss || true
				,		animationEnter = options.animationEnter || 'animated bounceInRight'
				,		animationExit = options.animationExit || 'animated bounceOutRight';
				$.notify({
					icon: config.icon,
					title: title,
					message: message
				},{
					type: type,
					offset: offset,
					timer: timer,
					delay: delay,
					alow_dismiss: alowDismiss,
					animate: {
							enter: animationEnter,
							exit: animationExit
						},
					template: '<div data-notify="container" class="col-xs-9 col-sm-3 alert alert-{0}" role="alert">' +
						'<button type="button" aria-hidden="true" class="close" data-notify="dismiss">×</button>' +
						'<span data-notify="icon"></span> ' +
						'<span data-notify="title"><b>{1}</b></span><br> ' +
						'<span data-notify="message">{2}</span>' +
						'</div>'
				})
			},
			createWarningMessage: function(title,message,options){
				if(!options) options = {};
				this._notify('warning',title,message,options);
			},
			createDangerMessage: function(title,message,options){
				if(!options) options = {};
				this._notify('danger',title,message,options);
			},
			createSuccessMessage: function(title,message,options){
				if(!options) options = {};
				this._notify('success',title,message,options);
			},
			createInfoMessage: function(title,message,options){
				if(!options) options = {};
				this._notify('info',title,message,options);
			}
		}
	}

	angular.module('gumga.services.alert',[])
		.provider('GumgaAlert',Alert);
})();
(function(){
	'use strict';

	Base.$inject = ["$http", "$q"];
	/**
	 * @ngdoc service
	 * @name gumga.core:GumgaBase
	 * @description
	 * 	O service GumgaBase pode ser utilizado como helper para fazer chamadas HTTP. Ele permite que o programador não precise incluir o service $http
	 * 	do AngularJS e já vem com algumas funções incluídas. Para utilizar o GumgaBase, basta íncluí-lo como dependência.
	 *
	 *
	 *  # Métodos
	 *  `GumgaBase.get(url,params)`
	 *
	 *  O método get aceita dois parâmetros `url` e `params` e retorna uma promise de uma chamada HTTP do tipo GET.
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">url</label>  Endereço no qual a chamada http será feita.
	 *  - <label class="label label-warning" style="margin-right: 1%">Object</label> <label class="label label-info">params</label> Parâmetros da query que será feita.
	 *  ### Retorno
	 *  - <label class="label label-info">HttpPromise</label> Retona uma promise da chamada HTTP GET.
	 *  ---
 	 *  `GumgaBase.getById(url,id)`
	 *
	 *  O método getById aceita dois parâmetros `url` e `id` e retorna uma promise de uma chamada HTTP do tipo GET.
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">url</label>  Endereço no qual a chamada http será feita.
	 *  - <label class="label label-warning" style="margin-right: 1%">[String|Number]</label> <label class="label label-info">id</label> Identificador do registro que será buscado.
	 *  ### Retorno
	 *  - <label class="label label-info">HttpPromise</label> Retona uma promise da chamada HTTP GET.
	 *  ---
	 *  `GumgaBase.getNew(url)`
	 *
	 *  O método getById aceita um parâmetro `url` e retorna uma promise de uma chamada HTTP do tipo GET.
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">url</label>  Endereço no qual a chamada http será feita e na qual
	 *   será feita a chamada para um novo registro.
	 *  ### Retorno
	 *  - <label class="label label-info">HttpPromise</label> Retorna uma promise da chamada HTTP GET.
	 *  ---
 	 *  `GumgaBase.deleteAll(url,array)`
	 *
	 *  O método deleteAll aceita dois parâmetros `url` e `array` e retorna uma promise de uma série de chamadas http do tipo DELETE que serão resolvidas ao mesmo tempo.
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">url</label>  Endereço no qual a chamada http será feita.
	 *  - <label class="label label-warning" style="margin-right: 1%">Array</label><label class="label label-info">array</label> Array com todas os registros que serão deletados
	 *  ### Retorno
	 *  - <label class="label label-info">HttpPromise</label> Retorna uma promise após todas as chamadas terem sido resolvidas.
	 *  ---
	 *  `GumgaBase.save(url,data)`
	 *
	 *  O método save aceita dois parâmetros `url` e `data` e retorna uma promise de de uma chamada HTTP POST.
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">url</label>  Endereço no qual a chamada http será feita.
	 *  - <label class="label label-warning" style="margin-right: 1%">Object</label><label class="label label-info">data</label> Objeto que deseja ser salvo.
	 *  ### Retorno
	 *  - <label class="label label-info">HttpPromise</label> Retorna uma promise da chamada HTTP POST.
	 *  ---
 	 *  `GumgaBase.update(url,data)`
	 *
	 *  O método deleteAll aceita dois parâmetros `url` e `data` e retorna uma promise de de uma chamada HTTP PUT.
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">url</label>  Endereço no qual a chamada http será feita.
	 *  - <label class="label label-warning" style="margin-right: 1%">Object</label><label class="label label-info">data</label> Objeto que deseja ser atualizado.
	 *  ### Retorno
	 *  - <label class="label label-info">HttpPromise</label> Retorna uma promise da chamada HTTP POST.
	 *  ---
 	 *  `GumgaBase.del(url,data)`
	 *
	 *  O método del aceita dois parâmetros `url` e `data` e retorna uma promise de de uma chamada HTTP DELETE. Esta função é chamada para cada registro passado dentro do Array
	 *  na função deleteAll.
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">url</label>  Endereço no qual a chamada http será feita.
	 *  - <label class="label label-warning" style="margin-right: 1%">Object</label><label class="label label-info">data</label> Objeto que deseja ser deletado.
	 *  ### Retorno
	 *  - <label class="label label-info">HttpPromise</label> Retorna uma promise da chamada HTTP DELETE.
	 *  ---
	 *  `GumgaBase.postImage(url,attribute,data)`
	 *
	 *  O método postImage aceita três parâmetros `url`,`attribute` e `data` e retorna uma promise de de uma chamada HTTP POST FORM-DATA.
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">url</label>  Endereço no qual a chamada http será feita.
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">attribute</label> Atributo no qual a imagem será feito o
	 *  bind após o form ter sido enviado completo.
	 *  - <label class="label label-warning" style="margin-right: 1%">Object</label><label class="label label-info">data</label> Dados da imagem que foi selecionada..
	 *  ### Retorno
	 *  - <label class="label label-info">HttpPromise</label> Retorna uma promise da chamada HTTP POST. Nesta promise, será retornado o valor de uma String que deverá ser atribuída ao atributo
	 *  onde estava a imagem. Esta string é um identificador para quando o registro for enviado através de um post.
	 *  ---
 	 *  `GumgaBase.deleteImage(url,attribute,data)`
	 *
	 *  O método del aceita três parâmetros `url`, `attribute` e `data` e retorna uma promise de uma chamada HTTP DELETE FORM-DATA.
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">url</label> Endereço no qual a chamada http será feita.
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">attribute</label> Atributo no qual a imagem será feito o
	 *  bind após o form ter sido enviado completo.
	 *  - <label class="label label-warning" style="margin-right: 1%">Object</label><label class="label label-info">data</label> Dados da imagem que foi selecionada.
	 *  ### Retorno
	 *  - <label class="label label-info">HttpPromise</label> Retorna uma promise da chamada HTTP DELETE.
	 *  ---
	 */
	function Base($http,$q){
		var defaultParams = {};
		this.get = get;
		this.getById = getById;
		this.getNew = getNew;
		this.deleteAll = deleteAll;
		this.save = save;
		this.update = update;
		this.del = del;
		this.postImage = postImage;
		this.deleteImage = deleteImage;

		function get(url,params) {
			if (!params) {
				params = defaultParams;
			}
			return $http.get(url, params);
		}

		function getById(url,id) {
			return $http.get(url + '/' + id);
		}

		function getNew(url){
			return $http.get(url+'/new');
		}

		function deleteAll(url,entities) {
			var promises = entities.map(function(entity){
				return del(url,entity);
			});
			return $q.all(promises);
		}

		function save(url,entity) {
			return $http.post(url, entity);
		}

		function update(url,entity) {
			return $http.put(url + '/' + entity.id, entity);
		}

		function del(url,entity) {
			return $http.delete(url + '/' + entity.id);
		}

		function postImage(url, attribute, model) {
			var fd = new FormData();
			fd.append(attribute, model);
			return $http.post(url + '/' + attribute + '/', fd, {
				transformRequest: angular.identity,
				headers: {'Content-Type': undefined}
			});
		}

		function deleteImage(url, attribute, value) {
			return $http.delete(url + '/' + attribute + '/' + value, {
				transformRequest: angular.identity,
				headers: {'Content-Type': undefined}
			});

		}
	}
	angular.module('gumga.services.base',[])
	.service('GumgaBase',Base);
})();


(function(){
	'use strict';
	DateService.$inject = [];
	function DateService(){
		return {
			formats: {
				DMY: /^(\d{1,2})\-(\d{1,2})\-(\d{4})$/,
				YMD: /^(\d{4})\-(\d{1,2})\-(\d{1,2})$/
			},
			validateFormat: function(format, date) {
				if (!this.formats.hasOwnProperty(format)) {
					throw 'Formato não suportado';
				}
				var regex = new RegExp(this.formats[format]);
				if (!regex.test(date)) {
					throw 'A data ' + date + ' não confere com o formato ' + format + '.';
				}
				return regex.test(date);
			}
		}
	}
	angular.module('gumga.services.date',[])
	.factory('GumgaDateService',DateService);
})();

(function(){
	'use strict';

	Keyboard.$inject = [];
	/**
	 * @ngdoc service
	 * @name gumga.core:GumgaKeyboard
	 * @description 
	 * 	A directive GumgaKeyboard é um Wrapper de uma biblioteca chamada [Mousetrap](https://craig.is/killing/mice) 
	 * 	que é utilizada para adicionar funcionalidades quando determinadas teclas são pressionadas.
	 *
	 * 	# Métodos
	 *
	 *  `GumgaKeyboard.addBind(key,function,event)`
	 *  
	 * 	O método `addBind` adiciona uma função a combinação de teclas passada como parâmetro. Ele recebe três parâmetros, `key` e `function` e `event`.
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">key</label> Quais teclas serão clicadas para que a função seja executada.
	 *  - <label class="label label-warning" style="margin-right: 1%">Object</label> <label class="label label-info">function</label> Função que será executada quando sequência de teclas especificadas for digitada pelo usuário.
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">event</label> Em qual evento de teclado será disparado, como por exemplo `keypress` ou`keydown`
	 *  ### Retorno
	 *  - <label class="label label-warning">Boolean</label> Retona um boolean. Se o bind foi feito, retorna true, caso ao contrário retorna false.
	 *  ---
 	 *  `GumgaKeyboard.removeBind(key)`
	 *  
	 * 	O método `removeBind` remove as funções que estão atribuídas a `key` que foi passada . Ele recebe um parâmetro `key`.
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">key</label> Quais teclas que o desenvolvedor deseja remover o bind.
	 *  
	 *  ---
	 *  
 	 *  `GumgaKeyboard.triggerBoundedEvent(key)`
	 *  
	 * 	O método `triggerBoundedEvent` dispara o evento atribuído a `key` que foi passada.
	 * 	
	 *  ###Parâmetros
	 *  
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">key</label> Quais teclas que o desenvolvedor deseja remover o bind.
	 *  
	 *  ---
	 *
	 * 	`GumgaKeyboard.bindToElement(element,key,function,event)`
 	 *  
	 * 	O método `bindToElement` adiciona uma função a combinação de teclas passada como parâmetro em um elemento específico. Ele recebe quatro parâmetros,`element`, `key` e `function` e `event`.
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">Element</label><label class="label label-info">element</label> Elemento no qual a sequência de teclas deve ser executada para disparar o evento.
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">key</label> Quais teclas serão clicadas para que a função seja executada.
	 *  - <label class="label label-warning" style="margin-right: 1%">Object</label> <label class="label label-info">function</label> Função que será executada quando sequência de teclas especificadas for digitada pelo usuário.
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">event</label> Em qual evento de teclado será disparado, como por exemplo `keypress` ou`keydown`
	 *  ### Retorno
	 *  - <label class="label label-warning">Boolean</label> Retona um boolean. Se o bind foi feito, retorna true, caso ao contrário retorna false.
	 *  ---
	 *
 	 * 	`GumgaKeyboard.unbindFromElement(element,key)`
 	 *  
	 * 	O método `unbindFromElement` remove as teclas do elemento passado como parâmetro. Ele recebe dois parâmetros,`element` e `key`.
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">Element</label><label class="label label-info">element</label> Elemento no qual a sequência de teclas vai ser retirada.
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">key</label> Quais teclas serão removidas do element.
	 *  ---
	 *  
	 * 	`GumgaKeyboard.bindToMultipleElement(array,key,function,event)`
 	 *  
	 * 	O método `bindToElement` adiciona uma função a combinação de teclas passada como parâmetro em um elemento específico. Ele recebe quatro parâmetros,`element`, `key` e `function` e `event`.
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">Array</label><label class="label label-info">array</label> Lista dos elementos que serão adicionados a sequência de teclas.
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">key</label> Quais teclas serão clicadas para que a função seja executada.
	 *  - <label class="label label-warning" style="margin-right: 1%">Object</label> <label class="label label-info">function</label> Função que será executada quando sequência de teclas especificadas for digitada pelo usuário.
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">event</label> Em qual evento de teclado será disparado, como por exemplo `keypress` ou`keydown`
	 *  ### Retorno
	 *  - <label class="label label-warning">Boolean</label> Retona um boolean. Se o bind foi feito, retorna true, caso ao contrário retorna false.
	 *  ---
	 *
 	 * 	`GumgaKeyboard.getBinds()`
 	 *  
	 * 	O método `getBinds` retorna todos os binds que foram adicionados.
	 *
	 * 
	 *  ### Retorno
	 *  - <label class="label label-warning">Array</label> Retorna uma lista de todos os binds já feitos.
	 *  
	 *  ---
	 */
	function Keyboard(){
		return {
			addBind: function(key,fn,event){
				if(key && fn){
					Mousetrap.bind(key,fn,event? event : '');
					this.__binds.push(key);
					return true;
				}
				return false;
			},removeBind: function(key){
				if(key){
					Mousetrap.unbind(key);
					this.__binds.splice(this.__binds.indexOf(key),1);
				}
			},
			triggerBoundedEvent: function(key){
				if(key){
					Mousetrap.trigger(key);
				}
			},
			bindToElement: function(element,key,fn,event){
				if(element && key && fn){
					Mousetrap(element).bind(key,fn,event ? event: '');
					this.__binds.push(key);
					return true;
				}
				return false;
			},
			unbindFromElement: function(element,key){
				if(element && key) {
					Mousetrap(element).unbind(key);
				}
			},
			bindToMultipleElements: function(arrayOfElements,key,fn,event){
				for(var i = 0, len = arrayOfElements.length; i < len; i++) if(key && fn){
					Mousetrap(arrayOfElements[i]).bind(key,fn,event? event: '');
					this.__binds.push(key);
				}
			},
			getBinds: function(){
				return this.__binds;
			},
			__binds: []
		}
	}
	angular.module('gumga.services.keyboard',[])
		.factory('GumgaKeyboard',Keyboard);
})();
(function(){
	'use strict';

	Populate.$inject = [];
	/**
	 * @ngdoc service
	 * @name gumga.core:$populateProvider
	 * @description O service **$populate** é utilizado para adicionar funções básicas de CRUD, que já fazem a conexão com o Service
	 *  (*Melhor utilizado com o service GumgaRest*), possibilitando assim que o $scope fique limpo. É possível também criar uma configuração
	 *  nova para ser utilizada, extender as já criadas e recuperar o objeto de controle da configuração.
	 *
	 * 	As funções criam um objeto com o nome do ID passado para armazenar os dados. Além disso, o identificador é utilizado para nomear as funções. Caso o Identificador
	 * 	passado seja `User` e a função seja `get`, o nome da função será `userGet`, para evitar colisão de nomes.
	 * 	Todas as funções possuem eventos que são disparados antes e depois da execução da função, para ajudar o desenvolvedor a extender as funcionalidades
	 * 	das funções sem precisar sobrescrever-las. Para utilizar estes eventos, basta adicionar um listener no $scope, como por exemplo:
	 *  <pre>
	 *  	$scope.$on('beforeGet',function(){
	 *    alert('Antes do Get!');
	 *  	})
	 *
	 * 		$scope.$on('afterGet',function(values){
	 *		  // values é retorno da função asíncrona.
	 * 		})
	 * 	</pre>
	 *
	 *
	 * # Como utilizar:
	 *
	 * 	Para utilizar o assistente, é necessário injetar como dependência no bloco de configuração do módulo:
	 * 	<pre>
	 *  	angular.module('sample',['gumga.core'])
	 *  	.config(function($populateProvider){
	 *     $stateProvider
   *   	 .state('crud.list', {
   *      url: '/list',
	 *      templateUrl: 'app/modules/crud/views/list.html',
	 *      controller: 'CrudController',
   *      resolve:  {
   *       populateScope: function(){
   *        return $populateProvider.populateScope;
   *       }
   *     }
   *   })
	 *   })
	 *  </pre>
	 *
	 * 	E depois no controller, utilizar ele executando a função populateScope que foi passada através do resolve:
	 * 	<pre>
	 * 		angular.module('sample')
	 * 		.controller('SampleController',
	 * 	   ['$scope','populateScope','UserService',function($scope,populateScope,UserService){
	 * 		   populateScope($scope,UserService,'User','base-list');
	 * 	   }])
	 * 	</pre>
	 *
	 * 	Pode-se optar também por não incluir no módulo de configuração, mas direto no controller:
	 * 	<pre>
	 * 		angular.module('sample')
	 * 		.controller('SampleController',
	 * 	   ['$scope','$populate','UserService',function($scope,$populate,UserService){
	 * 		   $populate.populateScope($scope,UserService,'User','base-list');
	 * 	   }])
	 * 	</pre>
	 *
	 * # Configurações:
	 *
	 * 	- `base-list`: A configuração `base-list` serve para incluir funções gerais que são necessárias em páginas de listagem, que são:
	 * 		- `get`
	 * 		- `resetAndGet`
	 * 		- `getById`
	 * 		- `update`
	 * 		- `delete`
	 *
	 *    - `sort`
	 *    - `search`
	 *    - `advancedSearch`
	 *
	 *
	 * 	- `base-form`: A configuração `base-form` serve para incluir funções gerais que são necessárias em páginas de formulário, que são:
	 * 		- `getNew`
	 * 		- `getById`
	 * 		- `save`
	 * 		- `update`
	 * 		- `saveImage`
	 *
	 *    - `deleteImage`
	 *
	 *
	 * 	- `many-to-many`: A configuração `many-to-many` serve para incluir funções que comumente são utilizadas em relações muitos para muitos, que são:
	 * 		- `search`
	 * 		- `save`
	 * 		- `searchAsync`
	 * 		- `saveAsync`
	 *
	 * 	- `many-to-one`: A configuração `many-to-one` serve para incluir funções que comumente são utilizadas em relações muitos para um, que são:
	 * 		- `search`
	 * 		- `save`
	 * 		- `saveAsync`
	 *
	 *	## Implementações:
	 *		Para ver as implementações das funções acima, clique [aqui]().
	 *
	 *	# Métodos
	 *  `$populate.setConfig(name,value)`
	 *
	 *  O método setConfig aceita dois parâmetros `name` e `value`, o nome da configuração e o objeto que irá fazer a configuração.
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">name</label> String que será usada para identificar o objeto que será criado.
	 *  - <label class="label label-warning" style="margin-right: 1%">Object</label> <label class="label label-info">value</label> Objeto de configuração que será usado.
	 *   Para adicionar a função, coloque o nome da função e o valor dele como `true`
	 *
	 *  ---
	 *
	 *  `$populate.getConfig(name)`
	 *
	 *  O método getConfig aceita um parâmetro `name`, que é o nome da configuração desejada.
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">name</label> String que será usada para identificar o objeto que será recuperado.
	 *   Para adicionar a função, coloque o nome da função e o valor dele como `true`
	 *
	 * 	### Retorno
	 *
	 *  - <label class="label label-info">Object</label> Configuração que será recuperada da função.
	 *
	 *
	 *  ---
	 *
	 *  `$populate.setMethod(name,config,function)`
	 *
	 *  O método setMethod aceita três parâmetros: `name`,`config`, `function`. Este método é utilizado para extender as funcionalidades de uma configuração.
	 *
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">name</label> String que será usada para identificar como será o nome da função a ser adicionada.
	 *   Para adicionar a função, coloque o nome da função e o valor dele como `true`
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">config</label> String que será usada para identificar qual objeto de configuração esta função será adicionada.
	 *   Para adicionar a função, coloque o nome da função e o valor dele como `true`
	 *  - <label class="label label-warning" style="margin-right: 1%">Function</label><label class="label label-info">function</label> Função que será adicionada ao $scope. *Ao passar a função, o desenvolvedor
	 *  tem acesso a 4 parâmetros que serão utilizados para definir a função no scope: `Scope`, `Service`,`Id`*.
	 *
	 *  ---
	 *
 	 *
	 *  `$populate.populateScope(scope,service,id,config)`
	 *
	 *  O método populateScope aceita quatro parâmetros: `scope`,`service`, `id` e `config`. Este método é utilizado para popular o $scope do controlador com as funções da configuração.
	 *
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">Object</label><label class="label label-info">scope</label> Objeto onde as funções são colocadas, caso sejam num controlador, no *$scope*.
	 *   Para adicionar a função, coloque o nome da função e o valor dele como `true`
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">id</label> Identificador que será utilizado para armazenar os dados no $scope, além de nomear
	 *  as funções.
 	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">config</label> String que será utilizada para definir qual configuração será utilizada.
	 *  ---
	 */

	function Populate(){
		var helpers = {}, configs = {}, methods = {};
		helpers.guaranteeString = function(s){ return (s && angular.isString(s))};
		helpers.guaranteeArray = function(a){ return (a && angular.isArray(a))};
		helpers.guaranteeIsDefined = function(d){ return angular.isDefined(d)};
		helpers.guaranteeBasicList = function(s){ return (s && this.guaranteeString(s) && s == 'basic-list')};
		configs['base-list']= {
			get: true,
			resetAndGet: true,
			getById: true,
			update: true,
			delete: true,
			sort: true,
			search: true,
			advancedSearch: true,
			resetQuery: true
		};
		configs['base-form'] = {
			getNew: true,
			getById: true,
			save: true,
			update: true,
			saveImage: true,
			deleteImage: true
		};

		configs['many-to-many'] = {
			search: true,
			save: true,
			searchAsync: true,
			saveAsync: true
		}

		configs['many-to-one']={
			save: true,
			searchAsync: true,
			saveAsync: true
		}


		methods.searchAsync = function(Scope,Service,Id){
			Scope[Id.toLowerCase() + 'AsyncSearch'] = function(field,value){
				return Service.getSearch(field, value)
				.then(function (data) {
					return data.data.values;
				});
			}
		}


		methods.saveAsync = function(Scope,Service,Id){
			Scope[Id.toLowerCase() + 'AsyncSave'] = function(value,param){
				var obj = {};
				obj[param] = value;
				return Service.update(obj);
			}
		}
		methods.get = function(Scope,Service,Id){
			Scope[Id]= {};
			Scope.page = 0;
			Scope[Id.toLowerCase() + 'Get']= function(page) {
				Scope.$broadcast('beforeGet');
				Service.get(page)
				.then(function (values) {
					Scope[Id].content = values;
					Scope.$broadcast('afterGet',values);
				})
			}
			Scope[Id.toLowerCase() + 'Get']();
		};
		methods.resetAndGet = function(Scope,Service,Id){
			Scope[Id.toLowerCase() + 'ResetAndGet'] = function(){
				Scope.page = 0;
				Scope.$broadcast('beforeResetAndGet');
				Service.resetAndGet()
				.then(function(values){
					Scope[Id].content = values;
					Scope.$broadcast('afterResetAndGet',values);
				})
			}
		};
		methods.getNew = function(Scope,Service,Id){
			Scope[Id] = Scope[Id] || {};
			Scope[Id.toLowerCase() + 'GetNew'] = function(){
				Scope.$broadcast('beforeGetNew');
				Service.getNew()
				.then(function(values){
					Scope.$broadcast('afterGetNew',values);
					Scope[Id]['new' + Id] = values;
				})
			}
		};
		methods.getById = function(Scope,Service,Id){
			Scope[Id.toLowerCase() + 'GetById'] = function(id){
				Scope.$broadcast('beforeGetById');
				Service.getById(id)
				.then(function(values){
					Scope[Id]['id' + id] = values;
					Scope.$broadcast('afterGetById',values);
				})
			}
		};
		methods.save = function(Scope,Service,Id){
			Scope[Id.toLowerCase() + 'Save'] = function(value,param){
				Scope.$broadcast('beforeSave',value);
				var obj = {};
				obj[param] = value;
				Service.update(obj)
				.then(function(values){
					Scope.$broadcast('afterSave',values);
				})
			}
		};
		methods.update = function(Scope,Service,Id){
			Scope[Id.toLowerCase()+'Update'] = function(value){
				Scope.$broadcast('beforeUpdate',value);
				Service.update(value)
				.then(function(values){
					Scope.$broadcast('afterUpdate',values);
				})
			}
		};
		methods.delete = function(Scope,Service,Id){
			Scope[Id.toLowerCase() + 'Delete'] = function(value){
				Scope.$broadcast('beforeDelete');
				Service.deleteCollection(value)
				.then(function(values){
					Scope.$broadcast('afterDelete',values);
					Scope[Id.toLowerCase() + 'Get']();
				})
			}
		};
		methods.sort = function(Scope,Service,Id){
			Scope[Id.toLowerCase()+'Sort'] = function(field,way){
				Scope.$broadcast('beforeSort');
				Service.sort(field,way)
				.then(function(values){
					Scope[Id].content = values;
					Scope.$broadcast('afterSort',values);
				})
			}
		};
		methods.saveImage = function(Scope,Service,Id){
			Scope[Id.toLowerCase() + 'SaveImage'] = function(attribute,model){
				Scope.$broadcast('beforeSaveImage');
				return Service.saveImage(attribute,model);
			}
		};
		methods.deleteImage = function(Scope,Service,Id){
			Scope[Id.toLowerCase() + 'DeleteImage'] = function(attribute,model){
				Scope.$broadcast('beforeDeleteImage');
				Service.deleteImage(attribute,model)
				.then(function(values){
					Scope.$broadcast('afterDeleteImage',values);
				})
			}
		};
		methods.search = function(Scope,Service,Id){
			Scope[Id.toLowerCase() + 'Search'] = function(field,param){
				Scope.$broadcast('beforeSearch');
				Service.getSearch(field,param)
				.then(function(values){
					Scope[Id].content = values;
					Scope.$broadcast('afterSearch',values);
				})
			}
		}
		methods.advancedSearch = function(Scope,Service,Id){
			Scope[Id.toLowerCase() + 'AdvancedSearch'] = function(param){
				Scope.$broadcast('beforeAdvancedSearch',param)
				Service.getAdvancedSearch(param)
				.then(function(values){
					Scope[Id].content = values;
					Scope.$broadcast('afterAdvancedSearch',values)
				})
			}
		}
		methods.resetQuery = function(Scope,Service,id){
			Scope[id.toLowerCase() + 'ResetQuery'] = function(){
				Scope.page = 0;
				Service.resetQuery();
			}
		}
		return {
			setConfig: function(n,v){
				helpers.guaranteeString(n) && helpers.guaranteeIsDefined(v) ? (configs[n] = v) : angular.noop;
			},
			getConfig: function(string){
				return configs[string];
			},
			setMethod: function(name,config,fn){
				if(!(helpers.guaranteeString(name) && helpers.guaranteeString(config)))
					throw 'One of $populateProvider.setMethod arguments is wrong.';
				configs[config][name] = true;
				methods[name] = fn;
			},
			populateScope: function(scp,svc,id,config){
				if(!helpers.guaranteeIsDefined(scp)) throw 'The $scope passed for populateScope wasn\'t defined';
				if(!helpers.guaranteeIsDefined(id)) throw 'The identifier for populateScope must be passed';
				if(!helpers.guaranteeIsDefined(config)) throw 'The configuration for populateScope must be passed';
				if(!helpers.guaranteeIsDefined(svc)) throw 'The service for populateScope must be passed';
				if(configs[config]){
					scp[id] = {};
					scp[id].content = {};
					var configuration = configs[config];
					for (var key in configuration) if(configuration.hasOwnProperty(key)){
						methods[key](scp,svc,id);
					}
				}
			},
			$get: function(){
				return this;
			}
		}
	}
	angular.module('gumga.services.populate',[])
	.provider('$populate',Populate)
})();

(function(){
	'use strict';

	Base.$inject = ["$http", "$q"];
	/**
	 * @ngdoc service
	 * @name gumga.core:GumgaRest
	 * @description
	 * 	O service GumgaRest é uma evolução do service {@link gumga.core:GumgaBase}, pois sua configuração não necessita
	 * 	de nenhuma outra configuração adicional no service que irá chamá-lo.
	 *
	 * ## Exemplo
	 * <pre>
	 * angular.module('sample',['gumga.core'])
	 * .service('GumgaRest',function(GumgaRest){
	 * 	   //Exemplo de utilização.
	 * 	   var service = new GumgaRest('http://www.gumga.com.br/api');
	 *     // Ou, caso não queira adicionar nenhum método, utilizar:
	 *     // return new GumgaRest('http://www.gumga.com.br/api');
	 *
	 *	   service.get = function(page){
	 *	       alert('Modifiquei um método da service e chamei o padrão!');
	 *		     return GumgaRest.prototype.get.call(this,page);
	 *	   }
	 * 	   return service;
	 * })
	 * </pre>
	 *
	 * # Métodos
	 *
	 *  `GumgaRest.get(params)`
	 *
	 *  O método get aceita um parâmetro `url` e retorna uma promise de uma chamada HTTP do tipo GET.
	 *
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">Object</label> <label class="label label-info">params</label> Parâmetros da query que será feita.
	 *  ### Retorno
	 *  - <label class="label label-info">HttpPromise</label> Retona uma promise da chamada HTTP GET.
	 *  ---
	 *  `GumgaRest.resetAndGet()`
	 *
	 *  O método resetAndGet reseta a query atual e performa uma chamada HTTP do tipo GET.
	 *
	 *  ### Retorno
	 *
	 *  - <label class="label label-info">HttpPromise</label> Retorna uma promise da chamada HTTP GET.
	 *
	 * 	---
	 *
 	 *  `GumgaRest.getById(id)`
	 *
	 *  O método getById aceita um parâmetro `id` e retorna uma promise de uma chamada HTTP do tipo GET.
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">[String|Number]</label> <label class="label label-info">id</label> Identificador do registro que será buscado.
	 *  ### Retorno
	 *  - <label class="label label-info">HttpPromise</label> Retona uma promise da chamada HTTP GET.
	 *  ---
	 *  `GumgaRest.getNew()`
	 *
	 *  O método getById  retorna uma promise de uma chamada HTTP do tipo GET.
	 *  ### Retorno
	 *
	 *  - <label class="label label-info">HttpPromise</label> Retorna uma promise da chamada HTTP GET.
	 *
	 *  ---
 	 *  `GumgaRest.delete(data)`
	 *
	 *  O método delete recebe como parâmetro um objeto que será deletado. O objeto deve ter um parâmetro ID,
	 *  que será passado para a url da chamada.
	 *
 	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">Object</label> <label class="label label-info">data</label> Registro que será deletado.
	 *
	 *  ### Retorno
	 *
	 *  - <label class="label label-info">HttpPromise</label> Retorna uma promise da chamada HTTP DELETE.
	 *
	 *  ---
	 *
 	 *  `GumgaRest.sort(field,way)`
	 *
	 * O método sort recebe dois parâmetros para fazer a ordenação: `field` e `way`, que determinarão qual campo será ordenado
	 * e se será 'asc' ou 'desc'.
	 *
 	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label> <label class="label label-info">field</label> Qual campo será feita a ordenação
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label> <label class="label label-info">way</label> Em que sentido a ordenação será feita, se será ascendente `asc` ou descendente `desc`.
	 *  ### Retorno
	 *
	 *  - <label class="label label-info">HttpPromise</label> Retorna uma promise da chamada HTTP GET.
	 *
	 *  ---
	 *
	 *  `GumgaRest.deleteCollection(array)`
	 *
	 *  O método deleteAll aceita um parâmetro `url`  e retorna uma promise de uma série de chamadas http do tipo DELETE que serão resolvidas ao mesmo tempo.
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">Array</label><label class="label label-info">array</label> Array com todas os registros que serão deletados
	 *  ### Retorno
	 *  - <label class="label label-info">HttpPromise</label> Retorna uma promise após todas as chamadas terem sido resolvidas.
	 *  ---
	 *
 	 *  `GumgaRest.saveImage(attribute,data)`
	 *
	 *  O método saveImage aceita dois parâmetros `attribute` e `data` e retorna uma promise de de uma chamada HTTP POST FORM-DATA.
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">attribute</label> Atributo no qual a imagem será feito o
	 *  bind após o form ter sido enviado completo.
	 *  - <label class="label label-warning" style="margin-right: 1%">Object</label><label class="label label-info">data</label> Dados da imagem que foi selecionada..
	 *  ### Retorno
	 *  - <label class="label label-info">HttpPromise</label> Retorna uma promise da chamada HTTP POST. Nesta promise, será retornado o valor de uma String que deverá ser atribuída ao atributo
	 *  onde estava a imagem. Esta string é um identificador para quando o registro for enviado através de um post.
	 *  ---
 	 *  `GumgaRest.deleteImage(attribute,data)`
	 *
	 *  O método deleteImage aceita dois parâmetros `url` e `data` e retorna uma promise de de uma chamada HTTP DELETE FORM-DATA.
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">attribute</label> Atributo no qual a imagem será feito o
	 *  bind após o form ter sido enviado completo.
	 *  - <label class="label label-warning" style="margin-right: 1%">Object</label><label class="label label-info">data</label> Dados da imagem que foi selecionada.
	 *  ### Retorno
	 *  - <label class="label label-info">HttpPromise</label> Retorna uma promise da chamada HTTP DELETE.
	 *  ---
 	 *
 	 *  `GumgaRest.getSearch(field,param)`
	 *
	 *  O método getSearch aceita dois parâmetros `field` e `param` e retorna uma promise de uma chamada HTTP do tipo GET.
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">[String]</label> <label class="label label-info">field</label> Qual campo a busca será feita. Caso
	 *  queira fazer a busca em mais de um campo, passar uma string com os nomes separados por vírgula.
 	 *  - <label class="label label-warning" style="margin-right: 1%">[Object]</label> <label class="label label-info">param</label> Objeto que irá conter os parâmetros
 	 *  da busca.
	 *  ### Retorno
	 *  - <label class="label label-info">HttpPromise</label> Retona uma promise da chamada HTTP GET.
	 *  ---
	 *
 	 *  `GumgaRest.getAdvancedSearch(param)`
	 *
	 *  O método getAdvancedSearch aceita um parâmetro `param` e retorna uma promise de uma chamada HTTP do tipo GET.
	 *  ### Parâmetros
 	 *  - <label class="label label-warning" style="margin-right: 1%">[Object]</label> <label class="label label-info">param</label> Objeto que irá conter os parâmetros
 	 *  da busca.
	 *  ### Retorno
	 *  - <label class="label label-info">HttpPromise</label> Retona uma promise da chamada HTTP GET.
	 *  ---
   *
 	 *  `GumgaRest.resetDefaultState()`
	 *
	 *  O método resetDefaultState retorna o objeto de query ao seu estado padrão.
	 *
	 *  ---
	 */
	function Base($http,$q){
		function RestPrototype(url){
			this._url = url;
			this._query = {params: {start: 0,pageSize: 10}};
		}
		RestPrototype.prototype.get = _get;
		RestPrototype.prototype.resetAndGet = _resetAndGet;
		RestPrototype.prototype.getNew = _getNew;
		RestPrototype.prototype.getById = _getById;
		RestPrototype.prototype.save = _save;
		RestPrototype.prototype.update= _update;
		RestPrototype.prototype.delete = _delete;
		RestPrototype.prototype.sort = _sort;
		RestPrototype.prototype.deleteCollection = _deleteCollection;
		RestPrototype.prototype.saveImage = _saveImage;
		RestPrototype.prototype.deleteImage = _deleteImage;
		RestPrototype.prototype.getSearch = _getSearch;
		RestPrototype.prototype.getAdvancedSearch = _getAdvancedSearch;
		RestPrototype.prototype.resetDefaultState = _resetQuery;
		RestPrototype.prototype.saveQuery = _saveQuery;
		function _get(page){
			if (page) {
				this._query.params.start = (page - 1) * this._query.params.pageSize;
				if (page < 1) throw 'Invalid page';
			}
			return $http.get(this._url,this._query);
		}
		function _getNew () {return $http.get(this._url + '/new')}
		function _getById(id){return $http.get(this._url + '/' + id);}
		function _save (v){return $http.post(this._url,v);}
		function _update (v){
			if(v.id){
				return $http.put(this._url + '/' + v.id ,v);
			}
			return this.save(v);
		}
		function _delete(v){return $http.delete(this._url + '/' + v.id);}
		function _resetQuery(){this._query = {params: {start: 0,pageSize: 10}};}

		function _resetAndGet(){
			this.resetDefaultState();
			return $http.get(this._url,this._query);
		}
		function _sort(f,w){
			this.resetDefaultState();
			this._query.params.sortField = f;
			this._query.params.sortDir = w;
			return $http.get(this._url,this._query);
		}
		function _deleteCollection(arr){
			var url = this._url;
			return $q.all(arr.map(function(v){
				return $http.delete(url + '/' + v.id);
			}))
		}
		function _saveImage(a,m){
			var fd = new FormData();
			fd.append(a,m);
			return $http.post(this._url + '/' +a ,fd,{
				transformRequest: angular.identity,
				headers: {'Content-Type': undefined}
			});
		}
		function _deleteImage(a){
			var fd = new FormData();
			fd.append(a,{});
			return $http.delete(this._url + '/' +a,fd,{
				transformRequest: angular.identity,
				headers: {'Content-Type': undefined}
			});
		}
		function _getSearch(f,p){
			this.resetDefaultState();
			(!p) ?  p = '' : angular.noop;
			this._query.params.q = p;
			this._query.params.searchFields = f;
			return this.get();
		}
		function _getAdvancedSearch(p){
			if(typeof p === 'string'){
				this._query.params = {}
				this._query.params.aq = p;
				return $http.get(this._url,this._query);
			}
			this._query.params = {};
			this._query.params.aq = p.hql;
			this._query.params.aqo = p.source;
			return $http.post(this._url + '/aq',this._query);
		}

		function _saveQuery(q){

		}



		return RestPrototype;
	}

	angular.module('gumga.services.rest',[])
	.service('GumgaRest',Base);

})();

(function(){
	'use strict';


		Translate.$inject= [];
		function Translate(){
			return {
				$get: ["$http", function($http){
					var self = this;
					$http.get('/i18n/'+self._language + '.json')
						.success(function SuccessGet(values){
							localStorage.setItem('GUMGA'+ self._language,JSON.stringify(values));
							localStorage.setItem('GUMGACurrent',self._language);
						})
					return self;
				}],
				setLanguage: function(language){
					if(!language) throw 'You must pass a language to GumgaTranslate';
					this._language.toLowerCase() !== language.toLowerCase() ? this._language = language : function(){};
				},
				_language: 'pt-br'
			}
		}

		angular.module('gumga.services.translate',['gumga.services.translate.helper'])
		.provider('$gumgaTranslate',Translate)
})();
(function(){
	'use strict';

	TranslateHelper.$inject = [];

	function TranslateHelper() {
		return {
			_translation: {},
			__getFromLocalStorage: function(){
				var language = localStorage.getItem('GUMGACurrent')
				,		self = this;
				function iterate(obj,string){
					for(var key in obj) if(obj.hasOwnProperty(key)){
						(typeof obj[key] == 'object') ? 
							iterate(obj[key], string + '.' + key) : self._translation[(string + '.' + key).substring(1)] = obj[key];
					}
				}
				if(language && localStorage.getItem('GUMGA' + language)){
					iterate(JSON.parse(localStorage.getItem('GUMGA' + language)),'');
					return true;
				}
				
			},
			getTranslate: function(toTranslate){
				var self = this;
				if (Object.getOwnPropertyNames(self._translation).length === 0)
					self.__getFromLocalStorage();
				if(!toTranslate || typeof toTranslate != 'string')  
					throw 'The value passed to GumgaTranslate is Wrong!';
				if(self._translation[toTranslate])
					return self._translation[toTranslate];
				return toTranslate;
			}
		}
	}

	angular.module('gumga.services.translate.helper',[])
	.factory('GumgaTranslateHelper',TranslateHelper)

})();
(function(){
  'use strict';

  Utils.$inject = [];

  function Utils(){
    return {
      areNotEqualInArray: function (array, index) {
        var aux = array.filter(function (element) {
          return element == index;
        });
        return (aux.length < 1);
      },
      camelCase: function (string) {
        return string.slice(0, 1).toUpperCase() + string.slice(1, string.length);
      },
      objInArray: function (array, field) {
        var arrayAux = array.filter(function (obj) {
          return obj.field == field;
        });
        return arrayAux.length > 0;
      },
      checkIndex: function (array, txt) {
        var flag = -1;
        array.forEach(function (obj, index) {
          if (obj.field == txt) {
            flag = index;
          }
        });
        return flag;
      },
      errorMessages: {
        max: "You've typed more than the maximum!",
        min: "You've typed less than the minimum!",
        req: "This field is required"
      }
    }
  }
  angular.module('gumga.services.utils',[])
  .factory('GumgaUtils',Utils);
})();

(function(){
	'use strict';

	WebStorage.$inject = [];
	/**
	 * @ngdoc service
	 * @name gumga.core:GumgaWebStorage
	 * @description 
	 * 
	 * 	O service GumgaWebStorage é utilizado para ajudar o desenvolvedor a trabalhar com o storage do Browser.
	 *
	 * 	#Métodos
	 *
	 *	---
	 * 
	 *  `GumgaWebStorage.setSessionStorageItem(key,value)`
	 *  
	 *  O método setSessionStorageItem aceita dois parâmetros `key` e `value`.
 	 *  
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label> <label class="label label-info">key</label> Qual o identificador do valor que será salvo.
	 *  - <label class="label label-warning" style="margin-right: 1%">[String|Number|Object]</label> <label class="label label-info">value</label> Valor que será salvo no sessionStorage.
	 *  ---
 	 * 
	 *  `GumgaWebStorage.getSessionStorageItem(key)`
	 *  
	 *  O método setSessionStorageItem aceita um parâmetro `key`.
 	 *  
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label> <label class="label label-info">key</label> Qual o identificador do valor que será salvo.
	 *
	 *  ### Retorno
	 *  - <label class="label label-warning" style="margin-right: 1%">[String|Number|Object]</label> <label class="label label-info">key</label> Retorna o valor que estiver na sessionStorage daquela key específica. Caso não encontre,
	 *  o valor retornado é null.
	 *  ---
	 *
 	 *  `GumgaWebStorage.removeSessionStorageItem(key)`
	 *  
	 *  O método removeSessionStorageItem aceita um parâmetro `key`.
 	 *  
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label> <label class="label label-info">key</label> Qual o identificador do valor que será removido da sessionStorage.
	 *
	 *  --- 
	 *
	 *  `GumgaWebStorage.clearSessionStorage()`
	 *  
	 *  O método clearSessionStorage não aceita nenhum parâmetro e limpa a sessionStorage.
 	 *  
	 *  --- 
	 *
 	 *
	 *  `GumgaWebStorage.getNumberOfItemsInSessionStorage()`
	 *  
	 *  O método getNumberOfItemsInSessionStorage não aceita nenhum parâmetro, e retorna o número de itens no localStorage.
 	 *  
	 *  --- 
	 *
 	 * 
	 *  `GumgaWebStorage.setLocalStorageItem(key,value)`
	 *  
	 *  O método setLocalStorageItem aceita dois parâmetros `key` e `value`.
 	 *  
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label> <label class="label label-info">key</label> Qual o identificador do valor que será salvo.
	 *  - <label class="label label-warning" style="margin-right: 1%">[String|Number|Object]</label> <label class="label label-info">value</label> Valor que será salvo no LocalStorage.
	 *  ---
 	 * 
	 *  `GumgaWebStorage.getLocalStorageItem(key)`
	 *  
	 *  O método setLocalStorageItem aceita um parâmetro `key`.
 	 *  
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label> <label class="label label-info">key</label> Qual o identificador do valor que será salvo.
	 *
	 *  ### Retorno
	 *  - <label class="label label-warning" style="margin-right: 1%">[String|Number|Object]</label> <label class="label label-info">key</label> Retorna o valor que estiver na LocalStorage daquela key específica. Caso não encontre,
	 *  o valor retornado é null.
	 *  ---
	 *
 	 *  `GumgaWebStorage.removeLocalStorageItem(key)`
	 *  
	 *  O método removeLocalStorageItem aceita um parâmetro `key`.
 	 *  
	 *  ### Parâmetros
	 *  - <label class="label label-warning" style="margin-right: 1%">String</label> <label class="label label-info">key</label> Qual o identificador do valor que será removido da LocalStorage.
	 *
	 *  --- 
	 *
	 *  `GumgaWebStorage.clearLocalStorage()`
	 *  
	 *  O método clearLocalStorage não aceita nenhum parâmetro e limpa o localStorage.
 	 *  
	 *  --- 
 	 *
	 *  `GumgaWebStorage.getNumberOfItemsInLocalStorage()`
	 *  
	 *  O método getNumberOfItemsInLocalStorage não aceita nenhum parâmetro, e retorna o número de itens no localStorage.
 	 *  
	 *  --- 
	 */
	function WebStorage(){
		return {
			setSessionStorageItem: function(key,value){
				var _value = value;
				if(typeof value == 'object'){
					_value = angular.toJson(value);
				}
				window.sessionStorage.setItem(key,_value);
			},
			getSessionStorageItem: function(key){
				var g = window.sessionStorage.getItem(key);
				if(!g){
					return null;
				}
				try {
					angular.fromJson(g);
				}catch(e){
					return g;
				}
				return angular.fromJson(g);
			},
			removeSessionStorageItem: function(key){
				window.sessionStorage.removeItem(key);
			},
			clearSessionStorage: function(){
				window.sessionStorage.clear();
			},
			getNumberOfItemsInSessionStorage: function(){
				return window.sessionStorage.length;
			},
			setLocalStorageItem: function(key,value){
				window.localStorage.setItem(key,angular.toJson(value));
			},
			getLocalStorageItem: function(key){
				var g = window.localStorage.getItem(key);
				try {
					angular.fromJson(g);
				}catch(e){
					return g;
				}
				return angular.fromJson(g);
			},
			removeLocalStorageItem: function(key){
				window.localStorage.removeItem(key);
			},
			clearLocalStorage: function(){
				window.localStorage.clear();
			},
			getNumberOfItemsInLocalStorage: function(){
				return window.localStorage.length;
			}
		}
	}

	angular.module('gumga.services.webstorage',[])
	.factory('GumgaWebStorage',WebStorage)
})();
(function(){
	'use strict';
   /**
    * @ngdoc directive
    * @name gumga.core:gumgaError
    * @element input
    * @restrict A
    * @description O componente gumgaError serve para mostrar mensagens de validações abaixo do input responsável pelo erro.
    *
    * @example
    *  Um exemplo da directive gumgaError funcionando pode ser encontrado [aqui](http://embed.plnkr.co/AcjqcgvgGhdJqDh72eHA).
    *  <pre>
    *    <form name="myForm">
    *      <input type="number" name="minNumber" ng-model="minNumber" gumga-error gumga-min-number="20">
    *    </form>
    *  </pre>
   */
  Error.$inject = ["$compile"];
  function Error($compile) {
    return {
      restrict: 'A',
			scope: {},
      require: '^form',
      link: function (scope, elm, attrs, ctrl) {
				scope.errors = [];

				scope.errorsContains = function(errors, error) {
					for (var k in errors) {
						if (angular.equals(errors[k], error)) {
							return k;
						}
					}
					return false;
				}

				scope.addError = function(error) {
					if (!scope.errorsContains(scope.errors, error)) {
						scope.errors.push(error);
					}
				}

				scope.removeError = function(error) {
					var errorCopy = angular.copy(error);
					errorCopy.valid = !errorCopy.valid;
					var exist = scope.errorsContains(scope.errors, errorCopy);
					if (exist) {
						scope.errors.splice(exist, 1);
					}
				}
				scope.$on('$errorMessage', function(event, data) {
          if (elm[0].name == data.name) {
            if (data.valid == false) {
  						scope.addError(data);
  					} else {
  						scope.removeError(data);
  					}
          }
				});

        var template = '<ul><li ng-repeat="error in errors" >{{ error.fieldMessage }}</li></ul>';
        elm.after($compile(template)(scope));
      }
    }
  }
	angular.module('gumga.directives.form.error',[])
	.directive('gumgaError',Error);
})();

(function(){
	'use strict';
	/**
	 * @ngdoc directive
	 * @name gumga.core:gumgaErrors
	 * @element input
	 * @restrict A
	 * @description O componente gumgaErrors serve para mostrar todas mensagens de validações do formulário de forma agrupada.
	 *
	 * @example
	 *  Um exemplo da directive gumgaErrors funcionando pode ser encontrado [aqui](http://embed.plnkr.co/AcjqcgvgGhdJqDh72eHA).
	 *  <pre>
	 *    <form name="myForm">
	 *      <gumga-errors></gumga-errors>
	 *      <input type="number" name="minNumber" ng-model="minNumber" gumga-error gumga-min-number="20">
	 *    </form>
	 *  </pre>
	*/
	Errors.$inject = ["$compile"];
  function Errors($compile) {
    return {
      restrict: 'E',
			scope: {},
			template: '<ul><li ng-repeat="error in errors" >{{ error.message }}</li></ul>',
      require: '^form',
      link: function (scope, elm, attrs, ctrl) {
				scope.errors = [];

				scope.errorsContains = function(errors, error) {
					for (var k in errors) {
						if (angular.equals(errors[k], error)) {
							return k;
						}
					}
					return false;
				}

				scope.addError = function(error) {
					if (!scope.errorsContains(scope.errors, error)) {
						scope.errors.push(error);
					}
				}

				scope.removeError = function(error) {
					// error.valid = !error.valid;
					var errorCopy = angular.copy(error);
					errorCopy.valid = !errorCopy.valid;
					var exist = scope.errorsContains(scope.errors, errorCopy);
					if (exist) {
						scope.errors.splice(exist, 1);
					}
				}
				scope.$on('$errorMessage', function(event, data) {
					if (data.valid == false) {
						scope.addError(data);
					} else {
						scope.removeError(data);
					}
				});
      }
    }
  }
	angular.module('gumga.directives.form.errors',[])
	.directive('gumgaErrors',Errors);
})();

(function(){
	'use strict';
	Form.$inject = ["$timeout", "$rootScope"];
	/**
	* @ngdoc directive
	* @name gumga.core:gumgaForm
	* @restrict A
	* @element form
	* @description A directive gumgaForm é utilizada em conjunto com as directives de validação de input. Ela contém funções que serão
	* usadas para manipular o formulário. Ela expõe no $scope um objeto GumgaForm para agrupar as funções em um lugar só.
	*
	*	# Como utilizar
	*
	* O componente GumgaForm deve ser incluído no elemento `form`, que necessita ter um atributo name. É necessário também que os inputs que serão utilizados tenham um atributo name,
	* pois o controle deles é feito a partir deste atributo.
	*
	*	<pre>
	*  <form name="UserForm" gumga-form>
	*	   ...
	*  </form>
	* </pre>
	*
	*	# Métodos
	*
	*`$scope.GumgaForm.getMessages(name,error)`
  *
  *  O método `getMessages` aceita dois parâmetros `name` e `error`, onde name é o nome do input que desejada
  *  recuperar a mensagem e o erro. Caso o parâmetro error não seja passado, é retornado o objeto com todas as mensagens do campo.
  *  ### Parâmetros
  *  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">name</label> String que terá o nome do in put para retornar os errors.
  *   Para adicionar a função, coloque o nome da função e o valor dele como `true`
	*  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">error</label> String que será terá o nome do erro que será retornado. Caso
	*  não seja passado este parâmetro, será retornado um objeto com todos os erros.
  * 	### Retorno
  *
  *  - <label class="label label-info">[Object|String]</label> String que conterá a mensagem de erro ou o objeto com todas as mensagens de erro.
	*
	* ----
	*
	*`$scope.GumgaForm.changeMessage(name,error,message)`
	*
	*  O método `changeMessage` aceita três parâmetros, `name`,`error` e `message`, onde `name` é o nome do input que desejada
	*  recuperar a mensagem, `error` é qual erro que a mensagem será alterada e `message` qual será a nova mensagem .
	*  ### Parâmetros
	*  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">name</label> String que terá o nome do input para retornar os errors.
	*   Para adicionar a função, coloque o nome da função e o valor dele como `true`
	*  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">error</label> String que será terá o nome do erro que será retornado. Caso
	*  não seja passado este parâmetro, será retornado um objeto com todos os erros.
	*  - <label class="label label-warning" style="margin-right: 1%">String</label><label class="label label-info">message</label> String que será usada como mensagem de erro para a directive.
	* 	### Retorno
	*
	*  - <label class="label label-info">Boolean</label> True caso a mensagem tenha sido alterada, False caso não.
	*
	* ----
	*
	*`$scope.GumgaForm.setFormValid()`
	*
	*  O método `setFormValid` é utilizado para limpar todos os erros que estiverem ativos no formulário. Ele percorre o objeto de erro que o Angular.js cria automaticamente e valida todos os campos
	*  que estiverem com erro.
	*
	* ----
  *
	*`$scope.GumgaForm.setFormPristine()`
	*
	*  O método `setFormPristine` é utilizado para colocar todos os campos em um estado de $pristine, ou seja, quando ainda não foram atualizados pelo usuário.
	*
	* ----
	*
	*`$scope.GumgaForm.clearForm()`
	*
	*  O método `clearForm` é utilizado para limpar todos os campos do formulário e, além disso, colocar eles em um estado de $pristine.
	*
	* ----
	*
	*`$scope.GumgaForm.getFormErrors()`
	*
	*  O método `getFormErrors` é utilizado para quando deseja-se obter todos os erros que estão presentes no formulário.
	*
	* ### Retorno
	*
	*  - <label class="label label-info">[Array]</label> Lista que irá conter todos os erros que estão no formulário.
	*
	* ----
	*/
	function Form($timeout,$rootScope) {
		return {
			restrict: 'A',
			require: '^form',
			scope: false,
			link: function(scope, elm, attrs, ctrl) {
				if(!attrs.name) throw 'É necessário passar um valor para o atributo "name" do element <form>';
				scope.GumgaForm = {};
				var _form = scope[attrs.name];
				var _formControllers = [];
				(function() {
					angular.forEach(elm.find('input'),function(input){
						_formControllers.push({
							name: angular.element(input).controller('ngModel').$name,
							controller: angular.element(input).controller('ngModel'),
							errorMessages: {
								maxdate: 'A data especificada no campo {0} não deve ultrapassar o limite de: {1}.',
								maxlength: 'O texto especificado no campo {0} não deve ultrapassar o limite de: {1}.',
								maxnumber: 'O número especificado no campo {0} não deve ultrapassar o limite de: {1}.',
								mindate: 'A data especificada no campo {0} não deve ser menor que o limite mínimo de: {1}.',
								minlength: 'O texto especificado no campo {0} não deve ser menor que o limite mínimo de: {1}.',
								minnumber: 'O número especificado no campo {0} não deve ser menor que o limite mínimo de: {1}.',
								pattern: 'O texto especificado no campo {0} deve estar dentro do padrão: {1}.',
								rangedate:'A data especificada no campo {0} deve estar dentro do intervalo: {1}.',
								rangenumber: 'O número especificado no campo {0} deve estar dentro do intervalo: {1}.',
								required: 'O campo {0} é obrigatório.'
							}
						})
					})
				})();

				function returnObject(name){
					return _formControllers.filter(function($v){
						return $v.name.trim().toLowerCase() === name.trim().toLowerCase();
					})[0];
				}

				scope.$on('$error',function(ev,data){
					$timeout(function(){
						if (data.error.substring(0,5) == 'range') {
							var auxValue = scope.$eval(data.value);
							data.value = 'mínimo de ' + auxValue.min + ' e máximo de ' + auxValue.max;
						}
						var _aux = returnObject(data.name)
						,		message = _aux.errorMessages[data.error].replace('{1}',data.value)
						,		auxMessage = message;
						if (data.error != 'required') {
							auxMessage = auxMessage.replace('no campo {0}','');
						} else {
							auxMessage = auxMessage.replace('{0}','');
						}
						message = message.replace('{0}',data.label);
						$rootScope.$broadcast('$errorMessage',{
							name: data.name,
							message: message,
							fieldMessage: auxMessage,
							valid: data.valid,
						})
					})
				})
				scope.GumgaForm.getMessages = function(name,error){
					if(!error){
						return returnObject(name).errorMessages;
					}
					if(returnObject(name).errorMessages){
						return returnObject(name).errorMessages[error] || null;
					}
				}
				scope.GumgaForm.changeMessage = function(input,which,message){
					if(!input || !which || !message) throw 'Valores passados errados para a função GumgaForm.changeMessage(input,message)'
					var aux = _formControllers.filter(function(value){
						return input == value.name;
					})[0];
					if(aux.errorMessages && aux.errorMessages[which]){
						aux.errorMessages[which] = message;
						return true;
					}
					return false;
				}
				scope.GumgaForm.setFormValid = function () {
					for(var key in _form.$error) if(_form.$error.hasOwnProperty(key)){
						_form.$error[key].forEach(function (value) {
							value.$setValidity(key,true);
						})
					}
					scope.$apply();
				}
				scope.GumgaForm.clearForm = function(){
					_formControllers.forEach(function(controller){
						controller.controller.$setViewValue('');
						controller.controller.$setPristine();
					})
					scope.$apply();
				}

				scope.GumgaForm.setFormPristine = function () {
					_formControllers.forEach(function(controller){
						controller.controller.$setPristine();
					})
					scope.$apply();
				}

				scope.GumgaForm.getFormErrors = function(){
					var _arr = []
					,		name
					,		aux = [];
					for(var key in _form.$error) if(_form.$error.hasOwnProperty(key)){
						_form.$error[key].forEach(function (value) {
							aux.push(value.$name);
						})
						_arr.push({type: key,fields: aux});
						aux = [];
					}
					return _arr;
				}

			}
		}
	}
	angular.module('gumga.directives.form.form',[])
	.directive('gumgaForm',Form);
})();

(function(){
	'use strict';
  /**
   * @ngdoc directive
   * @name gumga.core:gumgaMaxDate
   * @element input
   * @restrict A
   * @scope false
   * @description O componente GumgaMaxDate serve para validar datas máximas em entradas de formulários.
   *
   * ## Nota
   * Esta diretiva suporta apenas **inputs** do tipo **date**. O valor do atributo/diretiva é **obrigatório** e deve ser uma **data**.
   *
	 * @param {String} label Usado na integração com {@link gumga.core:gumgaErrors} para indicar em qual campo se encontra o erro.
	 * Se o atributo for omitido, a diretiva usará o atributo name do input.
	 *
   * @example
   *  Um exemplo da directive gumgaMaxDate funcionando pode ser encontrado [aqui](http://embed.plnkr.co/AcjqcgvgGhdJqDh72eHA).
   *  <pre>
   *    <form name="myForm">
   *      <input type="date" name="maxDate" ng-model="maxDate" gumga-max-date="2015-07-20">
   *      <p ng-show="myForm.maxDate.$error.maxdate" class="text-danger">Data superior a esperada</p>
   *    </form>
   *  </pre>
   */
   MaxDate.$inject = ["$filter"];
   function MaxDate($filter) {
     return {
      restrict: 'A',
      require: 'ngModel',
      link: function (scope, elm, attrs, ctrl) {
	      if (attrs.type != 'date') {
	        throw 'Esta diretiva suporta apenas inputs do tipo date';
	      }
	      if (!attrs.gumgaMaxDate) {
	        throw "O valor da diretiva gumga-max-date não foi informado.";
	      }
        var validateMaxDate = function (inputValue) {
					var error = 'maxdate';
        	var format = 'yyyy-MM-dd';
        	var input = $filter('date')(inputValue, format);
        	var max = $filter('date')(attrs.gumgaMaxDate, format);
        	var isValid = input <= max;
        	ctrl.$setValidity(error, isValid);
					scope.$broadcast('$error', {
						name: attrs.name,
						label: attrs.label || attrs.name,
						valid: isValid,
						error: error,
						value: attrs.gumgaMaxDate
					});
        	return inputValue;
        };
        ctrl.$parsers.unshift(validateMaxDate);
        ctrl.$formatters.push(validateMaxDate);
        attrs.$observe('gumgaMaxDate', function () {
        	validateMaxDate(ctrl.$viewValue);
        });
      }
    }
  }
  angular.module('gumga.directives.form.max.date',[])
  .directive('gumgaMaxDate',MaxDate);
})();

(function(){
	'use strict';
  /**
   * @ngdoc directive
   * @name gumga.core:gumgaMaxLength
   * @element input
   * @restrict A
   * @scope false
   * @description O componente GumgaMaxLength serve para validar quantidades máximas de caracteres em entradas de formulários.
   *
   * ## Nota
   * O valor do atributo/diretiva é **obrigatório** e deve ser um **número**.
   *
	 * @param {String} label Usado na integração com {@link gumga.core:gumgaErrors} para indicar em qual campo se encontra o erro.
	 * Se o atributo for omitido, a diretiva usará o atributo name do input.
	 *
   * @example
   *  Um exemplo da directive GumgaMaxLength funcionando pode ser encontrado [aqui](http://embed.plnkr.co/AcjqcgvgGhdJqDh72eHA).
   *  <pre>
   *    <form name="myForm">
   *      <input type="date" name="maxLength" ng-model="maxLength" gumga-max-length="20" id="maxLength">
   *      <p ng-show="myForm.maxLength.$error.maxlength" class="text-danger">Tamanho superior ao esperado</p>
   *    </form>
   *  </pre>
   */
   MaxLength.$inject = [];
   function MaxLength() {
    return {
      restrict: 'A',
      require: 'ngModel',
      link: function (scope, elm, attrs, ctrl) {
        if (!attrs.gumgaMaxLength) {
          throw "O valor da diretiva gumga-max-length não foi informado.";
        }
        var validateMaxLength = function (inputValue) {
					var error = 'maxlength';
          var input = (inputValue == undefined) ? -1 : inputValue.length;
          var max = attrs.gumgaMaxLength;
          var isValid = input <= max && input != -1;
          ctrl.$setValidity(error, isValid);
					scope.$broadcast('$error', {
						name: attrs.name,
						label: attrs.label || attrs.name,
						valid: isValid,
						error: error,
						value: attrs.gumgaMaxLength
					});
          return inputValue;
        };
        ctrl.$parsers.unshift(validateMaxLength);
        ctrl.$formatters.push(validateMaxLength);
        attrs.$observe('gumgaMaxLength', function () {
          validateMaxLength(ctrl.$viewValue);
        });
      }
    }
  }
  angular.module('gumga.directives.form.max.length',[])
  .directive('gumgaMaxLength',MaxLength);
})();

(function(){
	'use strict';
  /**
   * @ngdoc directive
   * @name gumga.core:gumgaMaxNumber
   * @element input
   * @restrict A
   * @scope false
   * @description O componente GumgaMaxNumber serve para validar números máximos em entradas de formulários.
   *
   * ## Nota
   * Esta diretiva suporta apenas **inputs** do tipo **number**. O valor do atributo/diretiva é **obrigatório** e deve ser um **número**.
   *
	 * @param {String} label Usado na integração com {@link gumga.core:gumgaErrors} para indicar em qual campo se encontra o erro.
	 * Se o atributo for omitido, a diretiva usará o atributo name do input.
	 *
   * @example
   *  Um exemplo da directive GumgaMaxNumber funcionando pode ser encontrado [aqui](http://embed.plnkr.co/AcjqcgvgGhdJqDh72eHA).
   *  <pre>
   *    <form name="myForm">
   *      <input type="number" name="maxNumber" ng-model="maxNumber" gumga-max-number="20">
   *      <p ng-show="myForm.maxNumber.$error.maxnumber" class="text-danger">Número superior ao esperado</p>
   *    </form>
   *  </pre>
   */
   MaxNumber.$inject = [];
   function MaxNumber() {
     return {
      restrict: 'A',
      require: 'ngModel',
      link: function (scope, elm, attrs, ctrl) {
       if (attrs.type != 'number') {
        throw 'Esta diretiva suporta apenas inputs do tipo number';
      }
      if (!attrs.gumgaMaxNumber) {
        throw "O valor da diretiva gumga-max-number não foi informado.";
      }
      var validateMaxNumber = function (inputValue) {
				var error = 'maxnumber';
        var input = parseInt(inputValue);
        var max = parseInt(attrs.gumgaMaxNumber);
        var isValid = input <= max;
        ctrl.$setValidity(error, isValid);
				scope.$broadcast('$error', {
					name: attrs.name,
					label: attrs.label || attrs.name,
					valid: isValid,
					error: error,
					value: attrs.gumgaMaxNumber
				});
        return inputValue;
      };
      ctrl.$parsers.unshift(validateMaxNumber);
      ctrl.$formatters.push(validateMaxNumber);
      attrs.$observe('gumgaMaxNumber', function () {
        validateMaxNumber(ctrl.$viewValue);
      });

      scope.$on('clearFields',function(event, data) {
       ctrl.$modelValue = null;
       console.log('directive date clear');
					// console.log(elm);
					// console.log();
				});
    }
  }
}
angular.module('gumga.directives.form.max.number',[])
.directive('gumgaMaxNumber',MaxNumber);
})();

(function(){
	'use strict';
  /**
   * @ngdoc directive
   * @name gumga.core:gumgaMinDate
   * @element input
   * @restrict A
   * @description O componente GumgaMinDate serve para validar datas mínimas em entradas de formulários.
   *
   * ## Nota
   * Esta diretiva suporta apenas **inputs** do tipo **date**. O valor do atributo/diretiva é **obrigatório** e deve ser uma **data**.
   *
	 * @param {String} label Usado na integração com {@link gumga.core:gumgaErrors} para indicar em qual campo se encontra o erro.
	 * Se o atributo for omitido, a diretiva usará o atributo name do input.
	 *
   * @example
   *  Um exemplo da directive GumgaMinDate funcionando pode ser encontrado [aqui](http://embed.plnkr.co/AcjqcgvgGhdJqDh72eHA).
   *  <pre>
   *    <form name="myForm">
   *      <input type="date" name="minDate" ng-model="minDate" gumga-min-date="2015-07-20">
   *      <p ng-show="myForm.minDate.$error.mindate" class="text-danger">Data inferior a esperada</p>
   *    </form>
   *  </pre>
  */
	 MinDate.$inject = ["$filter"];
	 function MinDate($filter) {
	 	return {
	 		restrict: 'A',
	 		require: 'ngModel',
	 		link: function (scope, elm, attrs, ctrl) {
	 			if (attrs.type != 'date') {
	 				throw 'Esta diretiva suporta apenas inputs do tipo date';
	 			}
	 			if (!attrs.gumgaMinDate) {
	 				throw "O valor da diretiva gumga-min-date não foi informado.";
	 			}
        // if (!GumgaDateService.validateFormat('YMD', attrs.gumgaMinDate)) {
        //   throw 'O valor da diretiva não corresponde ao formato yyyy-mm-dd';
        // }
        var validateMinDate = function (inputValue) {
					var error = 'mindate';
					var format = 'yyyy-MM-dd';
					var input = $filter('date')(inputValue, format);
					var min = $filter('date')(attrs.gumgaMinDate, format);
					var isValid = input >= min;
					ctrl.$setValidity(error, isValid);
					scope.$broadcast('$error', {
						name: attrs.name,
						label: attrs.label || attrs.name,
						valid: isValid,
						error: error,
						value: attrs.gumgaMinDate
					});
					return inputValue;
				};
				ctrl.$parsers.unshift(validateMinDate);
				ctrl.$formatters.push(validateMinDate);
				attrs.$observe('gumgaMinDate', function () {
					validateMinDate(ctrl.$viewValue);
				});
			}
		}
	}
	angular.module('gumga.directives.form.min.date',[])
	.directive('gumgaMinDate',MinDate);
})();

(function(){
	'use strict';
  /**
   * @ngdoc directive
   * @name gumga.core:gumgaMinLength
   * @element input
   * @restrict A
   * @description O componente GumgaMinLength serve para validar quantidades mínimas de caracteres em entradas de formulários.
   *
   * ## Nota
   * O valor do atributo/diretiva é **obrigatório** e deve ser um **número**.
   *
	 * @param {String} label Usado na integração com {@link gumga.core:gumgaErrors} para indicar em qual campo se encontra o erro.
	 * Se o atributo for omitido, a diretiva usará o atributo name do input.
	 *
   * @example
   *  Um exemplo da directive GumgaMinLength funcionando pode ser encontrado [aqui](http://embed.plnkr.co/AcjqcgvgGhdJqDh72eHA).
   *  <pre>
   *    <form name="myForm">
   *      <input type="date" name="minLength" ng-model="minLength" gumga-min-length="20" id="minLength">
   *      <p ng-show="myForm.minLength.$error.minlength" class="text-danger">Tamanho inferior ao esperado</p>
   *    </form>
   *  </pre>
  */
	MinLength.$inject = [];
	function MinLength() {
    return {
      restrict: 'A',
      require: 'ngModel',
      link: function (scope, elm, attrs, ctrl) {
        if (!attrs.gumgaMinLength) {
          throw "O valor da diretiva gumga-min-length não foi informado.";
        }
        var validateMinLength = function (inputValue) {
					var error = 'minlength';
          var input = (inputValue == undefined) ? -1 : inputValue.length;
          var min = attrs.gumgaMinLength;
          var isValid = input >= min;
          ctrl.$setValidity(error, isValid);
					scope.$broadcast('$error', {
						name: attrs.name,
						label: attrs.label || attrs.name,
						valid: isValid,
						error: error,
						value: attrs.gumgaMinLength
					});
          return inputValue;
        };
	 			ctrl.$parsers.unshift(validateMinLength);
	 			ctrl.$formatters.push(validateMinLength);
	 			attrs.$observe('gumgaMinLength', function () {
	 				validateMinLength(ctrl.$viewValue);
	 			});
	 		}
	 	}
	 }
	 angular.module('gumga.directives.form.min.length',[])
	 .directive('gumgaMinLength',MinLength);
	})();

(function(){
	'use strict';
  /**
   * @ngdoc directive
   * @name gumga.core:gumgaMinNumber
   * @element input
   * @restrict A
   * @description O componente GumgaMinNumber serve para validar números mínimos para entradas em formulários.
   *
   * ## Nota
   * Esta diretiva suporta apenas **inputs** do tipo **number**. O valor do atributo/diretiva é **obrigatório** e deve ser um **número**.
   *
	 * @param {String} label Usado na integração com {@link gumga.core:gumgaErrors} para indicar em qual campo se encontra o erro.
	 * Se o atributo for omitido, a diretiva usará o atributo name do input.
	 *
   * @example
   *  Um exemplo da directive GumgaMinNumber funcionando pode ser encontrado [aqui](http://embed.plnkr.co/AcjqcgvgGhdJqDh72eHA).
   *  <pre>
   *    <form name="myForm">
   *      <input type="number" name="minNumber" ng-model="minNumber" gumga-min-number="20">
   *      <p ng-show="myForm.minNumber.$error.minnumber" class="text-danger">Número inferior ao esperado</p>
   *    </form>
   *  </pre>
  */
	 MinNumber.$inject = [];
	 function MinNumber() {
	 	return {
	 		restrict: 'A',
	 		require: 'ngModel',
	 		link: function (scope, elm, attrs, ctrl) {
	 			if (attrs.type != 'number') {
	 				throw 'Esta diretiva suporta apenas inputs do tipo number';
	 			}
	 			if (!attrs.gumgaMinNumber) {
	 				throw "O valor da diretiva gumga-min-number não foi informado.";
	 			}
	 			var validateMinNumber = function (inputValue) {
					var error = 'minnumber';
	 				var input = parseInt(inputValue);
	 				var min = parseInt(attrs.gumgaMinNumber);
	 				var isValid = input >= min;
	 				ctrl.$setValidity(error, isValid);
					scope.$broadcast('$error', {
						name: attrs.name,
						label: attrs.label || attrs.name,
						valid: isValid,
						error: error,
						value: attrs.gumgaMinNumber
					});
	 				return inputValue;
	 			};
	 			ctrl.$parsers.unshift(validateMinNumber);
	 			ctrl.$formatters.push(validateMinNumber);
	 			attrs.$observe('gumgaMinNumber', function () {
	 				validateMinNumber(ctrl.$viewValue);
	 			});
	 		}
	 	}
	 }
	 angular.module('gumga.directives.form.min.number',[])
	 .directive('gumgaMinNumber',MinNumber);
	})();

(function(){
	'use strict';
  /**
   * @ngdoc directive
   * @name gumga.core:gumgaPattern
   * @element input
   * @restrict A
   * @description O componente GumgaPattern serve para validar expressões regulares de formulários.
   *
   * ## Nota
   * O valor do atributo/diretiva é **obrigatório** e deve ser uma **expressão regular**.
   *
	 * @param {String} label Usado na integração com {@link gumga.core:gumgaErrors} para indicar em qual campo se encontra o erro.
	 * Se o atributo for omitido, a diretiva usará o atributo name do input.
	 *
   * @example
   *  Um exemplo da directive GumgaPattern funcionando pode ser encontrado [aqui](http://embed.plnkr.co/AcjqcgvgGhdJqDh72eHA).
   *  <pre>
   *    <form name="myForm">
   *      <input type="text" name="cep" ng-model="cep" gumga-pattern="(\d{5})\-(\d{3})" id="cep" placeholder="99999-999">
   *      <p ng-show="myForm.cep.$error.pattern" class="text-danger">Expressão não corresponde com o formato esperado</p>
   *    </form>
   *  </pre>
  */
	Pattern.$inject = [];
  function Pattern() {
    return {
			restrict: 'A',
	 		require: 'ngModel',
      link: function (scope, elm, attrs, ctrl) {
				if (!attrs.gumgaPattern) {
					throw "O valor da diretiva gumga-pattern não foi informado.";
				}
				var validatePattern = function (inputValue) {
					var error = 'pattern';
					var regex = new RegExp('^' + attrs.gumgaPattern + '$');
					var isValid = regex.test(inputValue);
					ctrl.$setValidity(error, isValid);
					scope.$broadcast('$error', {
						name: attrs.name,
						label: attrs.label || attrs.name,
						valid: isValid,
						error: error,
						value: attrs.patternAlias || attrs.gumgaPattern
					});
					return inputValue;
				};
				ctrl.$parsers.unshift(validatePattern);
				ctrl.$formatters.push(validatePattern);
				attrs.$observe('gumgaPattern', function () {
					validatePattern(ctrl.$viewValue);
				});
      }
    }
  }
  angular.module('gumga.directives.form.pattern',[])
  .directive('gumgaPattern',Pattern);
})();

(function(){
	'use strict';
  /**
   * @ngdoc directive
   * @name gumga.core:gumgaRangeDate
   * @restrict A
   * @element input
   * @description
	 * O componente GumgaRangeDate serve para validar datas mínimas e máximas para entradas em formulários com campos do tipo date.
   *
   * ## Nota
   * O valor do atributo/diretiva é **obrigatório** e deve ser um **objeto** contendo duas propriedades, **min** e **max**
   * com os valores de suas respectivas datas para execução da validação range.
   *
   * ## Exemplo
   * Um exemplo da directive GumgaRangeDate funcionando pode ser encontrado [aqui](http://embed.plnkr.co/AcjqcgvgGhdJqDh72eHA).
   *
	 * @param {String} label Usado na integração com {@link gumga.core:gumgaErrors} para indicar em qual campo se encontra o erro.
	 * Se o atributo for omitido, a diretiva usará o atributo name do input.
	 *
   * @example
   *  <pre>
   *    <form name="myForm">
   *      <input type="date" name="rangeDate" ng-model="rangeDate" gumga-range-date="{min: '1986-12-29', max: '2015-07-20'}" id="rangedate">
   *      <p ng-show="myForm.cep.$error.rangedate" class="text-danger">A data informada não está entre os valores esperados</p>
   *    </form>
   *  </pre>
	 */
	 RangeDate.$inject = ["$filter"];
	 function RangeDate($filter) {
	 	return {
	 		restrict: 'A',
	 		require: 'ngModel',
	 		link: function (scope, elm, attrs, ctrl) {
	 			if (attrs.type != 'date') {
	 				throw 'Esta diretiva suporta apenas inputs do tipo date';
	 			}
	 			if (!attrs.gumgaRangeDate) {
	 				throw "O valor da diretiva gumga-range-date não foi informado.";
	 			}
        var validateRangeDate = function (inputValue) {
					var error = 'rangedate';
          var format = 'yyyy-MM-dd';
          var range = scope.$eval(attrs.gumgaRangeDate);
        	var input = $filter('date')(inputValue, format);
          var min = $filter('date')(range.min, format);
        	var max = $filter('date')(range.max, format);
        	var isValid = input >= min && input <= max;
        	ctrl.$setValidity(error, isValid);
					scope.$broadcast('$error', {
						name: attrs.name,
						label: attrs.label || attrs.name,
						valid: isValid,
						error: error,
						value: attrs.gumgaRangeDate
					});
        	return inputValue;
        };
        ctrl.$parsers.unshift(validateRangeDate);
        ctrl.$formatters.push(validateRangeDate);
        attrs.$observe('gumgaRangeDate', function () {
        	validateRangeDate(ctrl.$viewValue);
        });
      }
    }
  }
  angular.module('gumga.directives.form.range.date',[])
  .directive('gumgaRangeDate',RangeDate);
})();

(function(){
	'use strict';
  /**
   * @ngdoc directive
   * @name gumga.core:gumgaRangeNumber
   * @restrict A
   * @element input
   * @description
	 * O componente GumgaRangeNumber serve para validar números mínimos e máximos em entradas de formulários com campos do tipo number.
   *
   * ## Nota
   * O valor do atributo/diretiva é **obrigatório** e deve ser um **objeto** contendo duas propriedades, **min** e **max**
   * com os valores de suas respectivas datas para execução da validação range.
   *
   * ## Exemplo
   * Um exemplo da directive GumgaRangeNumber funcionando pode ser encontrado [aqui](http://embed.plnkr.co/AcjqcgvgGhdJqDh72eHA).
   *
	 * @param {String} label Usado na integração com {@link gumga.core:gumgaErrors} para indicar em qual campo se encontra o erro.
	 * Se o atributo for omitido, a diretiva usará o atributo name do input.
	 *
   * @example
   *  <pre>
   *    <form name="myForm">
   *      <input type="date" name="rangeNumber" ng-model="rangeNumber" gumga-number-date="{min: 0, max: 20}">
   *      <p ng-show="myForm.rangeNumber.$error.rangenumber" class="text-danger">O número informado não está entre os valores esperados</p>
   *    </form>
   *  </pre>
	 */
	 RangeNumber.$inject = [];
	 function RangeNumber() {
	 	return {
	 		restrict: 'A',
	 		require: 'ngModel',
	 		link: function (scope, elm, attrs, ctrl) {
	 			if (attrs.type != 'number') {
	 				throw 'Esta diretiva suporta apenas inputs do tipo number';
	 			}
	 			if (!attrs.gumgaRangeNumber) {
	 				throw "O valor da diretiva gumga-range-number não foi informado.";
	 			}
	 			var validateRangeNumber = function (inputValue) {
					var error = 'rangenumber';
          var range = scope.$eval(attrs.gumgaRangeNumber);
          var input = parseInt(inputValue);
          var isValid = input >= range.min && input <= range.max;
          ctrl.$setValidity(error, isValid);
					scope.$broadcast('$error', {
						name: attrs.name,
						label: attrs.label || attrs.name,
						valid: isValid,
						error: error,
						value: attrs.gumgaRangeNumber
					});
	 				return inputValue;
	 			};
	 			ctrl.$parsers.unshift(validateRangeNumber);
	 			ctrl.$formatters.push(validateRangeNumber);
	 			attrs.$observe('gumgaRangeNumber', function () {
	 				validateRangeNumber(ctrl.$viewValue);
	 			});
	 		}
	 	}
	 }
	 angular.module('gumga.directives.form.range.number',[])
	 .directive('gumgaRangeNumber',RangeNumber);
	})();

(function(){
  'use strict';
  /**
   * @ngdoc directive
   * @name gumga.core:gumgaRequired
   * @restrict A
   * @element ANY
   * @description
   * O componente GumgaRequired serve para validar campos obrigatórios.
   *
   * ## Exemplo
   * Um exemplo da directive GumgaRequired funcionando pode ser encontrado [aqui](http://embed.plnkr.co/AcjqcgvgGhdJqDh72eHA).
   *
   * @param {String} label Usado na integração com {@link gumga.core:gumgaErrors} para indicar em qual campo se encontra o erro.
   * Se o atributo for omitido, a diretiva usará o atributo name do input.
	 *
   * @example
   *  <pre>
   *    <form name="myForm">
   *      <input type="text" name="required" ng-model="required" gumga-required>
   *      <p ng-show="myForm.required.$error.required" class="text-danger">Campo obrigatório</p>
   *    </form>
   *  </pre>
   */
  Required.$inject = [];
  function Required() {
    return {
      restrict: 'A',
      require: 'ngModel',
      link: function (scope, elm, attrs, ctrl) {
        attrs.required = true;
        var validateRequired = function (inputValue) {
          var error = 'required';
          var isValid = !attrs.required || !ctrl.$isEmpty(inputValue);
          ctrl.$setValidity(error, isValid);
          scope.$broadcast('$error', {
            name: attrs.name,
            label: attrs.label || attrs.name,
            valid: isValid,
            error: error,
            value: attrs.gumgaRequired
          });
          return inputValue;
        };
        ctrl.$parsers.unshift(validateRequired);
        ctrl.$formatters.push(validateRequired);
        attrs.$observe('gumgaRequired', function () {
          validateRequired(ctrl.$viewValue);
        });
      }
    }
  }
  angular.module('gumga.directives.form.required',[])
  .directive('gumgaRequired',Required);
})();

(function(){
	'use strict';

	AdvancedLabel.$inject = [];
	function AdvancedLabel(){
		var template =
		'<div class="btn-group">' +
		'   <button class="btn btn-default btn-xs" ng-disabled="disabled" id="btn{{attr}}" ng-click="orOrAnd(value)"><strong>{{attr}}</strong> {{hql}} <strong>{{value}}</strong></button>' +
		'   <button class="btn btn-default btn-xs" ng-disabled="disabled" ng-click="emitDelete()" ng-if="getVisibility(value)"><span aria-hidden="true">&times;</span></button>' +
		'</div>';

		return {
			restrict: 'E',
			template: template,
			scope: {
				attr: '@',
				hql: '@',
				value: '=',
				index: '=',
				disabled: '='
			},
			link: function(scope,$elm,$attrs){
				if(!$attrs.disabled) scope.disabled = false;
				scope.bol = false;

				scope.orOrAnd = function(){

					if(typeof scope.value === 'string' && scope.value.toUpperCase() === 'OR' && !scope.hql){
						scope.value = 'AND';
					}   else  if(scope.value.toUpperCase() === 'AND' && !scope.hql){
						scope.value = 'OR';
					}
				};

				scope.emitDelete = function(){
					scope.$emit('deletepls',scope.index);
				};


				scope.getVisibility = function(val){
					return !(val == 'AND' || val == 'OR');
				}
			}
		};
	}
	angular.module('gumga.directives.search.advancedlabel',[])
	.directive('gumgaAdvancedLabel',AdvancedLabel)
})();

(function(){
	'use strict';

	AdvancedSearch.$inject = ["GumgaSearchHelper"];
	function AdvancedSearch(GumgaSearchHelper){
		var template =
		'   <div class="input-group">' +
		'       <input type="text" ng-model="searchInputText" class="form-control" ng-disabled="isPanelOpen" id="textMain"/> ' +
		'       <span class="input-group-btn">' +
		'           <button class="my-button btn-default" ng-click="showLittlePanel = !showLittlePanel"><span class="glyphicon glyphicon-chevron-down"></span></button>' +
		'           <button class="my-button btn-default" type="button" ng-click="isPanelOpen = !isPanelOpen"><span class="glyphicon glyphicon-filter"></span>' +
		'           <button class="my-button btn-primary last" type="button" ng-disabled="isPanelOpen" ng-click="doSearch(searchInputText)">Search <span class="glyphicon glyphicon-search"></span>' +
		'       </span>' +
		'   </div>' +
		'   <div class="panel-advanced" ng-show="isPanelOpen">' +
		'       <div class="panel-body">' +
		'           <div class="col-md-3">' +
		'           <h3 style="margin-top: 0;margin-bottom: 0"><small>Advanced Search</small></h3>' +
		'           </div>' +
		'           <div class="form-inline col-md-9">' +
		'               <div class="form-group">' +
		'                   <div class="list-holder">' +
		'                           <ul class="list-selectable" ng-show="selectAttribute">\n' +
		'                               <li ng-repeat="attr in attributes" ng-click="attributeHasChanged(attr)" class="hover-list"><button class="btn btn-link">{{attr.name}}</button></li>\n' +
		'                           </ul>\n' +
		'                       </div>' +
		'                       <button type=button class="btn btn-default" ng-click="selectAttribute = !selectAttribute" >{{query.attribute.name || \'Attribute\'}}<span class="caret"></span></button>' +
		'                      <div class="list-holder">' +
		'                           <ul class="list-selectable" ng-show="selectHQL">\n' +
		'                               <li ng-repeat="opt in hqlOpts" class="hover-list" ng-click="handleHqlOption(opt)"><button class="btn btn-link" >{{opt.label}}</button></li>\n' +
		'                           </ul>\n' +
		'                       </div>' +
		'                    <button type="button" class="btn btn-default" ng-click="selectHQL = !selectHQL"> {{ query.hql.label || \'HQL\'  }} <span class="caret"></span></button>  '+
		'                   <input type="{{typeInput}}" class="form-control col-x-3" ng-model="query.value" id="selectableAdvancedValue" ng-init="input = this"/>' +
		'                   <button type="button" class="btn btn-default" ng-click="addQuery(query)" ng-disabled="query.value.length > 0 ? false : true"><span class="glyphicon glyphicon-plus"></span></button>' +
		'               </div>' +
		'           </div>' +
		'       </div>'+
		'           <hr/>' +
		'       <div class="col-md-12" style="padding-bottom: 2%">' +
		'       <gumga-advanced-label ng-repeat="query in queries" attr="{{query.attribute.name}}" hql="{{query.hql.label}}" value="query.value" index="$index" style="margin-right: 1%"></gumga-advanced-label>' +
		'       <div class="col-md-12" style="margin-top: 1%;">' +
		'       <button class="btn btn-primary pull-right" type="button" ng-disabled="queries.length == 0" ng-click="showArray(queries)">Advanced Search<span class="glyphicon glyphicon-search"></span>' +
		'       </div>' +
		'       </div>' +
		'       <div class="clearfix" style="margin-bottom: 2%"></div>' +
		'   </div>' +
		'<div class="little-panel" ng-show="showLittlePanel">' +
		'   <div class="panel-body">' +
		'       <label ng-repeat="field in normalFields" style="display: block" ><input type="checkbox" ng-model="models[field.value]" style="margin-right: 1%" ><span>{{field.value}}</span></label>' +
		'   </div>' +
		'</div>';
		return {
			restrict: 'E',
			template: template,
			scope: false,
			require: '^?gumgaSearch',
			link: function(scope,elm,attrs,ctrl){
				scope.isPanelOpen = false;
				scope.selectHQL = false;
				scope.models = {};
				scope.searchField = '';
				scope.translate = scope.$parent.entityToTranslate;

				scope.$on('_doSearch',function(){
					if(scope.queries.length != 0){
						scope.showArray(scope.queries);
					} else {
						if(scope.searchInputText){
							scope.doSearch(scope.searchInputText);
						}
					}
				});

				scope.$on('_focus',function(){
					if(scope.isPanelOpen){
						document.getElementById('selectableAdvancedValue').focus();
					} else {
						document.getElementById('textMain').focus();
					}
				});



				if(!scope.$parent.normalFields.length > 0 || !scope.$parent.entityToTranslate){
					throw 'Missing some parameters in GumgaSearch';
				}

				scope.normalFields = scope.$parent.normalFields.map(function(elm,$index){
					scope.models[elm] = false;
					$index == 0 && (scope.models[elm] = true);
					return {
						name: elm.slice(0,1).toUpperCase() + elm.slice(1,elm.length).toLowerCase(),
						value: elm
					};
				});


				scope.$on('showPanel',function(){
					scope.isPanelOpen = !scope.isPanelOpen;
					scope.$apply();
				});

				scope.models.returnString = function(){
					var txt = '';
					for(var key in this) if(this.hasOwnProperty(key) && key != 'returnString' && this[key]){
						txt += key + ',';
					}
					if(txt.length == 0){
						return scope.normalFields[0].value;
					}
					return txt.slice(0,-1);
				};

				scope.$watch('isPanelOpen',function(){
					if(scope.isPanelOpen === true){
						scope.selectAttribute = true;
					} else {
						scope.queries = [];
					}
					scope.query = {};
				});
				scope.attributes = scope.$parent.attributes;
				scope.hqlOpts = [];
				scope.queries = [];

				scope.attributeHasChanged = function(attribute) {
					scope.query.attribute = attribute;
					if(attribute.type === 'date'){
						scope.typeInput = 'date';
					} else {
						scope.typeInput = 'text';
					}
					scope.hqlOpts = GumgaSearchHelper.getTypeListOfHQLPossibilities(attribute.type);
					scope.selectHQL = true ;
					scope.selectAttribute = false;
				};

				scope.handleHqlOption = function(hq){
					scope.query.hql = hq;
					scope.selectHQL = false;
				};

				angular.element(document.getElementById('selectableAdvancedValue'))
				.on('keydown',function(ev){
					if(ev.keyCode == 13 && ev.target.value.length > 0){
						scope.addQuery(scope.query);
					}
					scope.$apply();
				});

				angular.element(document.getElementById('textMain'))
				.on('keydown',function(ev){
					if(ev.keyCode == 13 && ev.target.value.length > 0){
						scope.$emit('normal',{field: scope.models.returnString(),param:scope.searchInputText || ''});
						if(scope.showLittlePanel){
							scope.showLittlePanel = !scope.showLittlePanel;
						}
					}
				});

				scope.addQuery = function(query){
					if(scope.queries.length === 0){
						scope.queries.push(query);
					} else if(scope.queries.length >= 1){
						scope.queries.splice(scope.queries.length,1,{value: 'AND'},query);
					}
					scope.query = {};
					scope.typeInput = 'text';
				};

				scope.$on('deletepls',function(ev,data){
					scope.queries.splice(data,1);
				});

				scope.showArray = function(array){
					scope.isPanelOpen = false;
					scope.$emit('advanced',{hql: GumgaSearchHelper.translateArrayToHQL(array),source: array});
				};

				scope.doSearch = function(txt){
					scope.$emit('normal',{field: scope.models.returnString(),param:txt || ''});
					scope.searchInputText = '';
				};
			}
		};
	}
	angular.module('gumga.directives.search.advancedsearch',['gumga.directives.search.searchhelper'])
	.directive('gumgaAdvancedSearch',AdvancedSearch)
})();

(function(){
	'use strict';
	
	NormalSearch.$inject = [];
	function NormalSearch(){
		var template =
		'<div class="input-group">' +
		'   <input type="text" class="form-control" ng-model="searchField" placeholder="Search"/>' +
		'   <span class="input-group-btn">' +
		'       <button class="my-button btn-default" ng-click="showLittlePanel = !showLittlePanel"><span class="glyphicon glyphicon-chevron-down"></span></button>' +
		'       <button class="my-button btn-primary last" type="button" ng-disabled="!searchField" ng-click="doSearch(searchField)" >Search <span class="glyphicon glyphicon-search"></span></button>' +
		'   </span>' +
		'</div>' +
		'<div class="little-panel" ng-show="showLittlePanel">' +
		'   <div class="panel-body">' +
		'       <label ng-repeat="field in normalFields" style="display: block" ><input type="checkbox" ng-model="models[field.value]" style="margin-right: 1%" ><span>{{field.value}}</span></label>' +
		'   </div>' +
		'</div>';
		return {
			restrict: 'E',
			template: template,
			link: function(scope,elm,attrs){
				if(!scope.$parent.normalFields.length > 0 || !scope.$parent.entityToTranslate){
					throw 'Missing some parameters in GumgaSearch';
				}
				scope.models = {};
				scope.searchField = '';
				scope.translate = scope.$parent.entityToTranslate;
				scope.normalFields = scope.$parent.normalFields.map(function(elm,$index){
					scope.models[elm] = false;
					$index == 0 && (scope.models[elm] = true);
					return {
						name: elm.slice(0,1).toUpperCase() + elm.slice(1,elm.length).toLowerCase(),
						value: elm
					};
				});

				scope.models.returnString = function(){
					var txt = '';
					for(var key in this) if(this.hasOwnProperty(key) && key != 'returnString' && this[key]){
						txt += key + ',';
					}
					if(txt.length == 0){
						return scope.normalFields[0].value;
					}
					return txt.slice(0,-1);
				};

				elm.find('input')
				.bind('keypress',function(ev){
					if(ev.keyCode == 13 && scope.searchField.length > 0){
						scope.$emit('normal',{field: scope.models.returnString(),param:scope.searchField});
						if(scope.showLittlePanel){
							scope.showLittlePanel = !scope.showLittlePanel;
						}
					}
				});

				scope.doSearch = function(txt){
					scope.$emit('normal',{field: scope.models.returnString(),param:txt || ''});
					scope.showLittlePanel = !scope.showLittlePanel;
					scope.searchField = '';
				};

			}
		};
	}
	angular.module('gumga.directives.search.normalsearch',[])
	.directive('gumgaNormalSearch',NormalSearch)
})();
(function(){
	'use strict';

	Search.$inject = [];
	function Search(){
		var template =
		'<div class="full-width-without-padding">' +
		'     <div ng-if="!adv">' +
		'         <gumga-normal-search></gumga-normal-search>' +
		'     </div>' +
		'     <div ng-if="adv">' +
		'         <gumga-advanced-search></gumga-advanced-search>' +
		'     </div>' +
		'</div>';
		return {
			restrict: 'E',
			template: template,
			transclude: true,
			scope : {
				advanced: '&advancedMethod',
				normal: '&searchMethod',
				onSearch: '&',
				onAdvancedSearch: '&'
			},
			link: function(scope,elm,attrs,controller,transcludeFn){
				scope.adv = false;
				scope.attributes = [];
				scope.normalFields = attrs.fields.split(',');
				scope.entityToTranslate = attrs.translateEntity;
				scope.$parent.searchQueries = []
				var eventHandler = {
					search: attrs.onSearch ? scope.onSearch : angular.noop,
					advanced: attrs.onAdvancedSearch ? scope.onAdvancedSearch : angular.noop
				}
				if(attrs.advanced === "true"){
					scope.adv = true;
				}

				scope.getAttributes = function (){
					transcludeFn(function(clone){
						angular.forEach(clone,function(cloneEl){
							if(cloneEl.nodeName == 'ADVANCED-FIELD'){
								scope.attributes.push({
									name: cloneEl.getAttribute('name'),
									type: cloneEl.getAttribute('type')
								});
							}
						});
					});
				};

				scope.$on('advanced',function(ev,data){
					scope.$parent.searchQueries = [];
					scope.$parent.searchQueries = data.source;
					scope.advanced({param: data});
					eventHandler.advanced();
        });

				scope.$on('normal',function(ev,data){
					scope.normal({field: data.field,param: data.param});
					eventHandler.search()
        });

				scope.getAttributes();
			}
		};
	}
	angular.module('gumga.directives.search.search',[])
	.directive('gumgaSearch',Search)
})();

(function(){
	'use strict';
	
	SearchHelper.$inject = [];
	function SearchHelper(){
		var types ={
			"string": {
				"HQLPossibilities": [
				{hql:"eq",label: "igual" , before: "='",after:"'"},
				{hql:"ne",label: "diferente de" , before: "!='",after:"'"},
				{hql: "contains",label: "contém" , before: " like '\%",after:"\%'"},
				{hql: "not_contains",label:"não contém" , before: " not like '\%",after:"\%'"},
				{hql: "starts_with",label:"começa com" , before: "like '",after:"\%'"},
				{hql: "ends_with",label: "termina com" , before: "like '\%",after:"'"},
				{hql: "ge",label:"maior igual" , before: ">='",after:"'"},
				{hql: "le",label: "menor igual" , before: "<='",after:"'"}]
			},
			"number": {
				"HQLPossibilities": [
				{hql:"eq",label: "igual", before: "=",after:""},
				{hql:"ne",label: "diferente de", before: "!=",after:""},
				{hql: "gt",label:"maior que", before: ">",after:""},
				{hql: "ge",label:"maior igual", before: ">=",after:""},
				{hql: "lt",label:"menor que", before: "<",after:""},
				{hql: "le",label:"maior igual", before: "<=",after:""}]
			},
			"money": {
				"HQLPossibilities": [
				{hql:"eq",label: "igual", before: "=",after:""},
				{hql:"ne",label: "diferente de", before: "!=",after:""},
				{hql: "gt",label:"maior que", before: ">",after:""},
				{hql: "ge",label:"maior igual", before: ">=",after:""},
				{hql: "lt",label:"menor que", before: "<",after:""},
				{hql: "le",label:"maior igual", before: "<=",after:""}]

			},
			"boolean": {
				"HQLPossibilities": [{hql:"eq",label: "igual" , before: "='",after:"'"}]
			},
			"date": {
				"HQLPossibilities": [
				{hql: "eq", label: "igual", before: "='", after: "'"},
				{hql: "ge", label: "maior igual", before: ">='", after: "'"},
				{hql: "le", label: "menor igual", before: "<='", after: "'"}]
			}
		};
		return {
			getTypeListOfHQLPossibilities: function(type){
				if(angular.isDefined(types[type]))
					return types[type].HQLPossibilities;
				throw 'Type doesn\'t exist';
			},
			translateArrayToHQL: function(array){
				return array
				.map(function(element) {
					return (
						(angular.isDefined(element.attribute) ? 'obj.' + element.attribute.name : '!')
						+ '' +
						(angular.isDefined(element.hql) ? element.hql.before : ' !')
						+ '' +
						element.value
						+ (angular.isDefined(element.hql) ? element.hql.after : ' !') );
				}).map(function(element){
					if(element.indexOf('!') != -1){
						return element.replace(/!/g,'');
					}
					return element;
				}).join("");
			}
		};
	}
	angular.module('gumga.directives.search.searchhelper',[])
	.factory('GumgaSearchHelper',SearchHelper)
})();
(function(){
	'use strict';
	Translate.$inject = ["$http", "TranslateHelper"];
	function Translate($http,TranslateHelper){
		var ch = 0;
		return {
			restrict: 'AEC',
			scope: false,
			link: function($scope,$elm,$attrs){
				var language = $attrs.gumgaTranslate.toLowerCase() || navigator.language.toLowerCase();
				if(!TranslateHelper.getSessionStorageItem(language)){
					$http.get('./i18n/' + language + '.json')
					.success(function(values){
						TranslateHelper.setTranslators(language,values);
					});
				}

			}
		};
	}

	angular.module('gumga.directives.translate.translate',['gumga.directives.translate.translatehelper'])
	.directive('gumgaTranslate',Translate);
})();
(function(){
	'use strict';

	function TranslateHelper(){
		return {
			getSessionStorageItem: function(key){
				var g = window.sessionStorage.getItem(key);
				if(!g){
					return null;
				}
				try {
					angular.fromJson(g);
				}catch(e){
					return g;
				}
				this.translators = angular.fromJson(angular.fromJson(g));
				return angular.fromJson(angular.fromJson(g));
			},
			translators: {},
			setTranslators: function(language,obj){
				this.translators = obj;
				this.setSessionStorageItem(language,JSON.stringify(obj));
			},
			setSessionStorageItem: function(key,value){
				window.sessionStorage.setItem(key,angular.toJson(value));
			},
			returnTranslation: function(string){
				var array = string.split('.');
				try {
					return this.translators[array[0].toLowerCase().trim()][array[1].toLowerCase().trim()];
				} catch(e){}
			}
		};
	}

	angular.module('gumga.directives.translate.translatehelper',[])
	.factory('TranslateHelper',TranslateHelper);

})();

(function(){
  'use strict';
  TranslateTag.$inject = ["TranslateHelper", "$compile"];
  function TranslateTag(TranslateHelper,$compile){
    var child;
    return {
      restrict: 'A',
      link: function(scope,elm,attrs){
        if(!attrs.gumgaTranslateTag) throw 'You must pass a valid value to gumgaTranslateTag';
        if(TranslateHelper.returnTranslation(attrs.gumgaTranslateTag)){
          if(elm[0].childNodes.length > 0){
            scope.child = elm[0].childNodes[0];
            elm[0].innerHTML =  TranslateHelper.returnTranslation(attrs.gumgaTranslateTag);
            elm.append($compile(scope.child)(scope));
          } else {
            elm[0].innerHTML = TranslateHelper.returnTranslation(attrs.gumgaTranslateTag);
          }
        }
      }

    };
  }

  angular.module('gumga.directives.translate.translatetag',['gumga.directives.translate.translatehelper'])
  .directive('gumgaTranslateTag',TranslateTag);
})();

//# sourceMappingURL=data:application/json;base64,